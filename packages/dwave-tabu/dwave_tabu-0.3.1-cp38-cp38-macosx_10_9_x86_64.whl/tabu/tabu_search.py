# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tabu_search
else:
    import _tabu_search

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tabu_search.delete_SwigPyIterator

    def value(self):
        return _tabu_search.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _tabu_search.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _tabu_search.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _tabu_search.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _tabu_search.SwigPyIterator_equal(self, x)

    def copy(self):
        return _tabu_search.SwigPyIterator_copy(self)

    def next(self):
        return _tabu_search.SwigPyIterator_next(self)

    def __next__(self):
        return _tabu_search.SwigPyIterator___next__(self)

    def previous(self):
        return _tabu_search.SwigPyIterator_previous(self)

    def advance(self, n):
        return _tabu_search.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _tabu_search.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _tabu_search.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _tabu_search.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _tabu_search.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _tabu_search.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _tabu_search.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tabu_search:
_tabu_search.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _tabu_search.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tabu_search.IntVector___nonzero__(self)

    def __bool__(self):
        return _tabu_search.IntVector___bool__(self)

    def __len__(self):
        return _tabu_search.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _tabu_search.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tabu_search.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tabu_search.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tabu_search.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tabu_search.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tabu_search.IntVector___setitem__(self, *args)

    def pop(self):
        return _tabu_search.IntVector_pop(self)

    def append(self, x):
        return _tabu_search.IntVector_append(self, x)

    def empty(self):
        return _tabu_search.IntVector_empty(self)

    def size(self):
        return _tabu_search.IntVector_size(self)

    def swap(self, v):
        return _tabu_search.IntVector_swap(self, v)

    def begin(self):
        return _tabu_search.IntVector_begin(self)

    def end(self):
        return _tabu_search.IntVector_end(self)

    def rbegin(self):
        return _tabu_search.IntVector_rbegin(self)

    def rend(self):
        return _tabu_search.IntVector_rend(self)

    def clear(self):
        return _tabu_search.IntVector_clear(self)

    def get_allocator(self):
        return _tabu_search.IntVector_get_allocator(self)

    def pop_back(self):
        return _tabu_search.IntVector_pop_back(self)

    def erase(self, *args):
        return _tabu_search.IntVector_erase(self, *args)

    def __init__(self, *args):
        _tabu_search.IntVector_swiginit(self, _tabu_search.new_IntVector(*args))

    def push_back(self, x):
        return _tabu_search.IntVector_push_back(self, x)

    def front(self):
        return _tabu_search.IntVector_front(self)

    def back(self):
        return _tabu_search.IntVector_back(self)

    def assign(self, n, x):
        return _tabu_search.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _tabu_search.IntVector_resize(self, *args)

    def insert(self, *args):
        return _tabu_search.IntVector_insert(self, *args)

    def reserve(self, n):
        return _tabu_search.IntVector_reserve(self, n)

    def capacity(self):
        return _tabu_search.IntVector_capacity(self)
    __swig_destroy__ = _tabu_search.delete_IntVector

# Register IntVector in _tabu_search:
_tabu_search.IntVector_swigregister(IntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _tabu_search.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tabu_search.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _tabu_search.DoubleVector___bool__(self)

    def __len__(self):
        return _tabu_search.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _tabu_search.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tabu_search.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tabu_search.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tabu_search.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tabu_search.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tabu_search.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _tabu_search.DoubleVector_pop(self)

    def append(self, x):
        return _tabu_search.DoubleVector_append(self, x)

    def empty(self):
        return _tabu_search.DoubleVector_empty(self)

    def size(self):
        return _tabu_search.DoubleVector_size(self)

    def swap(self, v):
        return _tabu_search.DoubleVector_swap(self, v)

    def begin(self):
        return _tabu_search.DoubleVector_begin(self)

    def end(self):
        return _tabu_search.DoubleVector_end(self)

    def rbegin(self):
        return _tabu_search.DoubleVector_rbegin(self)

    def rend(self):
        return _tabu_search.DoubleVector_rend(self)

    def clear(self):
        return _tabu_search.DoubleVector_clear(self)

    def get_allocator(self):
        return _tabu_search.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _tabu_search.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _tabu_search.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _tabu_search.DoubleVector_swiginit(self, _tabu_search.new_DoubleVector(*args))

    def push_back(self, x):
        return _tabu_search.DoubleVector_push_back(self, x)

    def front(self):
        return _tabu_search.DoubleVector_front(self)

    def back(self):
        return _tabu_search.DoubleVector_back(self)

    def assign(self, n, x):
        return _tabu_search.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _tabu_search.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _tabu_search.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _tabu_search.DoubleVector_reserve(self, n)

    def capacity(self):
        return _tabu_search.DoubleVector_capacity(self)
    __swig_destroy__ = _tabu_search.delete_DoubleVector

# Register DoubleVector in _tabu_search:
_tabu_search.DoubleVector_swigregister(DoubleVector)

class IntArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _tabu_search.IntArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tabu_search.IntArray___nonzero__(self)

    def __bool__(self):
        return _tabu_search.IntArray___bool__(self)

    def __len__(self):
        return _tabu_search.IntArray___len__(self)

    def __getslice__(self, i, j):
        return _tabu_search.IntArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tabu_search.IntArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tabu_search.IntArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tabu_search.IntArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tabu_search.IntArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tabu_search.IntArray___setitem__(self, *args)

    def pop(self):
        return _tabu_search.IntArray_pop(self)

    def append(self, x):
        return _tabu_search.IntArray_append(self, x)

    def empty(self):
        return _tabu_search.IntArray_empty(self)

    def size(self):
        return _tabu_search.IntArray_size(self)

    def swap(self, v):
        return _tabu_search.IntArray_swap(self, v)

    def begin(self):
        return _tabu_search.IntArray_begin(self)

    def end(self):
        return _tabu_search.IntArray_end(self)

    def rbegin(self):
        return _tabu_search.IntArray_rbegin(self)

    def rend(self):
        return _tabu_search.IntArray_rend(self)

    def clear(self):
        return _tabu_search.IntArray_clear(self)

    def get_allocator(self):
        return _tabu_search.IntArray_get_allocator(self)

    def pop_back(self):
        return _tabu_search.IntArray_pop_back(self)

    def erase(self, *args):
        return _tabu_search.IntArray_erase(self, *args)

    def __init__(self, *args):
        _tabu_search.IntArray_swiginit(self, _tabu_search.new_IntArray(*args))

    def push_back(self, x):
        return _tabu_search.IntArray_push_back(self, x)

    def front(self):
        return _tabu_search.IntArray_front(self)

    def back(self):
        return _tabu_search.IntArray_back(self)

    def assign(self, n, x):
        return _tabu_search.IntArray_assign(self, n, x)

    def resize(self, *args):
        return _tabu_search.IntArray_resize(self, *args)

    def insert(self, *args):
        return _tabu_search.IntArray_insert(self, *args)

    def reserve(self, n):
        return _tabu_search.IntArray_reserve(self, n)

    def capacity(self):
        return _tabu_search.IntArray_capacity(self)
    __swig_destroy__ = _tabu_search.delete_IntArray

# Register IntArray in _tabu_search:
_tabu_search.IntArray_swigregister(IntArray)

class DoubleArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _tabu_search.DoubleArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _tabu_search.DoubleArray___nonzero__(self)

    def __bool__(self):
        return _tabu_search.DoubleArray___bool__(self)

    def __len__(self):
        return _tabu_search.DoubleArray___len__(self)

    def __getslice__(self, i, j):
        return _tabu_search.DoubleArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _tabu_search.DoubleArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _tabu_search.DoubleArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _tabu_search.DoubleArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _tabu_search.DoubleArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _tabu_search.DoubleArray___setitem__(self, *args)

    def pop(self):
        return _tabu_search.DoubleArray_pop(self)

    def append(self, x):
        return _tabu_search.DoubleArray_append(self, x)

    def empty(self):
        return _tabu_search.DoubleArray_empty(self)

    def size(self):
        return _tabu_search.DoubleArray_size(self)

    def swap(self, v):
        return _tabu_search.DoubleArray_swap(self, v)

    def begin(self):
        return _tabu_search.DoubleArray_begin(self)

    def end(self):
        return _tabu_search.DoubleArray_end(self)

    def rbegin(self):
        return _tabu_search.DoubleArray_rbegin(self)

    def rend(self):
        return _tabu_search.DoubleArray_rend(self)

    def clear(self):
        return _tabu_search.DoubleArray_clear(self)

    def get_allocator(self):
        return _tabu_search.DoubleArray_get_allocator(self)

    def pop_back(self):
        return _tabu_search.DoubleArray_pop_back(self)

    def erase(self, *args):
        return _tabu_search.DoubleArray_erase(self, *args)

    def __init__(self, *args):
        _tabu_search.DoubleArray_swiginit(self, _tabu_search.new_DoubleArray(*args))

    def push_back(self, x):
        return _tabu_search.DoubleArray_push_back(self, x)

    def front(self):
        return _tabu_search.DoubleArray_front(self)

    def back(self):
        return _tabu_search.DoubleArray_back(self)

    def assign(self, n, x):
        return _tabu_search.DoubleArray_assign(self, n, x)

    def resize(self, *args):
        return _tabu_search.DoubleArray_resize(self, *args)

    def insert(self, *args):
        return _tabu_search.DoubleArray_insert(self, *args)

    def reserve(self, n):
        return _tabu_search.DoubleArray_reserve(self, n)

    def capacity(self):
        return _tabu_search.DoubleArray_capacity(self)
    __swig_destroy__ = _tabu_search.delete_DoubleArray

# Register DoubleArray in _tabu_search:
_tabu_search.DoubleArray_swigregister(DoubleArray)

class TabuSearch(object):
    r"""
    Tabu Search

    handler = TabuSearch(q, init_solution, tenure, scaleFactor, timeout)

        Args:
            q: QUBO as a list of list, or numpy matrix of double (float64) values.
               q must be symmetric.
            init_solution: List of 0/1 values, which defines the initial state of each variable.
            tenure: Tabu tenure. min(20, num_vars / 4) seems to be a good choice.
            scaleFactor: Scaling factor for elements of q. The elements of q are stored as long ints using
                         internal_q = long int (q * scaleFactor).
            timeout: Total running time in milliseconds.

    energy = handler.bestEnergy()

    solution = handler.bestSolution()
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, Q, initSol, tenure, scaleFactor, timeout):
        r"""
        Tabu Search

        handler = TabuSearch(q, init_solution, tenure, scaleFactor, timeout)

            Args:
                q: QUBO as a list of list, or numpy matrix of double (float64) values.
                   q must be symmetric.
                init_solution: List of 0/1 values, which defines the initial state of each variable.
                tenure: Tabu tenure. min(20, num_vars / 4) seems to be a good choice.
                scaleFactor: Scaling factor for elements of q. The elements of q are stored as long ints using
                             internal_q = long int (q * scaleFactor).
                timeout: Total running time in milliseconds.

        energy = handler.bestEnergy()

        solution = handler.bestSolution()
        """
        _tabu_search.TabuSearch_swiginit(self, _tabu_search.new_TabuSearch(Q, initSol, tenure, scaleFactor, timeout))

    def bestEnergy(self):
        return _tabu_search.TabuSearch_bestEnergy(self)

    def bestSolution(self):
        return _tabu_search.TabuSearch_bestSolution(self)
    __swig_destroy__ = _tabu_search.delete_TabuSearch

# Register TabuSearch in _tabu_search:
_tabu_search.TabuSearch_swigregister(TabuSearch)

class Exception(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, error):
        _tabu_search.Exception_swiginit(self, _tabu_search.new_Exception(error))
    __swig_destroy__ = _tabu_search.delete_Exception

    def what(self):
        return _tabu_search.Exception_what(self)

# Register Exception in _tabu_search:
_tabu_search.Exception_swigregister(Exception)



