from typing import List

from cwapi3d import point_3d, element_module_properties


def get_last_error(code: int) -> str: ...
def get_all_identifiable_element_ids() -> List[int]: ...
def get_visible_identifiable_element_ids() -> List[int]: ...
def get_invisible_identifiable_element_ids() -> List[int]: ...
def get_active_identifiable_element_ids() -> List[int]: ...
def get_inactive_all_identifiable_element_ids() -> List[int]: ...
def get_inactive_visible_identifiable_element_ids() -> List[int]: ...
def delete_elements(elements: List[int]) -> None: ...
def join_elements(elements: List[int]) -> None: ...
def join_top_level_elements(elements: List[int]) -> None: ...
def create_rectangular_beam_points(width: float, height: float, p1: point_3d, p2: point_3d, p3: point_3d) -> int: ...
def create_circular_beam_points(diameter: float, p1: point_3d, p2: point_3d, p3: point_3d) -> int: ...
def create_square_beam_points(width: float, p1: point_3d, p2: point_3d, p3: point_3d) -> int: ...
def create_rectangular_beam_vectors(length: float, width: float, height: float, p1: point_3d, p2: point_3d, p3: point_3d) -> int: ...
def create_circular_beam_vectors() -> int: ...
def create_square_beam_vectors() -> int: ...
def create_rectangular_panel_points(width: float, thickness: float, p1: point_3d, p2: point_3d, p3: point_3d) -> int: ...
def create_rectangular_panel_vectors(length: float, width: float, height: float, p1: point_3d, p2: point_3d, p3: point_3d) -> int: ...
def create_drilling_points(diameter: float, p1: point_3d, p2: point_3d) -> int: ...
def create_drilling_vectors() -> int: ...
def create_line_points(p1: point_3d, p2: point_3d) -> int: ...
def create_line_vectors(length: float, xl: point_3d, yl: point_3d) -> int: ...
def create_node(p1: point_3d) -> int: ...
def solder_elements(elements: List[int]) -> List[int]: ...
def convert_beam_to_panel(elements: List[int]) -> None: ...
def convert_panel_to_beam(elements: List[int]) -> None: ...
def delete_all_element_end_types(elements: List[int]) -> None: ...
def delete_all_element_processes(elements: List[int]) -> None: ...
def move_element(elements: List[int], vector: point_3d) -> None: ...
def create_polygon_beam() -> None: ...
def create_text_object() -> None: ...
def copy_elements(elements: List[int], vector: point_3d) -> List[int]: ...
def rotate_elements() -> None: ...
def subtract_elements(elements: List[int], elements: List[int]) -> List[int]: ...
def check_element_id(element: int) -> bool: ...
def start_element_module_calculation(elements: List[int]) -> None: ...
def set_element_detail_path(path: str) -> None: ...
def get_element_detail_path() -> str: ...
def get_element_cadwork_guid(element: int) -> str: ...
def get_element_from_cadwork_guid(guid: str) -> int: ...
def add_elements_to_undo(elements: List[int], number: int) -> None: ...
def make_undo() -> None: ...
def make_redo() -> None: ...
def split_elements(elements: List[int]) -> None: ...
def set_line_to_marking_line(elements: List[int]) -> None: ...
def set_line_to_normal_line(elements: List[int]) -> None: ...
def create_auto_export_solid_from_standard() -> int: ...
def set_element_module_properties_for_elements() -> None: ...
def get_element_module_properties_for_element() -> element_module_properties: ...
def get_element_type_description() -> str: ...
def create_text_object_with_font() -> int: ...
def get_opening_variant_ids() -> List[int]: ...
def get_parent_container_id() -> int: ...
def get_export_solid_content_elements() -> List[int]: ...
def get_container_content_elements() -> List[int]: ...
def apply_transformation_coordinate() -> None: ...
def delete_elements_with_undo() -> None: ...
def add_created_elements_to_undo() -> None: ...
def add_modified_elements_to_undo() -> None: ...
def recreate_elements() -> None: ...
def check_if_elements_are_in_collision() -> bool: ...
def check_if_elements_are_in_contact() -> bool: ...
def create_multi_wall() -> None: ...
def get_user_element_ids() -> List[int]: ...
def get_element_contact_vertices() -> List[point_3d]: ...
def get_nesting_parent_id() -> int: ...
def get_user_element_ids_with_existing() -> List[int]: ...
def clear_errors() -> None: ...
def glide_elements() -> None: ...
def get_element_contact_facets() -> List[List[point_3d]]: ...
def get_element_raw_interface_vertices() -> List[point_3d]: ...
def cut_elements_with_miter() -> bool: ...
def cut_element_with_plane() -> bool: ...
def create_circular_mep() -> int: ...
def create_rectangular_mep() -> int: ...
def slice_element_with_plane() -> bool: ...
def create_auto_container_from_standard() -> int: ...
def create_auto_export_solid_from_standard_with_reference() -> int: ...
def create_auto_container_from_standard_with_reference() -> int: ...
def slice_elements_with_plane_and_get_new_elements() -> List[int]: ...
def create_surface() -> int: ...
def convert_circular_beam_to_drilling() -> None: ...
def get_standard_export_solid_list() -> List[str]: ...
def get_standard_container_list() -> List[str]: ...
def stretch_start_facet() -> None: ...
def stretch_end_facet() -> None: ...
def get_variant_sibling_element_ids() -> List[int]: ...
def set_export_solid_contents() -> None: ...
def set_container_contents() -> None: ...
def set_parent_opening_variants_opening_angle(elements: List[int], value: float) -> None: ...
