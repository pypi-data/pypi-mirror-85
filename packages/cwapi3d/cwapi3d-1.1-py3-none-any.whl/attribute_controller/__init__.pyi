from typing import List

from cwapi3d import process_type, extended_settings, output_type, element_type, layer_settings


def get_last_error(code: int) -> str: ...


def get_name(element: int) -> str: ...


def set_name(elements: List[int], name: str) -> None: ...


def get_group(element: int) -> str: ...


def set_group(elements: List[int], group: str) -> None: ...


def get_subgroup(element: int) -> str: ...


def set_subgroup(elements: List[int], subgroup: str) -> None: ...


def get_comment(element: int) -> str: ...


def set_comment(elements: List[int], comment: str) -> None: ...


def get_user_attribute(element: int, number: int) -> str: ...


def set_user_attribute(elements: List[int], number: int, value: str) -> None: ...


def get_sku(element: int) -> str: ...


def set_sku(elements: List[int], sku: str) -> None: ...


def get_production_number(element: int) -> int: ...


def set_production_number(elements: List[int], number: int) -> None: ...


def get_part_number(element: int) -> int: ...


def set_part_number(elements: List[int], number: int) -> None: ...


def get_additional_data(element: int, code: str) -> str: ...


def set_additional_data(elements: List[int], code: str, data: str) -> None: ...


def delete_additional_data(elements: List[int], code: str) -> None: ...


def get_user_attribute_name(number: int) -> str: ...


def set_user_attribute_name(number: int, name: str) -> None: ...


def get_wall_situation(element: int) -> str: ...


def is_beam(element: int) -> bool: ...


def is_panel(element: int) -> bool: ...


def is_opening(element: int) -> bool: ...


def is_wall(element: int) -> bool: ...


def is_floor(element: int) -> bool: ...


def is_roof(element: int) -> bool: ...


def is_metal(element: int) -> bool: ...


def is_export_solid(element: int) -> bool: ...


def is_container(element: int) -> bool: ...


def is_connector_axis(element: int) -> bool: ...


def is_drilling(element: int) -> bool: ...


def is_node(element: int) -> bool: ...


def is_auxiliary(element: int) -> bool: ...


def get_element_material_name(element: int) -> str: ...


def get_prefab_layer(element: int) -> str: ...


def get_machine_calculation_set(element: int) -> str: ...


def get_cutting_set(element: int) -> str: ...


def set_process_type_and_extended_settings_from_name(elements: List[int]) -> None: ...


def set_name_process_type(name: str, process_type: process_type) -> None: ...


def get_name_process_type(name: int) -> process_type: ...


def set_name_extended_settings(name: str, extended_settings: extended_settings) -> None: ...


def get_name_extended_settings(name: str) -> extended_settings: ...


def get_output_type(element: int) -> output_type: ...


def set_output_type(elements: List[int], output_type: output_type) -> None: ...


def get_extended_settings(element: int) -> extended_settings: ...


def set_extended_settings(elements: List[int], extended_settings: extended_settings) -> None: ...


def get_element_type(element: int) -> element_type: ...


def set_wall(elements: List[int]) -> None: ...


def set_floor(elements: List[int]) -> None: ...


def set_opening(elements: List[int]) -> None: ...


def get_fastening_attribute(element: int) -> str: ...


def set_fastening_attribute(elements: List[int], value: str) -> None: ...


def is_roof_surface(element: int) -> bool: ...


def is_caddy_object(element: int) -> bool: ...


def set_element_material(elements: List[int], material_id: int) -> None: ...


def get_assembly_number(element: int) -> str: ...


def set_assembly_number(elements: List[int], number: str) -> None: ...


def get_list_quantity(element: int) -> int: ...


def set_list_quantity(elements: List[int], quantity: int) -> None: ...


def is_envelope(element: int) -> bool: ...


def set_layer_settings(elements: List[int], layer_settings: layer_settings) -> None: ...


def set_ignore_in_vba_calculation(elements: List[int], value: bool) -> None: ...


def get_ignore_in_vba_calculation(element: int) -> bool: ...


def clear_errors() -> None: ...


def is_architecture_wall_2dc(element: int) -> bool: ...


def is_architecture_wall_xml(element: int) -> bool: ...


def set_reference_wall_2dc(elements: List[int], wall: str) -> None: ...
