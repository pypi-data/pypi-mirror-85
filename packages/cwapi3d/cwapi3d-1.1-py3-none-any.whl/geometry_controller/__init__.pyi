from typing import List

from cwapi3d import point_3d


def get_last_error(code: int) -> str: ...
def get_width(element: int) -> float: ...
def get_height(element: int) -> float: ...
def get_length(element: int) -> float: ...
def get_p1(element: int) -> point_3d: ...
def get_p2(element: int) -> point_3d: ...
def get_p3(element: int) -> point_3d: ...
def get_start_height_cut_angle(element: int) -> float: ...
def get_start_width_cut_angle(element: int) -> float: ...
def get_end_height_cut_angle(element: int) -> float: ...
def get_end_width_cut_angle(element: int) -> float: ...
def rotate_height_axis_90(elements: List[int]) -> None: ...
def rotate_height_axis_180(elements: List[int]) -> None: ...
def get_over_width(element: int) -> float: ...
def set_over_width(element: int, value: float) -> None: ...
def get_over_height(element: int) -> float: ...
def set_over_height(element: int, value: float) -> None: ...
def get_over_length(element: int) -> float: ...
def set_over_length(element: int, value: float) -> None: ...
def get_rounding_width(element: int) -> float: ...
def set_rounding_width(element: int, value: float) -> None: ...
def get_rounding_height(element: int) -> float: ...
def set_rounding_height(element: int, value: float) -> None: ...
def get_rounding_length(element: int) -> float: ...
def set_rounding_length(element: int, value: float) -> None: ...
def get_cross_correction_negative_width(element: int) -> float: ...
def set_cross_correction_negative_width(element: int, value: float) -> None: ...
def get_cross_correction_positive_width(element: int) -> float: ...
def set_cross_correction_positive_width(element: int, value: float) -> None: ...
def get_cross_correction_negative_height(element: int) -> float: ...
def set_cross_correction_negative_height(element: int, value: float) -> None: ...
def get_cross_correction_positive_height(element: int) -> float: ...
def set_cross_correction_positive_height(element: int, value: float) -> None: ...
def get_cross_correction_negative_length(element: int) -> float: ...
def set_cross_correction_negative_length(element: int, value: float) -> None: ...
def get_cross_correction_positive_length(element: int) -> float: ...
def set_cross_correction_positive_length(element: int, value: float) -> None: ...
def get_weight(element: int) -> float: ...
def get_list_weight(element: int) -> float: ...
def get_volume(element: int) -> float: ...
def get_list_volume(element: int) -> float: ...
def get_xl(element: int) -> point_3d: ...
def get_yl(element: int) -> point_3d: ...
def get_zl(element: int) -> point_3d: ...
def get_center_of_gravity(element: int) -> point_3d: ...
def get_reference_side(element: int) -> int: ...
def get_element_vertices(element: int) -> List[point_3d]: ...
def apply_global_scale(elements: List[int], scale: float, origin: point_3d) -> None: ...
def auto_regenerate_axes(elements: List[int]) -> None: ...
def rotate_length_axis_90(elements: List[int]) -> None: ...
def rotate_length_axis_180(elements: List[int]) -> None: ...
def invert_model(elements: List[int]) -> None: ...
def get_element_facets(element: int) -> List[List[point_3d]]: ...
def get_list_width(element: int) -> float: ...
def get_list_height(element: int) -> float: ...
def get_list_length(element: int) -> float: ...
def set_width_real(elements: List[int], value: float) -> None: ...
def set_height_real(elements: List[int], value: float) -> None: ...
def set_length_real(elements: List[int], value: float) -> None: ...
def rotate_height_axis_2_points(elements: List[int], start: point_3d, end: point_3d) -> None: ...
def get_minimum_distance_between_elements(first_element: int, second_element: int) -> float: ...
def get_total_area_of_all_faces(element: int) -> float: ...
def get_area_of_front_face(element: int) -> float: ...
def get_door_surface(elements: List[int]) -> float: ...
def get_window_surface(elements: List[int]) -> float: ...
def get_local_x(element: int) -> point_3d: ...
def get_local_z(element: int) -> point_3d: ...
def get_local_y(element: int) -> point_3d: ...
def clear_errors() -> None: ...
def set_drilling_tolerance(elements: List[int], value: float) -> None: ...
def get_drilling_tolerance(element: int) -> float: ...
def get_element_reference_face_vertices(element: int) -> List[point_3d]: ...
def get_element_reference_face_area(element: int) -> float: ...
def auto_regenerate_axes_silently(elements: List[int]) -> None: ...
def rotate_length_axis_2_points(elements: List[int], start: point_3d, end: point_3d) -> None: ...
def get_center_of_gravity_for_list(elements: List[int]) -> point_3d: ...
