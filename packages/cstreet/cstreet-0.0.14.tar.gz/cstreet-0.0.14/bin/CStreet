#!python3.6
import argparse
import pandas as pd
import scanpy as sc
import os
def CStreet_parser():
    cstreet_parser = argparse.ArgumentParser(prog='CStreet', usage='%(prog)s [-h] <-i ExpMatrix1 ExpMatrix2 ExpMatrix3 ...> [-s CellStates1 CellStates2 CellStates3 ...] [-n ProjectName] [-o OutputDir] [options]',
                                            formatter_class=argparse.RawDescriptionHelpFormatter,
                                            description='CStreet is a cell states trajectory inference method for time-series single-cell RNA-seq data.')
    
    cstreet_parser.add_argument('-i',
                                '--Input_ExpMatrix',
                                nargs='+',
                                action='store',
                                type=str,
                                help='''Expression matrixes, which will contain the time-series expression level
                                 as reads counts or normalized values in tab delimited format. 
                                 For example: '-i ExpressionMatrix_t1.txt ExpressionMatrix_t2.txt ExpressionMatrix_t3.txt' means the input of 3 timepoints expression matrixes.'''
                                )

    cstreet_parser.add_argument('-T',
                                '--Input_CellonCol',
                                action='store_true',
                                dest='row_cell_flag',
                                help='''Whether the cells are arranged on rows or columns in the expression matrixes. 
                                For example: '-T' means cells on columns and genes on rows. 
                                DEFAULT: False. '''
                                )

    cstreet_parser.add_argument('-o',
                                '--Output_Dir',
                                action='store',
                                type=str,
                                default="./",
                                help='''Project directory, which will be used to save all output files. 
                                DEFAULT: "./"'''
                                )
    
    cstreet_parser.add_argument('-n',
                                '--Output_Name',
                                action='store',
                                type=str,
                                default="cstreet_project",
                                help='''Project name, which will be used to generate output file names. 
                                DEFAULT: "cstreet_project"'''
                                )

    cstreet_parser.add_argument('-s',
                                '--Input_CellStates',
                                nargs='*',
                                action='store',
                                type=str,
                                default="",
                                help='''Cell states information, which must contain a columns named "state" and 
                                the same cell ID with expression matrixes in tab delimited format. 
                                Cell states information can be inputted by the user or generated by the internal clustering function of CStreet using the Louvain algorithm. 
                                For example: '-s CellStates_t1.txt CellStates_t2.txt CellStates_t3.txt' means the cell states information of 3 timepoints expression matrixes.'''
                                )

    cstreet_parser.add_argument('--CellClusterParam_PCAn',
                                action='store',
                                type=int,
                                default=10,
                                help='''Number of principal components to use, which will be enabled ONLY if cell states information is not provided. 
                                It can be set to 1 - minimum dimension size of expression matrixes. 
                                DEFAULT: 10 '''
                                )
    
    cstreet_parser.add_argument('--CellClusterParam_kNNn',
                                action='store',
                                type=int,
                                default=15,
                                help='''Number of nearest neighbors to be searched, which will be enabled ONLY if cell states information is not provided. 
                                It should be in the range 2 to 100 in general.
                                DEFAULT: 15 '''
                                )

    cstreet_parser.add_argument('--CellClusterParam_Resolution',
                                action='store',
                                type=float,
                                default=1,
                                help='''Resolution of the Louvain algorithm, which will be enabled ONLY if cell states information is not provided. 
                                Higher resolution means finding more and smaller clusters. 
                                DEFAULT: 1.0 '''
                                )

    cstreet_parser.add_argument('--Switch_DeadCellFilter',
                                action='store',
                                type=str,
                                choices=["ON","OFF"],
                                default="ON",
                                help='''A switch of dead cell filter, which filter cell outliers based on counts percent of Mitochondrial gene. 
                                DEFAULT: "ON" '''
                                )

    cstreet_parser.add_argument('--Threshold_MitoPercent',
                                action='store',
                                type=float,
                                default=0.2,
                                help='''Maximum counts percent of Mitochondrial gene for a cell to pass filtering, which will be enabled ONLY if '--Switch_DeadCellFilter' is "ON". 
                                DEFAULT: 0.2 '''
                                )

    cstreet_parser.add_argument('--Switch_LowCellNumGeneFilter',
                                action='store',
                                type=str,
                                choices=["ON","OFF"],
                                default="ON",
                                help='''A switch of low cell number gene filter, which keep genes that are expressed in at least a number of cells. 
                                DEFAULT: "ON" '''
                                )

    cstreet_parser.add_argument('--Threshold_LowCellNum',
                                action='store',
                                type=int,
                                default=3,
                                help='''Minimum number of cells expressed required for a gene to pass filtering, which will be enabled ONLY if '--Switch_LowCellNumGeneFilter' is "ON".
                                DEFAULT: 3 '''
                                )

    cstreet_parser.add_argument('--Switch_LowGeneCellsFilter',
                                action='store',
                                type=str,
                                choices=["ON","OFF"],
                                default="ON",
                                help='''A switch of low gene number cell filter, which keep cells with at least a number of genes expressed.
                                DEFAULT: "ON" '''
                                )

    cstreet_parser.add_argument('--Threshold_LowGeneNum',
                                action='store',
                                type=int,
                                default=200,
                                help='''Minimum number of genes expressed required for a cell to pass filtering, which will be enabled ONLY if '--Switch_LowGeneCellsFilter' is "ON". 
                                DEFAULT: 200'''
                                )

    cstreet_parser.add_argument('--Switch_Normalize',
                                action='store',
                                type=str,
                                choices=["ON","OFF"],
                                default="ON",
                                help='''A switch of total read count normalization for per cell. DEFAULT: "NO" '''
                                )

    cstreet_parser.add_argument('--Threshold_NormalizeBase',
                                action='store',
                                type=int,
                                default=1000000,
                                help='''Normalize Base of normalization, which will be enabled ONLY if '--Switch_Normalize' is "ON". 
                                If choosing DEFAULT, it is CPM normalization. DEFAULT: 1e6 '''
                                )

    cstreet_parser.add_argument('--Switch_LogTransform',
                                action='store',
                                type=str,
                                choices=["ON","OFF"],
                                default="ON",
                                help='''A switch of logarithmizing the expression matrix. DEFAULT: "NO" '''
                                )

    cstreet_parser.add_argument('--WithinTimePointParam_PCAn',
                                action='store',
                                type=int,
                                default=10,
                                help='''Number of principal components to use, which will be used within a timepoint.  
                                It can be set to 1 - minimum dimension size of expression matrixes. 
                                DEFAULT: 10 '''
                                )

    cstreet_parser.add_argument('--WithinTimePointParam_kNNn',
                                action='store',
                                type=int,
                                default=15,
                                help='''Number of nearest neighbors to be searched, which will be used within a timepoint. 
                                It should be in the range 2 to 100 in general.
                                DEFAULT: 15 '''
                                )

    cstreet_parser.add_argument('--BetweenTimePointParam_PCAn',
                                action='store',
                                type=int,
                                default=10,
                                help='''Number of principal components to use, which will be used between timepoints. 
                                It can be set to 1 - minimum dimension size of expression matrixes. 
                                DEFAULT: 10 '''
                                )

    cstreet_parser.add_argument('--BetweenTimePointParam_kNNn',
                                action='store',
                                type=int,
                                default=15,
                                help='''Number of nearest neighbors to be searched, which will be used between timepoints. 
                                It should be in the range 2 to 100 in general.
                                DEFAULT: 15 '''
                                )
    cstreet_parser.add_argument('--ProbParam_SamplingSize',
                                action='store',
                                type=int,
                                default=5,
                                help='''Number of repeated sampling trials to estimate the connection probability. DEFAULT: 5 '''

                                )

    cstreet_parser.add_argument('--ProbParam_RandomSeed',
                                action='store',
                                type=int,
                                default=0,
                                help='''Random seed of repeated sampling, which will make the connection probability is reproducible. DEFAULT: 0 '''
                                )

    cstreet_parser.add_argument('--FigureParam_FigureSize',
                                action='store',
                                type=tuple,
                                default=(6,7),
                                help="Figure size of the result figure. Format is (width, height). DEFAULT:(6,7) "
                                )

    cstreet_parser.add_argument('--FigureParam_LabelBoxWidth',
                                action='store',
                                type=int,
                                default=10,
                                help='''Width of the label box in the result figure. 
                                For example: '--FigureParam_LabelBoxWidth 10' means 10 characters will be showed in label box of result figure. 
                                DEFAULT: 10'''
                                )

    cstreet_parser.add_argument('--Threshold_MaxOutDegree',
                                action='store',
                                type=int,
                                default=10,
                                help='''Maximum number of outdegree for each cell state will be displayed, which will ONLY be used for visualization. DEFAULT: 10 '''
                                )

    cstreet_parser.add_argument('--Threshold_MinCellNumofStates',
                                action='store',
                                type=int,
                                default=0,
                                help='''Minimum cell number of each cell state will be displayed, which will ONLY be used for visualization. DEFAULT: 0 '''
                                )

    return cstreet_parser
    

if __name__ == '__main__':

    cstreet_parser=CStreet_parser()
    args = cstreet_parser.parse_args()
    if args.Input_ExpMatrix is None:
        cstreet_parser.print_help()
        os._exit(0)

    if len(args.Input_ExpMatrix)<2:
        raise ValueError("2 timepoint data at least")

    scdata_list=[]
    cell_name_list=[]
    for path in args.Input_ExpMatrix:
        
        if str(path).split(".")[-1]=="txt":
            data=pd.read_csv(path,header=0, sep="\t",index_col=0)
            cell_name_list.append(data.index)
            if args.row_cell_flag :
                scdata_list.append(data.T)
            else:
                scdata_list.append(data)
        elif str(path).split(".")[-1]=="h5ad":
            data=sc.read_h5ad(path).to_df()
            cell_name_list.append(data.index)
            scdata_list.append(data)
        else:
            raise ValueError("Just accept '.txt' or '.h5ad' foramt.")

    cluster_list=[]
    for i in range(len(args.Input_CellStates)):
        path=args.Input_CellStates[i]
        data=pd.read_csv(path,header=None, sep="\t",index_col=0)
        data.columns=["state"]
        states=data.loc[cell_name_list[i],"state"].to_list()
        cluster_list.append(states)



    from cstreet import *
    
    cdata=CStreetData()
    for i in range(len(scdata_list)):
        if i<len(cluster_list):
            cdata.add_new_timepoint_scdata(scdata_list[i],cluster_list[i])
        else:
            cdata.add_new_timepoint_scdata(scdata_list[i])

    #Step0:basic params#
    cdata.params.Output_Dir=args.Output_Dir
    cdata.params.Output_Name=args.Output_Name

    #Step1:cell_cluster# 
    cdata.params.CellClusterParam_PCAn=args.CellClusterParam_PCAn
    cdata.params.CellClusterParam_kNNn=args.CellClusterParam_kNNn
    cdata.params.CellClusterParam_Resolution=args.CellClusterParam_Resolution

    #Step2:gene and cell filter#
    cdata.params.Switch_DeadCellFilter=True if args.Switch_DeadCellFilter=="ON" else False
    cdata.params.Threshold_MitoPercent=args.Threshold_MitoPercent
    cdata.params.Switch_LowCellNumGeneFilter=True if args.Switch_LowCellNumGeneFilter=="ON" else False
    cdata.params.Threshold_LowCellNum=args.Threshold_LowCellNum
    cdata.params.Switch_LowGeneCellsFilter=True if args.Switch_LowGeneCellsFilter=="ON" else False
    cdata.params.Threshold_LowGeneNum=args.Threshold_LowGeneNum

    #Step3:normalize#
    cdata.params.Switch_Normalize=True if args.Switch_Normalize=="ON" else False
    cdata.params.Threshold_NormalizeBase=args.Threshold_NormalizeBase
    cdata.params.Switch_LogTransform=True if args.Switch_LogTransform=="ON" else False

    #Step4:get_graph#
    cdata.params.WithinTimePointParam_PCAn=args.WithinTimePointParam_PCAn
    cdata.params.WithinTimePointParam_kNNn=args.WithinTimePointParam_kNNn
    cdata.params.BetweenTimePointParam_PCAn=args.BetweenTimePointParam_PCAn
    cdata.params.BetweenTimePointParam_kNNn=args.BetweenTimePointParam_kNNn

    #Step5: calculate probability
    cdata.params.ProbParam_SamplingSize=args.ProbParam_SamplingSize
    cdata.params.ProbParam_RandomSeed=args.ProbParam_RandomSeed
    #Step6:plot graph#
    cdata.params.FigureParam_FigureSize=args.FigureParam_FigureSize
    cdata.params.FigureParam_LabelBoxWidth=args.FigureParam_LabelBoxWidth
    cdata.params.Threshold_MaxOutDegree=args.Threshold_MaxOutDegree
    cdata.params.Threshold_MinCellNumofStates=args.Threshold_MinCellNumofStates

    cdata.run_cstreet()




