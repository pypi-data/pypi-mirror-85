Metadata-Version: 2.1
Name: pytest-simple-settings
Version: 0.1.5
Summary: simple-settings plugin for pytest
Home-page: https://github.com/tkukushkin/pytest-simple-settings
Author: Timofey Kukushkin
Author-email: tima@kukushkin.me
License: MIT
Project-URL: Source, https://github.com/tkukushkin/pytest-simple-settings
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Plugins
Classifier: Framework :: Pytest
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Testing :: Mocking
Description-Content-Type: text/markdown
Requires-Dist: pytest
Requires-Dist: simple-settings
Requires-Dist: typing ; python_version < "3"
Provides-Extra: test
Requires-Dist: pycodestyle ; extra == 'test'
Requires-Dist: pylint ; extra == 'test'

# pytest-simple-settings

[![PyPI version](https://badge.fury.io/py/pytest-simple-settings.svg)](https://pypi.org/project/pytest-simple-settings/) ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytest-simple-settings.svg?color=green) [![Build Status](https://github.com/tkukushkin/pytest-simple-settings/workflows/build/badge.svg?branch=master)](https://github.com/tkukushkin/pytest-simple-settings/actions?query=workflow%3Abuild+branch%3Amaster)

## Usage

With default `simple_settings.settings`:

```python
from simple_settings import settings


def test_foo(fake_settings):
    fake_settings.FOO = 1
    fake_settings.set(BAR=2)

    assert settings.FOO == 1
    assert settings.BAR == 2
```

With custom `LazySettings` instance
```python
import pytest
from simple_settings import LazySettings


instance = LazySettings('settings')


@pytest.fixture()
def settings_instance():
    return instance


def test_foo(fake_settings):
    fake_settings.FOO = 1
    fake_settings.set(BAR=2)

    assert instance.FOO == 1
    assert instance.BAR == 2
```


