.. _load_or_setup:
Initialize
===============

While :ref:`Units and Coordinate Systems <units_and_coordinate_systems>` outlines how to manually setup a ``StarCluster`` and its basic functionality, several functions have been written to load a ``StarCluster`` from output generated by commonly used software. More specifically, load functions have been written for Nbody6 (with and without stellar evolution), Gyrfalcon, and an AMUSE particle set. A load function has also been written for a generic snapshot, where column assignments can be set manually. Finally, it is possible for users to use their own load function.  Please feel free to suggest or write load functions for your personalized code in order to more easily use ``clustertools``. The benefit of using a load function is that, when dealing with a full simulation that provides cluster snapshots at difference times, it is possible to move to the next time step using ``StarCluster.advance``. Note this can work when manually setting up a ``StarCluster`` if the appropriate ``ctype`` is given along with necessary information for the filenames associated with each snapshot.

Alternatively, with the help of ``limepy`` it is possible to initialize a ``StarCluster`` based on a user-defined distribution function. Given the results of de Boer et al 2019 and the Harris Catalogue (1996, 2010 update) , it is also possible to initialize a ``StarCluster`` that represents a Galactic globular cluster.

Load
------------

The ``load_cluster`` function can be called via:

>>> cluster=load_cluster(ctype="snapshot",units="pckms",origin="cluster",ofile=None,orbit=None,filename='00000.dat',**kwargs)

Where I have an ascii file named ``00000.dat`` with columns of mass (Msun), position (x,y,z in pc) and velocity (vx,vy,vz in km/s) in clustercentric coordinates. In this example, no orbital information is provided for the cluster. If a file has been opened that contains orbital information, it can be passed via ``ofile`` and the next line is read as time , position (xgc,ygc,zgc), and velocity (vxgc,vygc,vzgc) in galactocentric units. If the units are not the same as ``cluster.units``, then ``ounits`` can also be given. Alternatively one can pass a ``galpy`` orbit via ``orbit``. See DOCUMENTATION for a list of the keywords that can also be passed via ``load_cluster``, including those related to setting up customized snapshot directories, files, and filenames. If neither ``ofile`` or ``orbit`` have been set and ``cluser.origin='galaxy'``, the ``find_centre`` operation will be called (See :ref:`Operations <operations>`) and the cluster's centre will be used to define its orbital coordinates. If ``cluser.origin='cluster'``, then ``find_centre`` will just set the cluster's centre.

As mentioned above, ``ctype`` can also be set to ``'nbody6'``, ``'nbody6se'``,``'gyrfalcon'``, or ``'amuse'``. For ``ctype!='snapshot'``, several important things happen behind the scenes. 

*When ``ctype='nbody6'``, OUT33, OUT9 are read into ``clustertools``, the ``cluster.units`` is set to ``nbody`` and ``cluster.origin`` is set to ``'cluster'``. If your simulations includes stellar evolution, fort.82 and fort.83 will also be read. All additional information provided, on top of stellar masses, positions, velocities, and ids are saved as individual variables that can be called. Hence it is possible to convert between units and coordinate systems.

* When ``ctype='gyrfalcon'``, the key word argument ``filename`` must also be given so ``clustertools`` knows what file to open and begin reading. The data is assumed to be in Walter Dehnen units (kpc, kpc/Gyr, Msun/222288.47). The first snapshot will read in and WDunits will be convereted to kpckms. The coordinate system will be set to ``'galaxy'``.

* When ``ctype='amuse'``, ''particles'' must be given which contains an AMUSE particle set of cluster stars. The default units are ``pckms`` but ``kpckms`` can also be selected. The default coordinate system is ``'galaxy'``, but again this can be set.

* When ``ctype='astropy_table'``, ''particles'' must be given which contains a `~astropy.table.Table` instance of stars.  If necessary, a ``column_mapper`` can be passed.

It should be noted that ``load_cluster`` has an input ``load_function``. This feature allows for a custom load function to be passed to ``load_cluster``. I have created a /custom directory to store custom load functions and easily import them. A sample file named ``custom_loaders.py``demonstrates two load_functions that I used to read in customized NBODY6 output files.


.. automodapi:: clustertools.analysis.load
        :no-inheritance-diagram:
        :no-main-docstr:
        :no-heading:
        :skip: advance_cluster

Advance
------------

In cases where a series of snapshot files represent the time evolution of a given cluster, or a single file contains all the entire evolution of a star cluster (as is the case for NBODY6 and GYRFALCON), an advance function has been created to very simply move to the next time step. It can be called via:

>> cluster=advance_cluster(cluster, ofile=None, orbit=None, filename=None, **kwargs):

Similar to ``load_cluster``, a file containing orbital information or a ``galpy`` orbit can be provided. ``filename`` only needs to provided if the filename of the next snapshot is not simply an incremental increase of an integer in the original file name. For example, given the working example where the initial snapshot was read from ``'00000.dat'``, advance will automatically look for ``'00001.dat'``. ``advance_cluster`` will return an empty ``StarCluster`` with ``cluster.ntot=0`` when no more snapshots can be found.

See the documentation or example notebooks for how more complex filenames can still be used by ``clustertools``.

The usefullness of ``advance_cluster`` function is perhaps best illustrated in the event that a user wishes to quickly determine the mass evolution of a simulated star cluster. Using ``clustertools`` and only a few lines of code, this can easily be achieved:

>>> import clustertools
>>> t=[]
>>> m=[]
>>> cluster=load_cluster(ctype="nbody6")
>>> while cluster.ntot>0:
>>>     t.append(cluster.tphys)
>>>     m.append(cluster.mtot)
>>>     cluster=advance_cluster(cluster)

Plotting mass as a function of time would then return:

.. image:: /images/mevolve.png


.. automodapi:: clustertools.analysis.load
        :no-inheritance-diagram:
        :no-main-docstr:
        :no-heading:
        :skip: load_cluster

Setup
------------

The ``setup_cluster`` function can be called via:

>>> setup_cluster(ctype, units="pckms", origin="cluster", orbit=None,pot=None, **kwargs)

Since setting up a star cluster is not associated with a given star cluster evolution code, ``ctype`` has a different range of options:

* ``'limepy'`` - for setting up a cluster using a Lowered Isothermal Model via ``limepy`` (REF). As per the ``limepy`` documentation, ``'g'`` and ``'phi0'``  need to passed to ``setup_cluster`` to create a realization in model units. Passing mass ``'M'`` in Msun along with one of ``'ro', 'rh', 'rv', 'rt'`` in pc will return a scaled cluster with units of pckms. If different units are required, 'G' must also be changed from its default of 0.004302 (km/s)^2 pc/Msun.

* ``'wooley','king','wilson'`` - for convenience one can select a Wooley, King, or Wilson model instead of passing the corresponding limepy value of ``'g'``. Also for convenience, the keyword ``'W0'`` can be passed to ``setup_cluster`` instead of ``'phi0'``.

* ``'galpy'`` - for setting up a cluster from a ``galpy`` potential. The keyword ``pot`` will also have to be passed and be set equal to a ``galpy`` potential. Stellar positions are then randomly drawn from the cluster's density profile and individual velocities are drawn from isotropic velocities distributions with dispersions equal to :math:`v_c/\sqrt(3)`, where :math:`v_c` is the local circular velocity.

* ``'gcname'`` - this features allows for a specific Galactic globular cluster to be initialized. For example to initialize a cluster that is representive of Pal 5, one would call ``cluster=setup_cluster('Pal5')``. If the named cluster has had its density profile fit by de Boer et al 2019 with a LIMEPY model, then those parameters will be used to initialize the cluster. It is important to note that de Boer et al. 2019 find that their SPES models fit observed clusters better than LIMEPY models, however a sampler for SPES models has not been implemented. If the cluster was not studied by de Boer et al. 2019, King model parameters from Harris et al 1996 (2010 update) will be used. Note that ``source`` can be set manually to ``Harris`` if Harris et al 1996 (2010 update) is preferred over de Boer et al. 2019. The cluster is also assigned orbital parameters using the ``Orbit.from_name()`` feature in ``galpy``.

.. automodapi:: clustertools.analysis.initialize
        :no-inheritance-diagram:
        :no-main-docstr:
        :no-heading:


