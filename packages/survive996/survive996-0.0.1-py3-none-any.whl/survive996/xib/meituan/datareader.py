#coding:utf-8
import pandas as pd


class MT:

    def __init__(self):
        self.METADATA = {}
        self.STRLIZED_COLS = {}
        self.KEYVALUE_META = {}

    def load_data(self, path, table_name, skiprows=1):
        return pd.read_csv(path, skiprows=skiprows,
                           encoding="utf-8", sep="\|\+\|", engine="python", header=None, names=self.METADATA[table_name])


class MTF(MT):

    def __init__(self):
        super(MT, self).__init__()
        self.METADATA = {
            "bank_loan_create": "借据ID,账户ID,借据编号,银行卡号,银行名称,放款业务流水号,借据类型,利率,利息周期,罚息率,罚息周期,贷款总本金,贷款期限,还款方式,还款间隔,总期数,贷款起息日,借款日,贷款到期日,借据状态,结清日期,借据余额,已计划本金,未计划本金,本金桶余额,利息桶余额,罚息桶余额,费用桶余额,应还本金,应还利息,应还罚息,应还费用,已还本金,已还利息,已还罚息,已还费用,逾期天数,逾期等级,版本,数据生成时间,数据更新时间,债权方比例,申请授信件编号,借款用途,放款渠道".split(","),
            "bank_period_create": "期数单ID,借据ID,期数单状态,计划项还款日,实际还款日,逾期等级,逾期天数,期数单余额,本金桶余额,利息桶余额,罚息桶余额,费用桶余额,应还本金,应还利息,应还罚息,应还费用,已还本金,已还利息,已还罚息,已还费用,数据生成时间,数据更新时间,版本".split(","),
            "bank_repay_loan": "业务流水号,借款编号,借款ID,还款银行卡号,还款银行卡银行名称,还款业务流水号,还款类型,还款日期,总金额（单位分）,本次实还本金金额（单位分）,本次实还利息金额（单位分）,本次实还逾期本金罚息金额（单位分）,本次实还费用金额（单位分）,交易发生时间,入账状态".split(","),
            "bank_repay_period": "业务流水号,借款编号,借款ID,期数单ID,还款类型,还款日期,总金额（单位分）,本次实还本金金额（单位分）,本次实还利息金额（单位分）,本次实还逾期本金罚息金额（单位分）,本次实还费用金额（单位分）,交易发生时间".split(","),
            "bank_loan_init": "借据ID,账户ID,借据编号,借据类型,利率,利息周期,罚息率,罚息周期,贷款总本金,贷款期限,还款方式,还款间隔,总期数,贷款起息日,借款日,贷款到期日,借据状态,结清日期,借据余额,已计划本金,未计划本金,本金桶余额,利息桶余额,罚息桶余额,费用桶余额,应还本金,应还利息,应还罚息,应还费用,已还本金,已还利息,已还罚息,已还费用,逾期等级,逾期天数,版本,数据生成时间,数据更新时间,债权方比例,正常本金余额,逾期本金余额,正常利息余额,逾期利息余额,逾期本金罚息余额,停息停费状态,核销标识".split(","),
            "bank_instmnt_init": "期数单ID,借据ID,期数单状态,计划项还款日,实际还款日,逾期等级,逾期天数,期数单余额,本金桶余额,利息桶余额,罚息桶余额,费用桶余额,应还本金,应还利息,应还罚息,应还费用,已还本金,已还利息,已还罚息,已还费用,数据生成时间,数据更新时间,版本".split(",")
        }


class TLF(MTF):

    def __init__(self):
        super(TLF, self).__init__()
        self.METADATA["bank_period_create"] = "期数单ID,借据ID,借据编号,期数单状态,计划项还款日,实际还款日,逾期等级,逾期天数,期数单余额,本金桶余额,利息桶余额,罚息桶余额,费用桶余额,应还本金,应还利息,应还罚息,应还费用,已还本金,已还利息,已还罚息,已还费用,数据生成时间,数据更新时间,版本".split(",")
        self.METADATA["bank_instmnt_init"] = "期数单ID,借据ID,借据编号,期数单状态,计划项还款日,实际还款日,逾期等级,逾期天数,期数单余额,本金桶余额,利息桶余额,罚息桶余额,费用桶余额,应还本金,应还利息,应还罚息,应还费用,已还本金,已还利息,已还罚息,已还费用,数据生成时间,数据更新时间,版本".split(",")
        self.METADATA["subject_detail"] = "entry_id,fiscal_date,account_no,account_name,loan_id,debit_no,subject_code,subject_name,direct,amount,balance_direct,balance,tran_jrnl_id,remark,id,trade_type".split(
            ",")

    def load_data(self, path, table_name):
        return super(TLF, self).load_data(path, table_name, skiprows=0)


class MTM(MT):

    def __init__(self):
        self.METADATA = {
            "bank_loan_init": "借据号,客户号,借据类型,借据状态,核销状态,贷款起息日,贷款到期日,结清日期,贷款期限,贷款总本金,正常本金余额,逾期本金余额,正常利息余额,逾期利息余额,逾期罚息余额,逾期等级,逾期天数".split(","),
            "bank_instmnt_init": "借据号,期数单编号,借据状态,计划项账单日,计划项还款日,结清日期,应收本金,应收利息,应收罚息,已还本金,已还利息,已还罚息,本金余额,利息余额,罚息余额,逾期等级,逾期天数".split(","),
            "bank_loan_create": "客户号,借据号,交易流水号,放款金额,借据类型,贷款用途,内部结转标识,分期手续费率,罚息率,还款方式,贷款期限,放款入账时间,贷款到期日,授信编号,出资比例".split(","),
            "bank_period_create": "客户号,借据号,期数单编号,分期开始日期,计划项账单日,计划项还款日,应还本金,应还利息,应还罚息".split(","),
            "bank_repay_period": "客户号,借据号,交易流水号,期数单号,还款类型,还款日期,总金额（单位分）,本次实还正常本金（单位分）,本次实还正常利息金额（单位分）,本次实还逾期罚息金额（单位分）,本次实还逾期本金（单位分）".split(","),
            "bank_loan_calc": "借据号,正常利息（单位分）,逾期本金罚息（单位分）,交易发生时间,入账状态".split(","),
            "bank_repay_change": "借据号,变动类型,日期,本金发生额,利息发生额,罚息发生额".split(","),
            "bank_repay_loan": "客户号,借据号,交易流水号,还款银行卡号,还款银行卡银行名称,还款类型,还款日期,总金额（单位分）,本次实还正常本金（单位分）,本次实还正常利息金额（单位分）,本次实还逾期罚息金额（单位分）,本次实还逾期本金（单位分）,交易发生时间,内部结转标识,入账状态".split(","),
            "bank_accounting": "放款总本金,还款本金-正常,还款利息-正常,还款本金-逾期,还款利息-逾期,还款罚息-逾期,还款已核销本金,还款已核销利息,还款已核销罚息,结计本金-正常,结计利息-正常,结计罚息-正常,结计本金-M4以上,结计利息-M4以上,结计罚息-M4以上,本金应计转非应计,利息应计转非应计,罚息应计转非应计,本金非应计转应计,利息本金非应计转应计,罚息本金非应计转应计,减免利息-正常,减免利息-逾期,减免罚息-正常,正常本金转逾期本金,正常利息转逾期利息,核销本金,核销利息,核销罚息".split(","),
            "fund_fee": "借据号,本金余额,贴息费率,贴息发生额".split(",")
        }
        self.STRLIZED_COLS = "借据号,客户号,交易流水号,期数单编号,还款银行卡号,授信编号,借据ID".split(",")
        self.KEYVALUE_META = {"借据类型": {8: "普通消费", 1: "账单延期", 2: "账单分期", 7: "订单分期", 5: "备用金取现"}, "还款方式": {
            1: "等额本息", 2: "等本等息", 3: "信用付到期还本", 4: "到期一次性还本付息（取现）", 6: "先付息到期一次性还本（延付）"}, "还款类型": {1: "主动还款", 2: "退款还款", 3: "转循环"}}


if __name__ == "__main__":
    # print(MTF.__dict__)
    print(TLF().METADATA["bank_loan_create"])
    print(TLF().METADATA["bank_period_create"])
    # df = TLF().load_data("E:\\Documents\\Scripts\\20201023_美团等本等息\\acc_2035-05-01\\2035-09-01\\bank_instmnt_init_20350901", "bank_instmnt_init")
    # print(df)
    # df = MTM().load_data("E:\\Documents\\Scripts\\20201012_MTYF_账务文件\\balance.MTYF\\20270101\\bank_loan_create_20270101_1", "bank_loan_create")
    # print(df.iloc[0])
    # print(MTF.METADATA["bank_repay_loan"])
    # print(TLF.METADATA["bank_repay_loan"])


# # bank_repay_loan
# 业务流水号
# 借款编号
# 借款ID
# 还款银行卡号
# 还款银行卡银行名称
# 还款业务流水号
# 还款类型：1-提前还款，2-批量还款，3-期数单还款，4-手工结清借据，5-手工结清期数单，6-部分还款，7-手工部分还款,8-逾期代扣，9.提前按期结清
# 还款日期
# 总金额（单位分）
# 本次实还本金金额（单位分）
# 本次实还利息金额（单位分）
# 本次实还逾期本金罚息金额（单位分）
# 本次实还费用金额（单位分）
# 交易发生时间
# 入账状态，应计0，非应计1，核销2

# #bank repay_period
# 业务流水号
# 借款编号
# 借款ID
# 期数单ID
# 还款类型：1-提前还款，2-批量还款，3-期数单还款，4-手工结清借据，5-手工结清期数单，6-部分还款，7-手工部分还款,8-逾期代扣 9.提前按期结清
# 还款日期
# 总金额（单位分）
# 本次实还本金金额（单位分）
# 本次实还利息金额（单位分）
# 本次实还逾期本金罚息金额（单位分）
# 本次实还费用金额（单位分）
# 交易发生时间
