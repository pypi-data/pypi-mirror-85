# coding: utf-8

"""
    API v1

    DocSpring is a service that helps you fill out and sign PDF templates.  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HtmlTemplateData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'expiration_interval': 'str',
        'webhook_url': 'str',
        'scss': 'str',
        'allow_additional_properties': 'bool',
        'expire_after': 'float',
        'description': 'str',
        'public_submissions': 'bool',
        'slack_webhook_url': 'str',
        'header_html': 'str',
        'public_web_form': 'bool',
        'editable_submissions': 'bool',
        'expire_submissions': 'bool',
        'name': 'str',
        'footer_html': 'str',
        'html': 'str',
        'template_type': 'str',
        'redirect_url': 'str'
    }

    attribute_map = {
        'expiration_interval': 'expiration_interval',
        'webhook_url': 'webhook_url',
        'scss': 'scss',
        'allow_additional_properties': 'allow_additional_properties',
        'expire_after': 'expire_after',
        'description': 'description',
        'public_submissions': 'public_submissions',
        'slack_webhook_url': 'slack_webhook_url',
        'header_html': 'header_html',
        'public_web_form': 'public_web_form',
        'editable_submissions': 'editable_submissions',
        'expire_submissions': 'expire_submissions',
        'name': 'name',
        'footer_html': 'footer_html',
        'html': 'html',
        'template_type': 'template_type',
        'redirect_url': 'redirect_url'
    }

    def __init__(self, expiration_interval=None, webhook_url=None, scss=None, allow_additional_properties=None, expire_after=None, description=None, public_submissions=None, slack_webhook_url=None, header_html=None, public_web_form=None, editable_submissions=None, expire_submissions=None, name=None, footer_html=None, html=None, template_type=None, redirect_url=None):  # noqa: E501
        """HtmlTemplateData - a model defined in OpenAPI"""  # noqa: E501

        self._expiration_interval = None
        self._webhook_url = None
        self._scss = None
        self._allow_additional_properties = None
        self._expire_after = None
        self._description = None
        self._public_submissions = None
        self._slack_webhook_url = None
        self._header_html = None
        self._public_web_form = None
        self._editable_submissions = None
        self._expire_submissions = None
        self._name = None
        self._footer_html = None
        self._html = None
        self._template_type = None
        self._redirect_url = None
        self.discriminator = None

        if expiration_interval is not None:
            self.expiration_interval = expiration_interval
        self.webhook_url = webhook_url
        self.scss = scss
        if allow_additional_properties is not None:
            self.allow_additional_properties = allow_additional_properties
        if expire_after is not None:
            self.expire_after = expire_after
        self.description = description
        if public_submissions is not None:
            self.public_submissions = public_submissions
        self.slack_webhook_url = slack_webhook_url
        self.header_html = header_html
        if public_web_form is not None:
            self.public_web_form = public_web_form
        if editable_submissions is not None:
            self.editable_submissions = editable_submissions
        if expire_submissions is not None:
            self.expire_submissions = expire_submissions
        self.name = name
        self.footer_html = footer_html
        self.html = html
        if template_type is not None:
            self.template_type = template_type
        self.redirect_url = redirect_url

    @property
    def expiration_interval(self):
        """Gets the expiration_interval of this HtmlTemplateData.  # noqa: E501


        :return: The expiration_interval of this HtmlTemplateData.  # noqa: E501
        :rtype: str
        """
        return self._expiration_interval

    @expiration_interval.setter
    def expiration_interval(self, expiration_interval):
        """Sets the expiration_interval of this HtmlTemplateData.


        :param expiration_interval: The expiration_interval of this HtmlTemplateData.  # noqa: E501
        :type: str
        """
        allowed_values = ["minutes", "hours", "days"]  # noqa: E501
        if expiration_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `expiration_interval` ({0}), must be one of {1}"  # noqa: E501
                .format(expiration_interval, allowed_values)
            )

        self._expiration_interval = expiration_interval

    @property
    def webhook_url(self):
        """Gets the webhook_url of this HtmlTemplateData.  # noqa: E501


        :return: The webhook_url of this HtmlTemplateData.  # noqa: E501
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this HtmlTemplateData.


        :param webhook_url: The webhook_url of this HtmlTemplateData.  # noqa: E501
        :type: str
        """

        self._webhook_url = webhook_url

    @property
    def scss(self):
        """Gets the scss of this HtmlTemplateData.  # noqa: E501


        :return: The scss of this HtmlTemplateData.  # noqa: E501
        :rtype: str
        """
        return self._scss

    @scss.setter
    def scss(self, scss):
        """Sets the scss of this HtmlTemplateData.


        :param scss: The scss of this HtmlTemplateData.  # noqa: E501
        :type: str
        """

        self._scss = scss

    @property
    def allow_additional_properties(self):
        """Gets the allow_additional_properties of this HtmlTemplateData.  # noqa: E501


        :return: The allow_additional_properties of this HtmlTemplateData.  # noqa: E501
        :rtype: bool
        """
        return self._allow_additional_properties

    @allow_additional_properties.setter
    def allow_additional_properties(self, allow_additional_properties):
        """Sets the allow_additional_properties of this HtmlTemplateData.


        :param allow_additional_properties: The allow_additional_properties of this HtmlTemplateData.  # noqa: E501
        :type: bool
        """

        self._allow_additional_properties = allow_additional_properties

    @property
    def expire_after(self):
        """Gets the expire_after of this HtmlTemplateData.  # noqa: E501


        :return: The expire_after of this HtmlTemplateData.  # noqa: E501
        :rtype: float
        """
        return self._expire_after

    @expire_after.setter
    def expire_after(self, expire_after):
        """Sets the expire_after of this HtmlTemplateData.


        :param expire_after: The expire_after of this HtmlTemplateData.  # noqa: E501
        :type: float
        """

        self._expire_after = expire_after

    @property
    def description(self):
        """Gets the description of this HtmlTemplateData.  # noqa: E501


        :return: The description of this HtmlTemplateData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HtmlTemplateData.


        :param description: The description of this HtmlTemplateData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def public_submissions(self):
        """Gets the public_submissions of this HtmlTemplateData.  # noqa: E501


        :return: The public_submissions of this HtmlTemplateData.  # noqa: E501
        :rtype: bool
        """
        return self._public_submissions

    @public_submissions.setter
    def public_submissions(self, public_submissions):
        """Sets the public_submissions of this HtmlTemplateData.


        :param public_submissions: The public_submissions of this HtmlTemplateData.  # noqa: E501
        :type: bool
        """

        self._public_submissions = public_submissions

    @property
    def slack_webhook_url(self):
        """Gets the slack_webhook_url of this HtmlTemplateData.  # noqa: E501


        :return: The slack_webhook_url of this HtmlTemplateData.  # noqa: E501
        :rtype: str
        """
        return self._slack_webhook_url

    @slack_webhook_url.setter
    def slack_webhook_url(self, slack_webhook_url):
        """Sets the slack_webhook_url of this HtmlTemplateData.


        :param slack_webhook_url: The slack_webhook_url of this HtmlTemplateData.  # noqa: E501
        :type: str
        """

        self._slack_webhook_url = slack_webhook_url

    @property
    def header_html(self):
        """Gets the header_html of this HtmlTemplateData.  # noqa: E501


        :return: The header_html of this HtmlTemplateData.  # noqa: E501
        :rtype: str
        """
        return self._header_html

    @header_html.setter
    def header_html(self, header_html):
        """Sets the header_html of this HtmlTemplateData.


        :param header_html: The header_html of this HtmlTemplateData.  # noqa: E501
        :type: str
        """

        self._header_html = header_html

    @property
    def public_web_form(self):
        """Gets the public_web_form of this HtmlTemplateData.  # noqa: E501


        :return: The public_web_form of this HtmlTemplateData.  # noqa: E501
        :rtype: bool
        """
        return self._public_web_form

    @public_web_form.setter
    def public_web_form(self, public_web_form):
        """Sets the public_web_form of this HtmlTemplateData.


        :param public_web_form: The public_web_form of this HtmlTemplateData.  # noqa: E501
        :type: bool
        """

        self._public_web_form = public_web_form

    @property
    def editable_submissions(self):
        """Gets the editable_submissions of this HtmlTemplateData.  # noqa: E501


        :return: The editable_submissions of this HtmlTemplateData.  # noqa: E501
        :rtype: bool
        """
        return self._editable_submissions

    @editable_submissions.setter
    def editable_submissions(self, editable_submissions):
        """Sets the editable_submissions of this HtmlTemplateData.


        :param editable_submissions: The editable_submissions of this HtmlTemplateData.  # noqa: E501
        :type: bool
        """

        self._editable_submissions = editable_submissions

    @property
    def expire_submissions(self):
        """Gets the expire_submissions of this HtmlTemplateData.  # noqa: E501


        :return: The expire_submissions of this HtmlTemplateData.  # noqa: E501
        :rtype: bool
        """
        return self._expire_submissions

    @expire_submissions.setter
    def expire_submissions(self, expire_submissions):
        """Sets the expire_submissions of this HtmlTemplateData.


        :param expire_submissions: The expire_submissions of this HtmlTemplateData.  # noqa: E501
        :type: bool
        """

        self._expire_submissions = expire_submissions

    @property
    def name(self):
        """Gets the name of this HtmlTemplateData.  # noqa: E501


        :return: The name of this HtmlTemplateData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HtmlTemplateData.


        :param name: The name of this HtmlTemplateData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def footer_html(self):
        """Gets the footer_html of this HtmlTemplateData.  # noqa: E501


        :return: The footer_html of this HtmlTemplateData.  # noqa: E501
        :rtype: str
        """
        return self._footer_html

    @footer_html.setter
    def footer_html(self, footer_html):
        """Sets the footer_html of this HtmlTemplateData.


        :param footer_html: The footer_html of this HtmlTemplateData.  # noqa: E501
        :type: str
        """

        self._footer_html = footer_html

    @property
    def html(self):
        """Gets the html of this HtmlTemplateData.  # noqa: E501


        :return: The html of this HtmlTemplateData.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this HtmlTemplateData.


        :param html: The html of this HtmlTemplateData.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def template_type(self):
        """Gets the template_type of this HtmlTemplateData.  # noqa: E501


        :return: The template_type of this HtmlTemplateData.  # noqa: E501
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this HtmlTemplateData.


        :param template_type: The template_type of this HtmlTemplateData.  # noqa: E501
        :type: str
        """
        allowed_values = ["pdf", "html"]  # noqa: E501
        if template_type not in allowed_values:
            raise ValueError(
                "Invalid value for `template_type` ({0}), must be one of {1}"  # noqa: E501
                .format(template_type, allowed_values)
            )

        self._template_type = template_type

    @property
    def redirect_url(self):
        """Gets the redirect_url of this HtmlTemplateData.  # noqa: E501


        :return: The redirect_url of this HtmlTemplateData.  # noqa: E501
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this HtmlTemplateData.


        :param redirect_url: The redirect_url of this HtmlTemplateData.  # noqa: E501
        :type: str
        """

        self._redirect_url = redirect_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HtmlTemplateData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
