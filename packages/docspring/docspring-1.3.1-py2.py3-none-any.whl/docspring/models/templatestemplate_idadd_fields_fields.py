# coding: utf-8

"""
    API v1

    DocSpring is a service that helps you fill out and sign PDF templates.  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TemplatestemplateIdaddFieldsFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'background_color_field_name': 'str',
        'uppercase': 'bool',
        'metadata': 'str',
        'barcode_symbology': 'str',
        'min_length': 'float',
        'integer': 'bool',
        'type': 'str',
        'required': 'bool',
        'comb_value_offset': 'float',
        'image_gravity': 'str',
        'overflow': 'str',
        'qrcode_color': 'str',
        'color_field_required': 'bool',
        'background_color_field_required': 'bool',
        'id': 'float',
        'image_scale_type': 'str',
        'exclusive_minimum': 'bool',
        'height': 'float',
        'number_condition_range_exclusive_max': 'bool',
        'invert_boolean_condition': 'bool',
        'shape_fill_color_field_name': 'str',
        'static': 'bool',
        'shape_border_color_field_name': 'str',
        'v_alignment': 'str',
        'bold': 'bool',
        'shape_border_width': 'float',
        'comb_number_of_cells': 'float',
        'shape_border_color': 'str',
        'comb': 'bool',
        'typeface': 'str',
        'shape_type': 'str',
        'condition': 'str',
        'display_type': 'str',
        'check_color': 'str',
        'multiline_lines': 'float',
        'multiline': 'bool',
        'true_text': 'str',
        'name': 'str',
        'font_size': 'float',
        'page': 'float',
        'alignment': 'str',
        'max_length': 'float',
        'auto_calculate_max_length': 'bool',
        'color_field_name': 'str',
        'qrcode_color_field_name': 'str',
        'number_condition_range_min': 'float',
        'color': 'str',
        'hidden': 'bool',
        'check_color_field_required': 'bool',
        'combined_field_format': 'str',
        'description': 'str',
        'shape_border_color_field_required': 'bool',
        'combined_field_names': 'str',
        'title': 'str',
        'number_condition_range_exclusive_min': 'bool',
        'combined_field_separator': 'str',
        'exclusive_maximum': 'bool',
        'default': 'str',
        'combined_field_type': 'str',
        'date_time_format': 'str',
        'qrcode_color_field_required': 'bool',
        'currency': 'bool',
        'false_text': 'str',
        'strikethrough': 'bool',
        'character_spacing': 'float',
        'number_condition_range_max': 'float',
        'background_color': 'str',
        'check_color_field_name': 'str',
        'check_character': 'str',
        'rotation': 'float',
        'option_list': 'str',
        'shape_fill_color': 'str',
        'string_condition_type': 'str',
        'shape_fill_color_field_required': 'bool',
        'decimal_places': 'float',
        'include_time': 'bool',
        'width': 'float',
        'x': 'float',
        'maximum': 'float',
        'y': 'float',
        'signature_allow_draw': 'bool',
        'number_condition_type': 'str',
        'opacity': 'float',
        'minimum': 'float',
        'signature_allow_type': 'bool'
    }

    attribute_map = {
        'background_color_field_name': 'backgroundColorFieldName',
        'uppercase': 'uppercase',
        'metadata': 'metadata',
        'barcode_symbology': 'barcodeSymbology',
        'min_length': 'minLength',
        'integer': 'integer',
        'type': 'type',
        'required': 'required',
        'comb_value_offset': 'combValueOffset',
        'image_gravity': 'imageGravity',
        'overflow': 'overflow',
        'qrcode_color': 'qrcodeColor',
        'color_field_required': 'colorFieldRequired',
        'background_color_field_required': 'backgroundColorFieldRequired',
        'id': 'id',
        'image_scale_type': 'imageScaleType',
        'exclusive_minimum': 'exclusiveMinimum',
        'height': 'height',
        'number_condition_range_exclusive_max': 'numberConditionRangeExclusiveMax',
        'invert_boolean_condition': 'invertBooleanCondition',
        'shape_fill_color_field_name': 'shapeFillColorFieldName',
        'static': 'static',
        'shape_border_color_field_name': 'shapeBorderColorFieldName',
        'v_alignment': 'vAlignment',
        'bold': 'bold',
        'shape_border_width': 'shapeBorderWidth',
        'comb_number_of_cells': 'combNumberOfCells',
        'shape_border_color': 'shapeBorderColor',
        'comb': 'comb',
        'typeface': 'typeface',
        'shape_type': 'shapeType',
        'condition': 'condition',
        'display_type': 'displayType',
        'check_color': 'checkColor',
        'multiline_lines': 'multilineLines',
        'multiline': 'multiline',
        'true_text': 'trueText',
        'name': 'name',
        'font_size': 'fontSize',
        'page': 'page',
        'alignment': 'alignment',
        'max_length': 'maxLength',
        'auto_calculate_max_length': 'autoCalculateMaxLength',
        'color_field_name': 'colorFieldName',
        'qrcode_color_field_name': 'qrcodeColorFieldName',
        'number_condition_range_min': 'numberConditionRangeMin',
        'color': 'color',
        'hidden': 'hidden',
        'check_color_field_required': 'checkColorFieldRequired',
        'combined_field_format': 'combinedFieldFormat',
        'description': 'description',
        'shape_border_color_field_required': 'shapeBorderColorFieldRequired',
        'combined_field_names': 'combinedFieldNames',
        'title': 'title',
        'number_condition_range_exclusive_min': 'numberConditionRangeExclusiveMin',
        'combined_field_separator': 'combinedFieldSeparator',
        'exclusive_maximum': 'exclusiveMaximum',
        'default': 'default',
        'combined_field_type': 'combinedFieldType',
        'date_time_format': 'dateTimeFormat',
        'qrcode_color_field_required': 'qrcodeColorFieldRequired',
        'currency': 'currency',
        'false_text': 'falseText',
        'strikethrough': 'strikethrough',
        'character_spacing': 'characterSpacing',
        'number_condition_range_max': 'numberConditionRangeMax',
        'background_color': 'backgroundColor',
        'check_color_field_name': 'checkColorFieldName',
        'check_character': 'checkCharacter',
        'rotation': 'rotation',
        'option_list': 'optionList',
        'shape_fill_color': 'shapeFillColor',
        'string_condition_type': 'stringConditionType',
        'shape_fill_color_field_required': 'shapeFillColorFieldRequired',
        'decimal_places': 'decimalPlaces',
        'include_time': 'includeTime',
        'width': 'width',
        'x': 'x',
        'maximum': 'maximum',
        'y': 'y',
        'signature_allow_draw': 'signatureAllowDraw',
        'number_condition_type': 'numberConditionType',
        'opacity': 'opacity',
        'minimum': 'minimum',
        'signature_allow_type': 'signatureAllowType'
    }

    def __init__(self, background_color_field_name=None, uppercase=None, metadata=None, barcode_symbology=None, min_length=None, integer=None, type=None, required=None, comb_value_offset=None, image_gravity=None, overflow=None, qrcode_color=None, color_field_required=None, background_color_field_required=None, id=None, image_scale_type=None, exclusive_minimum=None, height=None, number_condition_range_exclusive_max=None, invert_boolean_condition=None, shape_fill_color_field_name=None, static=None, shape_border_color_field_name=None, v_alignment=None, bold=None, shape_border_width=None, comb_number_of_cells=None, shape_border_color=None, comb=None, typeface=None, shape_type=None, condition=None, display_type=None, check_color=None, multiline_lines=None, multiline=None, true_text=None, name=None, font_size=None, page=None, alignment=None, max_length=None, auto_calculate_max_length=None, color_field_name=None, qrcode_color_field_name=None, number_condition_range_min=None, color=None, hidden=None, check_color_field_required=None, combined_field_format=None, description=None, shape_border_color_field_required=None, combined_field_names=None, title=None, number_condition_range_exclusive_min=None, combined_field_separator=None, exclusive_maximum=None, default=None, combined_field_type=None, date_time_format=None, qrcode_color_field_required=None, currency=None, false_text=None, strikethrough=None, character_spacing=None, number_condition_range_max=None, background_color=None, check_color_field_name=None, check_character=None, rotation=None, option_list=None, shape_fill_color=None, string_condition_type=None, shape_fill_color_field_required=None, decimal_places=None, include_time=None, width=None, x=None, maximum=None, y=None, signature_allow_draw=None, number_condition_type=None, opacity=None, minimum=None, signature_allow_type=None):  # noqa: E501
        """TemplatestemplateIdaddFieldsFields - a model defined in OpenAPI"""  # noqa: E501

        self._background_color_field_name = None
        self._uppercase = None
        self._metadata = None
        self._barcode_symbology = None
        self._min_length = None
        self._integer = None
        self._type = None
        self._required = None
        self._comb_value_offset = None
        self._image_gravity = None
        self._overflow = None
        self._qrcode_color = None
        self._color_field_required = None
        self._background_color_field_required = None
        self._id = None
        self._image_scale_type = None
        self._exclusive_minimum = None
        self._height = None
        self._number_condition_range_exclusive_max = None
        self._invert_boolean_condition = None
        self._shape_fill_color_field_name = None
        self._static = None
        self._shape_border_color_field_name = None
        self._v_alignment = None
        self._bold = None
        self._shape_border_width = None
        self._comb_number_of_cells = None
        self._shape_border_color = None
        self._comb = None
        self._typeface = None
        self._shape_type = None
        self._condition = None
        self._display_type = None
        self._check_color = None
        self._multiline_lines = None
        self._multiline = None
        self._true_text = None
        self._name = None
        self._font_size = None
        self._page = None
        self._alignment = None
        self._max_length = None
        self._auto_calculate_max_length = None
        self._color_field_name = None
        self._qrcode_color_field_name = None
        self._number_condition_range_min = None
        self._color = None
        self._hidden = None
        self._check_color_field_required = None
        self._combined_field_format = None
        self._description = None
        self._shape_border_color_field_required = None
        self._combined_field_names = None
        self._title = None
        self._number_condition_range_exclusive_min = None
        self._combined_field_separator = None
        self._exclusive_maximum = None
        self._default = None
        self._combined_field_type = None
        self._date_time_format = None
        self._qrcode_color_field_required = None
        self._currency = None
        self._false_text = None
        self._strikethrough = None
        self._character_spacing = None
        self._number_condition_range_max = None
        self._background_color = None
        self._check_color_field_name = None
        self._check_character = None
        self._rotation = None
        self._option_list = None
        self._shape_fill_color = None
        self._string_condition_type = None
        self._shape_fill_color_field_required = None
        self._decimal_places = None
        self._include_time = None
        self._width = None
        self._x = None
        self._maximum = None
        self._y = None
        self._signature_allow_draw = None
        self._number_condition_type = None
        self._opacity = None
        self._minimum = None
        self._signature_allow_type = None
        self.discriminator = None

        if background_color_field_name is not None:
            self.background_color_field_name = background_color_field_name
        if uppercase is not None:
            self.uppercase = uppercase
        if metadata is not None:
            self.metadata = metadata
        if barcode_symbology is not None:
            self.barcode_symbology = barcode_symbology
        if min_length is not None:
            self.min_length = min_length
        if integer is not None:
            self.integer = integer
        if type is not None:
            self.type = type
        if required is not None:
            self.required = required
        if comb_value_offset is not None:
            self.comb_value_offset = comb_value_offset
        if image_gravity is not None:
            self.image_gravity = image_gravity
        if overflow is not None:
            self.overflow = overflow
        if qrcode_color is not None:
            self.qrcode_color = qrcode_color
        if color_field_required is not None:
            self.color_field_required = color_field_required
        if background_color_field_required is not None:
            self.background_color_field_required = background_color_field_required
        if id is not None:
            self.id = id
        if image_scale_type is not None:
            self.image_scale_type = image_scale_type
        if exclusive_minimum is not None:
            self.exclusive_minimum = exclusive_minimum
        if height is not None:
            self.height = height
        if number_condition_range_exclusive_max is not None:
            self.number_condition_range_exclusive_max = number_condition_range_exclusive_max
        if invert_boolean_condition is not None:
            self.invert_boolean_condition = invert_boolean_condition
        if shape_fill_color_field_name is not None:
            self.shape_fill_color_field_name = shape_fill_color_field_name
        if static is not None:
            self.static = static
        if shape_border_color_field_name is not None:
            self.shape_border_color_field_name = shape_border_color_field_name
        if v_alignment is not None:
            self.v_alignment = v_alignment
        if bold is not None:
            self.bold = bold
        if shape_border_width is not None:
            self.shape_border_width = shape_border_width
        if comb_number_of_cells is not None:
            self.comb_number_of_cells = comb_number_of_cells
        if shape_border_color is not None:
            self.shape_border_color = shape_border_color
        if comb is not None:
            self.comb = comb
        if typeface is not None:
            self.typeface = typeface
        if shape_type is not None:
            self.shape_type = shape_type
        if condition is not None:
            self.condition = condition
        if display_type is not None:
            self.display_type = display_type
        if check_color is not None:
            self.check_color = check_color
        if multiline_lines is not None:
            self.multiline_lines = multiline_lines
        if multiline is not None:
            self.multiline = multiline
        if true_text is not None:
            self.true_text = true_text
        if name is not None:
            self.name = name
        if font_size is not None:
            self.font_size = font_size
        if page is not None:
            self.page = page
        if alignment is not None:
            self.alignment = alignment
        if max_length is not None:
            self.max_length = max_length
        if auto_calculate_max_length is not None:
            self.auto_calculate_max_length = auto_calculate_max_length
        if color_field_name is not None:
            self.color_field_name = color_field_name
        if qrcode_color_field_name is not None:
            self.qrcode_color_field_name = qrcode_color_field_name
        if number_condition_range_min is not None:
            self.number_condition_range_min = number_condition_range_min
        if color is not None:
            self.color = color
        if hidden is not None:
            self.hidden = hidden
        if check_color_field_required is not None:
            self.check_color_field_required = check_color_field_required
        if combined_field_format is not None:
            self.combined_field_format = combined_field_format
        if description is not None:
            self.description = description
        if shape_border_color_field_required is not None:
            self.shape_border_color_field_required = shape_border_color_field_required
        if combined_field_names is not None:
            self.combined_field_names = combined_field_names
        if title is not None:
            self.title = title
        if number_condition_range_exclusive_min is not None:
            self.number_condition_range_exclusive_min = number_condition_range_exclusive_min
        if combined_field_separator is not None:
            self.combined_field_separator = combined_field_separator
        if exclusive_maximum is not None:
            self.exclusive_maximum = exclusive_maximum
        if default is not None:
            self.default = default
        if combined_field_type is not None:
            self.combined_field_type = combined_field_type
        if date_time_format is not None:
            self.date_time_format = date_time_format
        if qrcode_color_field_required is not None:
            self.qrcode_color_field_required = qrcode_color_field_required
        if currency is not None:
            self.currency = currency
        if false_text is not None:
            self.false_text = false_text
        if strikethrough is not None:
            self.strikethrough = strikethrough
        if character_spacing is not None:
            self.character_spacing = character_spacing
        if number_condition_range_max is not None:
            self.number_condition_range_max = number_condition_range_max
        if background_color is not None:
            self.background_color = background_color
        if check_color_field_name is not None:
            self.check_color_field_name = check_color_field_name
        if check_character is not None:
            self.check_character = check_character
        if rotation is not None:
            self.rotation = rotation
        if option_list is not None:
            self.option_list = option_list
        if shape_fill_color is not None:
            self.shape_fill_color = shape_fill_color
        if string_condition_type is not None:
            self.string_condition_type = string_condition_type
        if shape_fill_color_field_required is not None:
            self.shape_fill_color_field_required = shape_fill_color_field_required
        if decimal_places is not None:
            self.decimal_places = decimal_places
        if include_time is not None:
            self.include_time = include_time
        if width is not None:
            self.width = width
        if x is not None:
            self.x = x
        if maximum is not None:
            self.maximum = maximum
        if y is not None:
            self.y = y
        if signature_allow_draw is not None:
            self.signature_allow_draw = signature_allow_draw
        if number_condition_type is not None:
            self.number_condition_type = number_condition_type
        if opacity is not None:
            self.opacity = opacity
        if minimum is not None:
            self.minimum = minimum
        if signature_allow_type is not None:
            self.signature_allow_type = signature_allow_type

    @property
    def background_color_field_name(self):
        """Gets the background_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The background_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._background_color_field_name

    @background_color_field_name.setter
    def background_color_field_name(self, background_color_field_name):
        """Sets the background_color_field_name of this TemplatestemplateIdaddFieldsFields.


        :param background_color_field_name: The background_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._background_color_field_name = background_color_field_name

    @property
    def uppercase(self):
        """Gets the uppercase of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The uppercase of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._uppercase

    @uppercase.setter
    def uppercase(self, uppercase):
        """Sets the uppercase of this TemplatestemplateIdaddFieldsFields.


        :param uppercase: The uppercase of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._uppercase = uppercase

    @property
    def metadata(self):
        """Gets the metadata of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The metadata of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TemplatestemplateIdaddFieldsFields.


        :param metadata: The metadata of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def barcode_symbology(self):
        """Gets the barcode_symbology of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The barcode_symbology of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._barcode_symbology

    @barcode_symbology.setter
    def barcode_symbology(self, barcode_symbology):
        """Sets the barcode_symbology of this TemplatestemplateIdaddFieldsFields.


        :param barcode_symbology: The barcode_symbology of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._barcode_symbology = barcode_symbology

    @property
    def min_length(self):
        """Gets the min_length of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The min_length of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this TemplatestemplateIdaddFieldsFields.


        :param min_length: The min_length of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """

        self._min_length = min_length

    @property
    def integer(self):
        """Gets the integer of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The integer of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._integer

    @integer.setter
    def integer(self, integer):
        """Sets the integer of this TemplatestemplateIdaddFieldsFields.


        :param integer: The integer of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._integer = integer

    @property
    def type(self):
        """Gets the type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TemplatestemplateIdaddFieldsFields.


        :param type: The type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["string", "number", "boolean", "date", "address", "country", "email", "url", "image", "signature", "barcode", "combined"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def required(self):
        """Gets the required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this TemplatestemplateIdaddFieldsFields.


        :param required: The required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def comb_value_offset(self):
        """Gets the comb_value_offset of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The comb_value_offset of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._comb_value_offset

    @comb_value_offset.setter
    def comb_value_offset(self, comb_value_offset):
        """Sets the comb_value_offset of this TemplatestemplateIdaddFieldsFields.


        :param comb_value_offset: The comb_value_offset of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """

        self._comb_value_offset = comb_value_offset

    @property
    def image_gravity(self):
        """Gets the image_gravity of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The image_gravity of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._image_gravity

    @image_gravity.setter
    def image_gravity(self, image_gravity):
        """Sets the image_gravity of this TemplatestemplateIdaddFieldsFields.


        :param image_gravity: The image_gravity of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["NorthWest", "North", "NorthEast", "West", "Center", "East", "SouthWest", "South", "SouthEast"]  # noqa: E501
        if image_gravity not in allowed_values:
            raise ValueError(
                "Invalid value for `image_gravity` ({0}), must be one of {1}"  # noqa: E501
                .format(image_gravity, allowed_values)
            )

        self._image_gravity = image_gravity

    @property
    def overflow(self):
        """Gets the overflow of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The overflow of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._overflow

    @overflow.setter
    def overflow(self, overflow):
        """Sets the overflow of this TemplatestemplateIdaddFieldsFields.


        :param overflow: The overflow of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["shrink_to_fit", "truncate"]  # noqa: E501
        if overflow not in allowed_values:
            raise ValueError(
                "Invalid value for `overflow` ({0}), must be one of {1}"  # noqa: E501
                .format(overflow, allowed_values)
            )

        self._overflow = overflow

    @property
    def qrcode_color(self):
        """Gets the qrcode_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The qrcode_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._qrcode_color

    @qrcode_color.setter
    def qrcode_color(self, qrcode_color):
        """Sets the qrcode_color of this TemplatestemplateIdaddFieldsFields.


        :param qrcode_color: The qrcode_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._qrcode_color = qrcode_color

    @property
    def color_field_required(self):
        """Gets the color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._color_field_required

    @color_field_required.setter
    def color_field_required(self, color_field_required):
        """Sets the color_field_required of this TemplatestemplateIdaddFieldsFields.


        :param color_field_required: The color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._color_field_required = color_field_required

    @property
    def background_color_field_required(self):
        """Gets the background_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The background_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._background_color_field_required

    @background_color_field_required.setter
    def background_color_field_required(self, background_color_field_required):
        """Sets the background_color_field_required of this TemplatestemplateIdaddFieldsFields.


        :param background_color_field_required: The background_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._background_color_field_required = background_color_field_required

    @property
    def id(self):
        """Gets the id of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The id of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplatestemplateIdaddFieldsFields.


        :param id: The id of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if id is not None and id < 0:  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def image_scale_type(self):
        """Gets the image_scale_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The image_scale_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._image_scale_type

    @image_scale_type.setter
    def image_scale_type(self, image_scale_type):
        """Sets the image_scale_type of this TemplatestemplateIdaddFieldsFields.


        :param image_scale_type: The image_scale_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["fit", "fill", "stretch"]  # noqa: E501
        if image_scale_type not in allowed_values:
            raise ValueError(
                "Invalid value for `image_scale_type` ({0}), must be one of {1}"  # noqa: E501
                .format(image_scale_type, allowed_values)
            )

        self._image_scale_type = image_scale_type

    @property
    def exclusive_minimum(self):
        """Gets the exclusive_minimum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The exclusive_minimum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive_minimum

    @exclusive_minimum.setter
    def exclusive_minimum(self, exclusive_minimum):
        """Sets the exclusive_minimum of this TemplatestemplateIdaddFieldsFields.


        :param exclusive_minimum: The exclusive_minimum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._exclusive_minimum = exclusive_minimum

    @property
    def height(self):
        """Gets the height of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The height of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this TemplatestemplateIdaddFieldsFields.


        :param height: The height of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if height is not None and height < 0:  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `0`")  # noqa: E501

        self._height = height

    @property
    def number_condition_range_exclusive_max(self):
        """Gets the number_condition_range_exclusive_max of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The number_condition_range_exclusive_max of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._number_condition_range_exclusive_max

    @number_condition_range_exclusive_max.setter
    def number_condition_range_exclusive_max(self, number_condition_range_exclusive_max):
        """Sets the number_condition_range_exclusive_max of this TemplatestemplateIdaddFieldsFields.


        :param number_condition_range_exclusive_max: The number_condition_range_exclusive_max of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._number_condition_range_exclusive_max = number_condition_range_exclusive_max

    @property
    def invert_boolean_condition(self):
        """Gets the invert_boolean_condition of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The invert_boolean_condition of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._invert_boolean_condition

    @invert_boolean_condition.setter
    def invert_boolean_condition(self, invert_boolean_condition):
        """Sets the invert_boolean_condition of this TemplatestemplateIdaddFieldsFields.


        :param invert_boolean_condition: The invert_boolean_condition of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._invert_boolean_condition = invert_boolean_condition

    @property
    def shape_fill_color_field_name(self):
        """Gets the shape_fill_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The shape_fill_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._shape_fill_color_field_name

    @shape_fill_color_field_name.setter
    def shape_fill_color_field_name(self, shape_fill_color_field_name):
        """Sets the shape_fill_color_field_name of this TemplatestemplateIdaddFieldsFields.


        :param shape_fill_color_field_name: The shape_fill_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._shape_fill_color_field_name = shape_fill_color_field_name

    @property
    def static(self):
        """Gets the static of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The static of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._static

    @static.setter
    def static(self, static):
        """Sets the static of this TemplatestemplateIdaddFieldsFields.


        :param static: The static of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._static = static

    @property
    def shape_border_color_field_name(self):
        """Gets the shape_border_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The shape_border_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._shape_border_color_field_name

    @shape_border_color_field_name.setter
    def shape_border_color_field_name(self, shape_border_color_field_name):
        """Sets the shape_border_color_field_name of this TemplatestemplateIdaddFieldsFields.


        :param shape_border_color_field_name: The shape_border_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._shape_border_color_field_name = shape_border_color_field_name

    @property
    def v_alignment(self):
        """Gets the v_alignment of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The v_alignment of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._v_alignment

    @v_alignment.setter
    def v_alignment(self, v_alignment):
        """Sets the v_alignment of this TemplatestemplateIdaddFieldsFields.


        :param v_alignment: The v_alignment of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["bottom", "center", "top"]  # noqa: E501
        if v_alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `v_alignment` ({0}), must be one of {1}"  # noqa: E501
                .format(v_alignment, allowed_values)
            )

        self._v_alignment = v_alignment

    @property
    def bold(self):
        """Gets the bold of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The bold of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._bold

    @bold.setter
    def bold(self, bold):
        """Sets the bold of this TemplatestemplateIdaddFieldsFields.


        :param bold: The bold of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._bold = bold

    @property
    def shape_border_width(self):
        """Gets the shape_border_width of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The shape_border_width of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._shape_border_width

    @shape_border_width.setter
    def shape_border_width(self, shape_border_width):
        """Sets the shape_border_width of this TemplatestemplateIdaddFieldsFields.


        :param shape_border_width: The shape_border_width of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if shape_border_width is not None and shape_border_width < 0:  # noqa: E501
            raise ValueError("Invalid value for `shape_border_width`, must be a value greater than or equal to `0`")  # noqa: E501

        self._shape_border_width = shape_border_width

    @property
    def comb_number_of_cells(self):
        """Gets the comb_number_of_cells of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The comb_number_of_cells of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._comb_number_of_cells

    @comb_number_of_cells.setter
    def comb_number_of_cells(self, comb_number_of_cells):
        """Sets the comb_number_of_cells of this TemplatestemplateIdaddFieldsFields.


        :param comb_number_of_cells: The comb_number_of_cells of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if comb_number_of_cells is not None and comb_number_of_cells < 0:  # noqa: E501
            raise ValueError("Invalid value for `comb_number_of_cells`, must be a value greater than or equal to `0`")  # noqa: E501

        self._comb_number_of_cells = comb_number_of_cells

    @property
    def shape_border_color(self):
        """Gets the shape_border_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The shape_border_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._shape_border_color

    @shape_border_color.setter
    def shape_border_color(self, shape_border_color):
        """Sets the shape_border_color of this TemplatestemplateIdaddFieldsFields.


        :param shape_border_color: The shape_border_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._shape_border_color = shape_border_color

    @property
    def comb(self):
        """Gets the comb of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The comb of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._comb

    @comb.setter
    def comb(self, comb):
        """Sets the comb of this TemplatestemplateIdaddFieldsFields.


        :param comb: The comb of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._comb = comb

    @property
    def typeface(self):
        """Gets the typeface of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The typeface of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._typeface

    @typeface.setter
    def typeface(self, typeface):
        """Sets the typeface of this TemplatestemplateIdaddFieldsFields.


        :param typeface: The typeface of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._typeface = typeface

    @property
    def shape_type(self):
        """Gets the shape_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The shape_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._shape_type

    @shape_type.setter
    def shape_type(self, shape_type):
        """Sets the shape_type of this TemplatestemplateIdaddFieldsFields.


        :param shape_type: The shape_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["square", "rectangle", "circle", "ellipse"]  # noqa: E501
        if shape_type not in allowed_values:
            raise ValueError(
                "Invalid value for `shape_type` ({0}), must be one of {1}"  # noqa: E501
                .format(shape_type, allowed_values)
            )

        self._shape_type = shape_type

    @property
    def condition(self):
        """Gets the condition of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The condition of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this TemplatestemplateIdaddFieldsFields.


        :param condition: The condition of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def display_type(self):
        """Gets the display_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The display_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._display_type

    @display_type.setter
    def display_type(self, display_type):
        """Sets the display_type of this TemplatestemplateIdaddFieldsFields.


        :param display_type: The display_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["text", "check", "qrcode", "barcode", "image", "shape"]  # noqa: E501
        if display_type not in allowed_values:
            raise ValueError(
                "Invalid value for `display_type` ({0}), must be one of {1}"  # noqa: E501
                .format(display_type, allowed_values)
            )

        self._display_type = display_type

    @property
    def check_color(self):
        """Gets the check_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The check_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._check_color

    @check_color.setter
    def check_color(self, check_color):
        """Sets the check_color of this TemplatestemplateIdaddFieldsFields.


        :param check_color: The check_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._check_color = check_color

    @property
    def multiline_lines(self):
        """Gets the multiline_lines of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The multiline_lines of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._multiline_lines

    @multiline_lines.setter
    def multiline_lines(self, multiline_lines):
        """Sets the multiline_lines of this TemplatestemplateIdaddFieldsFields.


        :param multiline_lines: The multiline_lines of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if multiline_lines is not None and multiline_lines < 0:  # noqa: E501
            raise ValueError("Invalid value for `multiline_lines`, must be a value greater than or equal to `0`")  # noqa: E501

        self._multiline_lines = multiline_lines

    @property
    def multiline(self):
        """Gets the multiline of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The multiline of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._multiline

    @multiline.setter
    def multiline(self, multiline):
        """Sets the multiline of this TemplatestemplateIdaddFieldsFields.


        :param multiline: The multiline of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._multiline = multiline

    @property
    def true_text(self):
        """Gets the true_text of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The true_text of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._true_text

    @true_text.setter
    def true_text(self, true_text):
        """Sets the true_text of this TemplatestemplateIdaddFieldsFields.


        :param true_text: The true_text of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._true_text = true_text

    @property
    def name(self):
        """Gets the name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplatestemplateIdaddFieldsFields.


        :param name: The name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def font_size(self):
        """Gets the font_size of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The font_size of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this TemplatestemplateIdaddFieldsFields.


        :param font_size: The font_size of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if font_size is not None and font_size < 0:  # noqa: E501
            raise ValueError("Invalid value for `font_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._font_size = font_size

    @property
    def page(self):
        """Gets the page of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The page of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this TemplatestemplateIdaddFieldsFields.


        :param page: The page of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if page is not None and page < 1:  # noqa: E501
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")  # noqa: E501

        self._page = page

    @property
    def alignment(self):
        """Gets the alignment of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The alignment of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this TemplatestemplateIdaddFieldsFields.


        :param alignment: The alignment of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["left", "center", "right"]  # noqa: E501
        if alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `alignment` ({0}), must be one of {1}"  # noqa: E501
                .format(alignment, allowed_values)
            )

        self._alignment = alignment

    @property
    def max_length(self):
        """Gets the max_length of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The max_length of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this TemplatestemplateIdaddFieldsFields.


        :param max_length: The max_length of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """

        self._max_length = max_length

    @property
    def auto_calculate_max_length(self):
        """Gets the auto_calculate_max_length of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The auto_calculate_max_length of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._auto_calculate_max_length

    @auto_calculate_max_length.setter
    def auto_calculate_max_length(self, auto_calculate_max_length):
        """Sets the auto_calculate_max_length of this TemplatestemplateIdaddFieldsFields.


        :param auto_calculate_max_length: The auto_calculate_max_length of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._auto_calculate_max_length = auto_calculate_max_length

    @property
    def color_field_name(self):
        """Gets the color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._color_field_name

    @color_field_name.setter
    def color_field_name(self, color_field_name):
        """Sets the color_field_name of this TemplatestemplateIdaddFieldsFields.


        :param color_field_name: The color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._color_field_name = color_field_name

    @property
    def qrcode_color_field_name(self):
        """Gets the qrcode_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The qrcode_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._qrcode_color_field_name

    @qrcode_color_field_name.setter
    def qrcode_color_field_name(self, qrcode_color_field_name):
        """Sets the qrcode_color_field_name of this TemplatestemplateIdaddFieldsFields.


        :param qrcode_color_field_name: The qrcode_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._qrcode_color_field_name = qrcode_color_field_name

    @property
    def number_condition_range_min(self):
        """Gets the number_condition_range_min of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The number_condition_range_min of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._number_condition_range_min

    @number_condition_range_min.setter
    def number_condition_range_min(self, number_condition_range_min):
        """Sets the number_condition_range_min of this TemplatestemplateIdaddFieldsFields.


        :param number_condition_range_min: The number_condition_range_min of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """

        self._number_condition_range_min = number_condition_range_min

    @property
    def color(self):
        """Gets the color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this TemplatestemplateIdaddFieldsFields.


        :param color: The color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def hidden(self):
        """Gets the hidden of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The hidden of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this TemplatestemplateIdaddFieldsFields.


        :param hidden: The hidden of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def check_color_field_required(self):
        """Gets the check_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The check_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._check_color_field_required

    @check_color_field_required.setter
    def check_color_field_required(self, check_color_field_required):
        """Sets the check_color_field_required of this TemplatestemplateIdaddFieldsFields.


        :param check_color_field_required: The check_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._check_color_field_required = check_color_field_required

    @property
    def combined_field_format(self):
        """Gets the combined_field_format of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The combined_field_format of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._combined_field_format

    @combined_field_format.setter
    def combined_field_format(self, combined_field_format):
        """Sets the combined_field_format of this TemplatestemplateIdaddFieldsFields.


        :param combined_field_format: The combined_field_format of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._combined_field_format = combined_field_format

    @property
    def description(self):
        """Gets the description of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The description of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TemplatestemplateIdaddFieldsFields.


        :param description: The description of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def shape_border_color_field_required(self):
        """Gets the shape_border_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The shape_border_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._shape_border_color_field_required

    @shape_border_color_field_required.setter
    def shape_border_color_field_required(self, shape_border_color_field_required):
        """Sets the shape_border_color_field_required of this TemplatestemplateIdaddFieldsFields.


        :param shape_border_color_field_required: The shape_border_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._shape_border_color_field_required = shape_border_color_field_required

    @property
    def combined_field_names(self):
        """Gets the combined_field_names of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The combined_field_names of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._combined_field_names

    @combined_field_names.setter
    def combined_field_names(self, combined_field_names):
        """Sets the combined_field_names of this TemplatestemplateIdaddFieldsFields.


        :param combined_field_names: The combined_field_names of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._combined_field_names = combined_field_names

    @property
    def title(self):
        """Gets the title of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The title of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TemplatestemplateIdaddFieldsFields.


        :param title: The title of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def number_condition_range_exclusive_min(self):
        """Gets the number_condition_range_exclusive_min of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The number_condition_range_exclusive_min of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._number_condition_range_exclusive_min

    @number_condition_range_exclusive_min.setter
    def number_condition_range_exclusive_min(self, number_condition_range_exclusive_min):
        """Sets the number_condition_range_exclusive_min of this TemplatestemplateIdaddFieldsFields.


        :param number_condition_range_exclusive_min: The number_condition_range_exclusive_min of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._number_condition_range_exclusive_min = number_condition_range_exclusive_min

    @property
    def combined_field_separator(self):
        """Gets the combined_field_separator of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The combined_field_separator of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._combined_field_separator

    @combined_field_separator.setter
    def combined_field_separator(self, combined_field_separator):
        """Sets the combined_field_separator of this TemplatestemplateIdaddFieldsFields.


        :param combined_field_separator: The combined_field_separator of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._combined_field_separator = combined_field_separator

    @property
    def exclusive_maximum(self):
        """Gets the exclusive_maximum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The exclusive_maximum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive_maximum

    @exclusive_maximum.setter
    def exclusive_maximum(self, exclusive_maximum):
        """Sets the exclusive_maximum of this TemplatestemplateIdaddFieldsFields.


        :param exclusive_maximum: The exclusive_maximum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._exclusive_maximum = exclusive_maximum

    @property
    def default(self):
        """Gets the default of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The default of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this TemplatestemplateIdaddFieldsFields.


        :param default: The default of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._default = default

    @property
    def combined_field_type(self):
        """Gets the combined_field_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The combined_field_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._combined_field_type

    @combined_field_type.setter
    def combined_field_type(self, combined_field_type):
        """Sets the combined_field_type of this TemplatestemplateIdaddFieldsFields.


        :param combined_field_type: The combined_field_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._combined_field_type = combined_field_type

    @property
    def date_time_format(self):
        """Gets the date_time_format of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The date_time_format of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._date_time_format

    @date_time_format.setter
    def date_time_format(self, date_time_format):
        """Sets the date_time_format of this TemplatestemplateIdaddFieldsFields.


        :param date_time_format: The date_time_format of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._date_time_format = date_time_format

    @property
    def qrcode_color_field_required(self):
        """Gets the qrcode_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The qrcode_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._qrcode_color_field_required

    @qrcode_color_field_required.setter
    def qrcode_color_field_required(self, qrcode_color_field_required):
        """Sets the qrcode_color_field_required of this TemplatestemplateIdaddFieldsFields.


        :param qrcode_color_field_required: The qrcode_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._qrcode_color_field_required = qrcode_color_field_required

    @property
    def currency(self):
        """Gets the currency of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The currency of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this TemplatestemplateIdaddFieldsFields.


        :param currency: The currency of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._currency = currency

    @property
    def false_text(self):
        """Gets the false_text of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The false_text of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._false_text

    @false_text.setter
    def false_text(self, false_text):
        """Sets the false_text of this TemplatestemplateIdaddFieldsFields.


        :param false_text: The false_text of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._false_text = false_text

    @property
    def strikethrough(self):
        """Gets the strikethrough of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The strikethrough of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._strikethrough

    @strikethrough.setter
    def strikethrough(self, strikethrough):
        """Sets the strikethrough of this TemplatestemplateIdaddFieldsFields.


        :param strikethrough: The strikethrough of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._strikethrough = strikethrough

    @property
    def character_spacing(self):
        """Gets the character_spacing of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The character_spacing of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._character_spacing

    @character_spacing.setter
    def character_spacing(self, character_spacing):
        """Sets the character_spacing of this TemplatestemplateIdaddFieldsFields.


        :param character_spacing: The character_spacing of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """

        self._character_spacing = character_spacing

    @property
    def number_condition_range_max(self):
        """Gets the number_condition_range_max of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The number_condition_range_max of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._number_condition_range_max

    @number_condition_range_max.setter
    def number_condition_range_max(self, number_condition_range_max):
        """Sets the number_condition_range_max of this TemplatestemplateIdaddFieldsFields.


        :param number_condition_range_max: The number_condition_range_max of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """

        self._number_condition_range_max = number_condition_range_max

    @property
    def background_color(self):
        """Gets the background_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The background_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this TemplatestemplateIdaddFieldsFields.


        :param background_color: The background_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._background_color = background_color

    @property
    def check_color_field_name(self):
        """Gets the check_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The check_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._check_color_field_name

    @check_color_field_name.setter
    def check_color_field_name(self, check_color_field_name):
        """Sets the check_color_field_name of this TemplatestemplateIdaddFieldsFields.


        :param check_color_field_name: The check_color_field_name of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._check_color_field_name = check_color_field_name

    @property
    def check_character(self):
        """Gets the check_character of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The check_character of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._check_character

    @check_character.setter
    def check_character(self, check_character):
        """Sets the check_character of this TemplatestemplateIdaddFieldsFields.


        :param check_character: The check_character of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["&#10003;", "&#10004;", "&#10006;", "&#10007;", "&#10008;"]  # noqa: E501
        if check_character not in allowed_values:
            raise ValueError(
                "Invalid value for `check_character` ({0}), must be one of {1}"  # noqa: E501
                .format(check_character, allowed_values)
            )

        self._check_character = check_character

    @property
    def rotation(self):
        """Gets the rotation of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The rotation of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this TemplatestemplateIdaddFieldsFields.


        :param rotation: The rotation of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if rotation is not None and rotation > 3.6E+2:  # noqa: E501
            raise ValueError("Invalid value for `rotation`, must be a value less than or equal to `3.6E+2`")  # noqa: E501
        if rotation is not None and rotation < 0:  # noqa: E501
            raise ValueError("Invalid value for `rotation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rotation = rotation

    @property
    def option_list(self):
        """Gets the option_list of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The option_list of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._option_list

    @option_list.setter
    def option_list(self, option_list):
        """Sets the option_list of this TemplatestemplateIdaddFieldsFields.


        :param option_list: The option_list of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._option_list = option_list

    @property
    def shape_fill_color(self):
        """Gets the shape_fill_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The shape_fill_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._shape_fill_color

    @shape_fill_color.setter
    def shape_fill_color(self, shape_fill_color):
        """Sets the shape_fill_color of this TemplatestemplateIdaddFieldsFields.


        :param shape_fill_color: The shape_fill_color of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """

        self._shape_fill_color = shape_fill_color

    @property
    def string_condition_type(self):
        """Gets the string_condition_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The string_condition_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._string_condition_type

    @string_condition_type.setter
    def string_condition_type(self, string_condition_type):
        """Sets the string_condition_type of this TemplatestemplateIdaddFieldsFields.


        :param string_condition_type: The string_condition_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["equals", "contains", "starts_with", "ends_with", "regex"]  # noqa: E501
        if string_condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `string_condition_type` ({0}), must be one of {1}"  # noqa: E501
                .format(string_condition_type, allowed_values)
            )

        self._string_condition_type = string_condition_type

    @property
    def shape_fill_color_field_required(self):
        """Gets the shape_fill_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The shape_fill_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._shape_fill_color_field_required

    @shape_fill_color_field_required.setter
    def shape_fill_color_field_required(self, shape_fill_color_field_required):
        """Sets the shape_fill_color_field_required of this TemplatestemplateIdaddFieldsFields.


        :param shape_fill_color_field_required: The shape_fill_color_field_required of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._shape_fill_color_field_required = shape_fill_color_field_required

    @property
    def decimal_places(self):
        """Gets the decimal_places of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The decimal_places of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this TemplatestemplateIdaddFieldsFields.


        :param decimal_places: The decimal_places of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if decimal_places is not None and decimal_places < 0:  # noqa: E501
            raise ValueError("Invalid value for `decimal_places`, must be a value greater than or equal to `0`")  # noqa: E501

        self._decimal_places = decimal_places

    @property
    def include_time(self):
        """Gets the include_time of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The include_time of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._include_time

    @include_time.setter
    def include_time(self, include_time):
        """Sets the include_time of this TemplatestemplateIdaddFieldsFields.


        :param include_time: The include_time of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._include_time = include_time

    @property
    def width(self):
        """Gets the width of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The width of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this TemplatestemplateIdaddFieldsFields.


        :param width: The width of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if width is not None and width < 0:  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `0`")  # noqa: E501

        self._width = width

    @property
    def x(self):
        """Gets the x of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The x of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this TemplatestemplateIdaddFieldsFields.


        :param x: The x of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if x is not None and x < 0:  # noqa: E501
            raise ValueError("Invalid value for `x`, must be a value greater than or equal to `0`")  # noqa: E501

        self._x = x

    @property
    def maximum(self):
        """Gets the maximum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The maximum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this TemplatestemplateIdaddFieldsFields.


        :param maximum: The maximum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """

        self._maximum = maximum

    @property
    def y(self):
        """Gets the y of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The y of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this TemplatestemplateIdaddFieldsFields.


        :param y: The y of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if y is not None and y < 0:  # noqa: E501
            raise ValueError("Invalid value for `y`, must be a value greater than or equal to `0`")  # noqa: E501

        self._y = y

    @property
    def signature_allow_draw(self):
        """Gets the signature_allow_draw of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The signature_allow_draw of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._signature_allow_draw

    @signature_allow_draw.setter
    def signature_allow_draw(self, signature_allow_draw):
        """Sets the signature_allow_draw of this TemplatestemplateIdaddFieldsFields.


        :param signature_allow_draw: The signature_allow_draw of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._signature_allow_draw = signature_allow_draw

    @property
    def number_condition_type(self):
        """Gets the number_condition_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The number_condition_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: str
        """
        return self._number_condition_type

    @number_condition_type.setter
    def number_condition_type(self, number_condition_type):
        """Sets the number_condition_type of this TemplatestemplateIdaddFieldsFields.


        :param number_condition_type: The number_condition_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["equals", "range", "gte", "gt", "lte", "lt"]  # noqa: E501
        if number_condition_type not in allowed_values:
            raise ValueError(
                "Invalid value for `number_condition_type` ({0}), must be one of {1}"  # noqa: E501
                .format(number_condition_type, allowed_values)
            )

        self._number_condition_type = number_condition_type

    @property
    def opacity(self):
        """Gets the opacity of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The opacity of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this TemplatestemplateIdaddFieldsFields.


        :param opacity: The opacity of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """
        if opacity is not None and opacity > 1:  # noqa: E501
            raise ValueError("Invalid value for `opacity`, must be a value less than or equal to `1`")  # noqa: E501
        if opacity is not None and opacity < 0:  # noqa: E501
            raise ValueError("Invalid value for `opacity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._opacity = opacity

    @property
    def minimum(self):
        """Gets the minimum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The minimum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this TemplatestemplateIdaddFieldsFields.


        :param minimum: The minimum of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: float
        """

        self._minimum = minimum

    @property
    def signature_allow_type(self):
        """Gets the signature_allow_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501


        :return: The signature_allow_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :rtype: bool
        """
        return self._signature_allow_type

    @signature_allow_type.setter
    def signature_allow_type(self, signature_allow_type):
        """Sets the signature_allow_type of this TemplatestemplateIdaddFieldsFields.


        :param signature_allow_type: The signature_allow_type of this TemplatestemplateIdaddFieldsFields.  # noqa: E501
        :type: bool
        """

        self._signature_allow_type = signature_allow_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplatestemplateIdaddFieldsFields):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
