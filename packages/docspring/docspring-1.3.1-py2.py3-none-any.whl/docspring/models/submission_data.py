# coding: utf-8

"""
    API v1

    DocSpring is a service that helps you fill out and sign PDF templates.  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SubmissionData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'css': 'str',
        'data': 'object',
        'data_requests': 'list[CreateSubmissionDataRequestData]',
        'field_overrides': 'object',
        'html': 'str',
        'metadata': 'object',
        'test': 'bool'
    }

    attribute_map = {
        'css': 'css',
        'data': 'data',
        'data_requests': 'data_requests',
        'field_overrides': 'field_overrides',
        'html': 'html',
        'metadata': 'metadata',
        'test': 'test'
    }

    def __init__(self, css=None, data=None, data_requests=None, field_overrides=None, html=None, metadata=None, test=None):  # noqa: E501
        """SubmissionData - a model defined in OpenAPI"""  # noqa: E501

        self._css = None
        self._data = None
        self._data_requests = None
        self._field_overrides = None
        self._html = None
        self._metadata = None
        self._test = None
        self.discriminator = None

        if css is not None:
            self.css = css
        self.data = data
        if data_requests is not None:
            self.data_requests = data_requests
        if field_overrides is not None:
            self.field_overrides = field_overrides
        if html is not None:
            self.html = html
        if metadata is not None:
            self.metadata = metadata
        if test is not None:
            self.test = test

    @property
    def css(self):
        """Gets the css of this SubmissionData.  # noqa: E501


        :return: The css of this SubmissionData.  # noqa: E501
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this SubmissionData.


        :param css: The css of this SubmissionData.  # noqa: E501
        :type: str
        """

        self._css = css

    @property
    def data(self):
        """Gets the data of this SubmissionData.  # noqa: E501


        :return: The data of this SubmissionData.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SubmissionData.


        :param data: The data of this SubmissionData.  # noqa: E501
        :type: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def data_requests(self):
        """Gets the data_requests of this SubmissionData.  # noqa: E501


        :return: The data_requests of this SubmissionData.  # noqa: E501
        :rtype: list[CreateSubmissionDataRequestData]
        """
        return self._data_requests

    @data_requests.setter
    def data_requests(self, data_requests):
        """Sets the data_requests of this SubmissionData.


        :param data_requests: The data_requests of this SubmissionData.  # noqa: E501
        :type: list[CreateSubmissionDataRequestData]
        """

        self._data_requests = data_requests

    @property
    def field_overrides(self):
        """Gets the field_overrides of this SubmissionData.  # noqa: E501


        :return: The field_overrides of this SubmissionData.  # noqa: E501
        :rtype: object
        """
        return self._field_overrides

    @field_overrides.setter
    def field_overrides(self, field_overrides):
        """Sets the field_overrides of this SubmissionData.


        :param field_overrides: The field_overrides of this SubmissionData.  # noqa: E501
        :type: object
        """

        self._field_overrides = field_overrides

    @property
    def html(self):
        """Gets the html of this SubmissionData.  # noqa: E501


        :return: The html of this SubmissionData.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this SubmissionData.


        :param html: The html of this SubmissionData.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def metadata(self):
        """Gets the metadata of this SubmissionData.  # noqa: E501


        :return: The metadata of this SubmissionData.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SubmissionData.


        :param metadata: The metadata of this SubmissionData.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def test(self):
        """Gets the test of this SubmissionData.  # noqa: E501


        :return: The test of this SubmissionData.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this SubmissionData.


        :param test: The test of this SubmissionData.  # noqa: E501
        :type: bool
        """

        self._test = test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
