Metadata-Version: 2.1
Name: rpadriver
Version: 1.0.0a2
Summary: RPADriver package.
Home-page: UNKNOWN
Author: SKALER / Siili Solutions
Author-email: skaler-support@siili.com
License: Apache License 2.0
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 3 - Alpha

RPADriver
=========

The goal of RPADriver is to make Robot Framework a true RPA tool. This is a RPA helper library built on
the TOS model using ``task-object-storage`` package.

Requirements
------------

* MongoDB
* Python >3.6
* robotframework >3
* task-object-storage


Overview
--------

TOS model has the concept of *stages* - every RPA process can usually be divided to at least two stages:

* Producer
* Consumer

There is always one producer, but there might be many consumers (1... *n*). The naming convention is as follows:

+--------------+----------+
| Type         | Name     |
+==============+==========+
| Producer     | stage_0  |
+--------------+----------+
| Consumer 1   | stage_1  |
+--------------+----------+
| Consumer 2   | stage_2  |
+--------------+----------+
| Consumer *n* | stage_n  |
+--------------+----------+

Producer creates task objects, and consumers fetch them from the DB and do their processing.


Here are two packages: ``RPADriver`` and ``RPALibrary``.

RPALibrary
----------

``RPALibrary`` is the classic library originally included as a helper with ``TOSLibrary``.
With this you create robot stage definition in Python code, but still have support for
Robot Framework keywords.


Conventional project structure
++++++++++++++++++++++++++++++

Conventional project structure looks like this

::

    .
    ├── keywords
    ├── libraries
    ├── pipelines
    │   ├── Jenkinsfile
    │   ├── consumer.groovy
    │   └── producer.groovy
    ├── resources
    │   └── settings.py
    ├── stages
    ├── tasks
    │   └── main.robot
    └── run.py

where

* ``keywords``: Robot Framework keyword files.
* ``libraries``: module for all the Python library code.
* ``pipelines``: Jenkins pipelines.
* ``resources``: place to store all miscellaneous files: settings, configs, templates.
* ``stages``: module for the stage definitions (in Python code).
* ``tasks``: Robot Framework suites.
* ``run.py``: startup script for the robot.

The robot control flow is ``run.py`` -> ``tasks/main.robot`` -> ``stages.StageN``.


Producer
--------

To build a Producer stage, you need to create a new file ``stages/Stage0.py`` with a class
called ``Stage0`` inside. This class should inherit from ``Producer``.
The class needs at least one method: ``process_data(self)``.
This method is the main action to do for every data item that will become task object payload.
Optionally, if you need to first prefetch the data into memory (e.g., into a list), you will need
to define a method called ``preloop_action``. This will then feed ``process_data`` with data items
one at a time. When prelooping, you will need to define ``process_data`` like this: ``process_data(self, item)``,
where ``item`` is one of the pre-prepared data items.

Call ``Stage0.Main Loop`` from Robot Framework to start the loop action (your defined Python methods will be
called automatically inside the library).


By inheriting from ``Producer`` you get:

* Automatic task object creation.
* Automatic looping of the data.
* Automatic error handling.
* Every software robot you and your team builds will follow the same conventions.


Consumer
--------

To build a Consumer stage, you need to create a new file ``stages/Stage1.py`` with a class
called ``Stage1`` inside (the number depending on your stage number).
This class should inherit from ``Consumer``.
The class needs at least one method: ``main_action(self, to)``, where ``to`` is a task object
fetched by the library from your MongoDB database. All you need to do is to define what to do
for every task object.

Call ``Stage1.Main Loop`` from Robot Framework to start the loop action (your defined Python methods will be
called automatically inside the library).


By inheriting from ``Consumer`` you get:

* Automatic task object fetching.
* Automatic error handling.
* Every software robot you and your team builds will follow the same conventions.


Example usage
+++++++++++++

Note that the examples here are overly simplified.


Startup script (``run.py``):

.. code-block:: python

    def main():
        return robot.run("tasks")

    if __name__ == '__main__':
        sys.exit(main())


Main Robot file definition (``tasks/main.robot``):

.. code-block:: python

    *** Settings ***
    Library             TOSLibrary    ${db_server}:${db_port}  ${db_name}
    Library             ../stages/Stage0.py
    Library             ../stages/Stage1.py

    *** Tasks ***
    Create task objects from raw data
        [Tags]                      stage_0
        Stage0.Main Loop            no_screenshots=True

    Do action on the task objects
        [Tags]                      stage_1
        Stage1.Main Loop



Producer stage definition (``stages/Stage0.py``):

.. code-block:: python

    from RPALibrary import Producer


    class Stage0(Producer):

        def preloop_action(self):
            """Read and preprocess an Excel worksheet."""
            data = self.read_excel()
            data = self.filter_rows(data)
            return data

        def process_data(self, item):
            """
            Do some some operations for every data item (e.g.
            Excel row). This should return a dictionary.
            The return value will be used as the payload for the task object.
            The task objects are created automatically in ``Producer`` object.

            Having ``item`` parameter in the method signature is important.
            """
            item = self.reader.clean_item(item)
            return item



Consumer stage definition  (``stages/Stage1.py``)

.. code-block:: python

    from RPALibrary import Consumer

    from .errors import SYSTEM_OFFLINE


    class Stage1(Consumer):
        def main_action(self, to):
            """The library will pass created task objects to this method."""
            self.do_some_complex_action_on_the_task_object(to)

        def action_on_fail(self, to):
            if to["last_error"] == SYSTEM_OFFLINE:
                self.handle_system_offline()
            self.return_to_main_screen()



You can also call your stage methods as Robot Framework keywords with ``run_keyword``:

.. code-block:: python

    from robot.libraries.BuiltIn import BuiltIn

    run = BuiltIn().run_keyword


    class Stage1(Consumer):
        def main_action(self, to):
            run("Do Some Complex Action On The Task Object", to)

        def action_on_fail(self, to):
            if to["last_error"] == SYSTEM_OFFLINE:
                run("Handle System Offline")
            run("Return To Main Screen")


RPADdriver
----------

``RPADriver`` is a reimplementation of ``RPALibrary`` using Robot Framework listeners. With ``RPADriver`` you
can write pure Robot Framework script and don't necessarily need Python code at all.
The robot control flow is ``run.py`` -> ``tasks/main.robot``.


Available keywords/methods
--------------------------
See the full API documentation.


For developers
--------------

Package and deploy code with

.. code-block:: bash

  scripts/build_and_deploy_to_pypi.sh


You can also install the `whl` package found in the `dist` directory with

.. code-block:: bash

  pip install <package-name>.whl


