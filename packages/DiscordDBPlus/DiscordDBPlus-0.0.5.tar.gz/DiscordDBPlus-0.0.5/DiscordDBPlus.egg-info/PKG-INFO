Metadata-Version: 2.1
Name: DiscordDBPlus
Version: 0.0.5
Summary: A simple database which uses a Discord channel to store data.
Home-page: https://github.com/AtaeKurri/DiscordDBPlus
Author: AtaeKurri
License: MIT
Description: # DiscordDBPlus
        
        A simple database which uses a Discord channel to store data.
        This is a fork from thec0sm0s's DiscordDB.
        This version aims to be more flexible.
        
        ### Features
        * Sending multiple data packs at the same time (Just started to program it)
        * Edit a data entry from a message id.
        
        ### Installation
        Not currently available
        
        
        ### Basic Example
        ```python
        from discordDBPlus import DiscordDB
        from discord.ext import commands
        
        
        LOGS = []
        DATABASE_CHANNEL_ID = The id of a channel (int)
        
        
        class MyBot(commands.Bot):
        
            def __init__(self):
                super().__init__(command_prefix="!")
                self.discordDB = DiscordDB(self, DATABASE_CHANNEL_ID)
        
            @commands.command()
            async def log(self, ctx, *, text):
                data = {
                    "name": ctx.author.name,
                    "text": text
                }
                _id = await self.discordDB.save(data)
                LOGS.append(_id)
        
            @commands.command()
            async def show_logs(self, ctx):
                for _id in LOGS:
                    data = await self.discordDB.get(_id)
                    await ctx.send(f"Name: {data.name}, Text: {data.text}")
        
            @commands.command()
            async def log(self, ctx, id):
                _id = int(id)
                data = await DB.get(_id)
                data["name"] = "example modification"
                data["text3"] = "Edited text"
                await DB.edit(data, _id)
        
        
        bot = MyBot()
        bot.run("TOKEN")
        ```
        
        If you wish to save the LOGS to be able to recover them after the bot closed,
        you can consider put it in a file using json or some file managment system.
        
        
        ### Requirements
        * discord.py
        
        
        ### Documentation
        Head over to [documentation] for full API reference. 
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved :: MIT License
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Topic :: Internet
Classifier: Topic :: Utilities
Description-Content-Type: text/markdown
