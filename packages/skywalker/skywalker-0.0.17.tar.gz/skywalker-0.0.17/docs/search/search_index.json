{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"skywalker Things I like in Python skywalker is a Python module which contains some of the things I like in python. I was tired of copying the same snippets over and over, so I put them in a module to be imported from everywhere. skywalker is compatible with both python 2 and 3, and deals with all sort of things like plotting, timing, checkpointing, etc. etc. Installation pip install skywalker Useful links Repository: github.com/dgerosa/skywalker Documentation: dgerosa.github.io/skywalker Webpage: davidegerosa.com/skywalker/ Python Package Index: pypi.org/project/skywalker Tools These are some of the things you can do with skywalker (beside using a lightsaber, of course). A list of all functions and tools is available in the documentation. checkpoint : Smart checkpointing of function outputs to h5 files. dontprint : Deep output suppression. plot : Handle matplotlib options, including saving to file. processify : Spawn a new process everytime that function is executed. singleton : Define that class as a singleton (one instance at any time can exist) timer : Print execution time of a function/class. Cite me If you want to cite this code:","title":"Readme"},{"location":"#skywalker","text":"","title":"skywalker"},{"location":"#things-i-like-in-python","text":"skywalker is a Python module which contains some of the things I like in python. I was tired of copying the same snippets over and over, so I put them in a module to be imported from everywhere. skywalker is compatible with both python 2 and 3, and deals with all sort of things like plotting, timing, checkpointing, etc. etc.","title":"Things I like in Python"},{"location":"#installation","text":"pip install skywalker","title":"Installation"},{"location":"#useful-links","text":"Repository: github.com/dgerosa/skywalker Documentation: dgerosa.github.io/skywalker Webpage: davidegerosa.com/skywalker/ Python Package Index: pypi.org/project/skywalker","title":"Useful links"},{"location":"#tools","text":"These are some of the things you can do with skywalker (beside using a lightsaber, of course). A list of all functions and tools is available in the documentation. checkpoint : Smart checkpointing of function outputs to h5 files. dontprint : Deep output suppression. plot : Handle matplotlib options, including saving to file. processify : Spawn a new process everytime that function is executed. singleton : Define that class as a singleton (one instance at any time can exist) timer : Print execution time of a function/class.","title":"Tools"},{"location":"#cite-me","text":"If you want to cite this code:","title":"Cite me"},{"location":"tests/","text":"skywalker.test Here are some functions to test the skywalker tools. Run with e.g. skywalker.test_something . test_checkpoint test_checkpoint() Test of skywalker.checkpoint . test_dontprint test_dontprint() Test of skywalker.dontprint . test_plot test_plot() Test of skywalker.plot . test_processify test_processify() Test of skywalker.processify . test_singleton test_singleton() Test of skywalker.singleton . test_timer test_timer() Test of skywalker.timer .","title":"Tests"},{"location":"tests/#skywalkertest","text":"Here are some functions to test the skywalker tools. Run with e.g. skywalker.test_something .","title":"skywalker.test"},{"location":"tests/#test_checkpoint","text":"test_checkpoint() Test of skywalker.checkpoint .","title":"test_checkpoint"},{"location":"tests/#test_dontprint","text":"test_dontprint() Test of skywalker.dontprint .","title":"test_dontprint"},{"location":"tests/#test_plot","text":"test_plot() Test of skywalker.plot .","title":"test_plot"},{"location":"tests/#test_processify","text":"test_processify() Test of skywalker.processify .","title":"test_processify"},{"location":"tests/#test_singleton","text":"test_singleton() Test of skywalker.singleton .","title":"test_singleton"},{"location":"tests/#test_timer","text":"test_timer() Test of skywalker.timer .","title":"test_timer"},{"location":"user/","text":"skywalker Here below is a list of tools in skywalker . checkpoint checkpoint(key, argvals=False, tempdir=False, refresh=False, verbose=True) Decorator to checkpoint the output of a function to hdf5 files. Add @skywalker.checkpoint(filename) before a function and the output will be stored to file and computed only if necessary. Deeply inspired by the ediblepickle module. Example: def test_checkpoint(): import time @skywalker.checkpoint('checkpoint',argvals=True) def long_calculation(x,arg=10): time.sleep(5) return x,arg print(long_calculation(2,arg=10)) print(long_calculation(2,arg=10)) print(long_calculation(1,arg=20)) Options are: argvals . If True all args will be listed in the file name. If False (default), none of them will. If, e.g., [0,3] only the first and the fourth arg/kwarg will be listed. refresh . If True, disable checkpointing tempdir . If True, store in ./tmp dontprint dontprint(self) A context manager to suppress all printouts, both stdout and stderr. Full credit goes to randlet . Example: def test_dontprint(): def message(): print(\"Function is printing\") print(\"Main is printing\") message() with skywalker.dontprint(): message() plot plot(function) This is a decorator to handle various matplotlib options, including saving the file to pdf. Just add @skywalker.plot to a function that returns a matplotlib figure object. If a list of figure objects is returned, save a single pdf with many pages. Example: @skywalker.plot def test_plot(): import matplotlib.pyplot as plt x=range(100) y=range(100) fig = plt.figure(figsize=(6,6)) ax=fig.add_axes([0,0,1,1]) ax.plot(x,y) return fig processify processify(func) Decorator to spawn a new process every time a function is called. Full credit for this incredibly nice piece of code goes to schlamar ; for a nice description see here . def test_processify(): @skywalker.processify def tricky(): return os.getpid() print(os.getpid(), tricky(), tricky()) singleton singleton(*args, **kwargs) Decorator to implement the singleton pattern in Python. A single instance of the decorated class can exist at any time. If multiple instances are initiated, identical pointers are returned. Here I use the singleton_decorator module. def test_singleton(): @skywalker.singleton class simple(object): def simple(self,x): return x s1=simple() s2=simple() print(s1,s2, s1==s2) timer timer(function) Decorator to print a function execution time to screen. Example: @skywalker.timer def test_timer(): x = range(int(1e7))","title":"User guide"},{"location":"user/#skywalker","text":"Here below is a list of tools in skywalker .","title":"skywalker"},{"location":"user/#checkpoint","text":"checkpoint(key, argvals=False, tempdir=False, refresh=False, verbose=True) Decorator to checkpoint the output of a function to hdf5 files. Add @skywalker.checkpoint(filename) before a function and the output will be stored to file and computed only if necessary. Deeply inspired by the ediblepickle module. Example: def test_checkpoint(): import time @skywalker.checkpoint('checkpoint',argvals=True) def long_calculation(x,arg=10): time.sleep(5) return x,arg print(long_calculation(2,arg=10)) print(long_calculation(2,arg=10)) print(long_calculation(1,arg=20)) Options are: argvals . If True all args will be listed in the file name. If False (default), none of them will. If, e.g., [0,3] only the first and the fourth arg/kwarg will be listed. refresh . If True, disable checkpointing tempdir . If True, store in ./tmp","title":"checkpoint"},{"location":"user/#dontprint","text":"dontprint(self) A context manager to suppress all printouts, both stdout and stderr. Full credit goes to randlet . Example: def test_dontprint(): def message(): print(\"Function is printing\") print(\"Main is printing\") message() with skywalker.dontprint(): message()","title":"dontprint"},{"location":"user/#plot","text":"plot(function) This is a decorator to handle various matplotlib options, including saving the file to pdf. Just add @skywalker.plot to a function that returns a matplotlib figure object. If a list of figure objects is returned, save a single pdf with many pages. Example: @skywalker.plot def test_plot(): import matplotlib.pyplot as plt x=range(100) y=range(100) fig = plt.figure(figsize=(6,6)) ax=fig.add_axes([0,0,1,1]) ax.plot(x,y) return fig","title":"plot"},{"location":"user/#processify","text":"processify(func) Decorator to spawn a new process every time a function is called. Full credit for this incredibly nice piece of code goes to schlamar ; for a nice description see here . def test_processify(): @skywalker.processify def tricky(): return os.getpid() print(os.getpid(), tricky(), tricky())","title":"processify"},{"location":"user/#singleton","text":"singleton(*args, **kwargs) Decorator to implement the singleton pattern in Python. A single instance of the decorated class can exist at any time. If multiple instances are initiated, identical pointers are returned. Here I use the singleton_decorator module. def test_singleton(): @skywalker.singleton class simple(object): def simple(self,x): return x s1=simple() s2=simple() print(s1,s2, s1==s2)","title":"singleton"},{"location":"user/#timer","text":"timer(function) Decorator to print a function execution time to screen. Example: @skywalker.timer def test_timer(): x = range(int(1e7))","title":"timer"}]}