# coding: utf-8

"""
    VeeRoute.UD

    VeeRoute.UD API  # noqa: E501

    The version of the OpenAPI document: 3.7.163569
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_ud.configuration import Configuration


class OrderCancellation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'goods_name': 'str',
        'goods_amount': 'int',
        'cancellation_reason': 'str',
        'fact_time': 'datetime'
    }

    attribute_map = {
        'goods_name': 'goods_name',
        'goods_amount': 'goods_amount',
        'cancellation_reason': 'cancellation_reason',
        'fact_time': 'fact_time'
    }

    def __init__(self, goods_name=None, goods_amount=None, cancellation_reason=None, fact_time=None, local_vars_configuration=None):  # noqa: E501
        """OrderCancellation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._goods_name = None
        self._goods_amount = None
        self._cancellation_reason = None
        self._fact_time = None
        self.discriminator = None

        self.goods_name = goods_name
        self.goods_amount = goods_amount
        self.cancellation_reason = cancellation_reason
        if fact_time is not None:
            self.fact_time = fact_time

    @property
    def goods_name(self):
        """Gets the goods_name of this OrderCancellation.  # noqa: E501

        Product name.  # noqa: E501

        :return: The goods_name of this OrderCancellation.  # noqa: E501
        :rtype: str
        """
        return self._goods_name

    @goods_name.setter
    def goods_name(self, goods_name):
        """Sets the goods_name of this OrderCancellation.

        Product name.  # noqa: E501

        :param goods_name: The goods_name of this OrderCancellation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and goods_name is None:  # noqa: E501
            raise ValueError("Invalid value for `goods_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                goods_name is not None and len(goods_name) > 1000):
            raise ValueError("Invalid value for `goods_name`, length must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                goods_name is not None and len(goods_name) < 1):
            raise ValueError("Invalid value for `goods_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._goods_name = goods_name

    @property
    def goods_amount(self):
        """Gets the goods_amount of this OrderCancellation.  # noqa: E501

        Product amount.  # noqa: E501

        :return: The goods_amount of this OrderCancellation.  # noqa: E501
        :rtype: int
        """
        return self._goods_amount

    @goods_amount.setter
    def goods_amount(self, goods_amount):
        """Sets the goods_amount of this OrderCancellation.

        Product amount.  # noqa: E501

        :param goods_amount: The goods_amount of this OrderCancellation.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and goods_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `goods_amount`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                goods_amount is not None and goods_amount > 10000):  # noqa: E501
            raise ValueError("Invalid value for `goods_amount`, must be a value less than or equal to `10000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                goods_amount is not None and goods_amount < 0):  # noqa: E501
            raise ValueError("Invalid value for `goods_amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._goods_amount = goods_amount

    @property
    def cancellation_reason(self):
        """Gets the cancellation_reason of this OrderCancellation.  # noqa: E501

        Cancellation reason.  # noqa: E501

        :return: The cancellation_reason of this OrderCancellation.  # noqa: E501
        :rtype: str
        """
        return self._cancellation_reason

    @cancellation_reason.setter
    def cancellation_reason(self, cancellation_reason):
        """Sets the cancellation_reason of this OrderCancellation.

        Cancellation reason.  # noqa: E501

        :param cancellation_reason: The cancellation_reason of this OrderCancellation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cancellation_reason is None:  # noqa: E501
            raise ValueError("Invalid value for `cancellation_reason`, must not be `None`")  # noqa: E501

        self._cancellation_reason = cancellation_reason

    @property
    def fact_time(self):
        """Gets the fact_time of this OrderCancellation.  # noqa: E501

        Fact time in the [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6) format.  # noqa: E501

        :return: The fact_time of this OrderCancellation.  # noqa: E501
        :rtype: datetime
        """
        return self._fact_time

    @fact_time.setter
    def fact_time(self, fact_time):
        """Sets the fact_time of this OrderCancellation.

        Fact time in the [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6) format.  # noqa: E501

        :param fact_time: The fact_time of this OrderCancellation.  # noqa: E501
        :type: datetime
        """

        self._fact_time = fact_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderCancellation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderCancellation):
            return True

        return self.to_dict() != other.to_dict()
