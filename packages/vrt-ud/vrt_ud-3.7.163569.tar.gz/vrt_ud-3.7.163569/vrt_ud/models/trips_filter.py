# coding: utf-8

"""
    VeeRoute.UD

    VeeRoute.UD API  # noqa: E501

    The version of the OpenAPI document: 3.7.163569
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_ud.configuration import Configuration


class TripsFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time_window': 'TimeWindow',
        'state': 'str',
        'zone': 'str',
        'keys': 'list[str]'
    }

    attribute_map = {
        'time_window': 'time_window',
        'state': 'state',
        'zone': 'zone',
        'keys': 'keys'
    }

    def __init__(self, time_window=None, state=None, zone=None, keys=None, local_vars_configuration=None):  # noqa: E501
        """TripsFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._time_window = None
        self._state = None
        self._zone = None
        self._keys = None
        self.discriminator = None

        if time_window is not None:
            self.time_window = time_window
        if state is not None:
            self.state = state
        if zone is not None:
            self.zone = zone
        if keys is not None:
            self.keys = keys

    @property
    def time_window(self):
        """Gets the time_window of this TripsFilter.  # noqa: E501


        :return: The time_window of this TripsFilter.  # noqa: E501
        :rtype: TimeWindow
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this TripsFilter.


        :param time_window: The time_window of this TripsFilter.  # noqa: E501
        :type: TimeWindow
        """

        self._time_window = time_window

    @property
    def state(self):
        """Gets the state of this TripsFilter.  # noqa: E501

        Trips state.  # noqa: E501

        :return: The state of this TripsFilter.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TripsFilter.

        Trips state.  # noqa: E501

        :param state: The state of this TripsFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLAN", "EXEC", "EXPIRE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def zone(self):
        """Gets the zone of this TripsFilter.  # noqa: E501

        Trip zone.  # noqa: E501

        :return: The zone of this TripsFilter.  # noqa: E501
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this TripsFilter.

        Trip zone.  # noqa: E501

        :param zone: The zone of this TripsFilter.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                zone is not None and len(zone) > 256):
            raise ValueError("Invalid value for `zone`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                zone is not None and len(zone) < 1):
            raise ValueError("Invalid value for `zone`, length must be greater than or equal to `1`")  # noqa: E501

        self._zone = zone

    @property
    def keys(self):
        """Gets the keys of this TripsFilter.  # noqa: E501

        Trip keys list.  # noqa: E501

        :return: The keys of this TripsFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this TripsFilter.

        Trip keys list.  # noqa: E501

        :param keys: The keys of this TripsFilter.  # noqa: E501
        :type: list[str]
        """

        self._keys = keys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TripsFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TripsFilter):
            return True

        return self.to_dict() != other.to_dict()
