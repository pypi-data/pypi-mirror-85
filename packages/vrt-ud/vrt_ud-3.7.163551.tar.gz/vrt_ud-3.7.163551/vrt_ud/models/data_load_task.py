# coding: utf-8

"""
    VeeRoute.UD

    VeeRoute.UD API  # noqa: E501

    The version of the OpenAPI document: 3.7.163551
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_ud.configuration import Configuration


class DataLoadTask(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time_shift_hours': 'int',
        'bytes': 'str',
        'filename': 'str',
        'save': 'bool'
    }

    attribute_map = {
        'time_shift_hours': 'time_shift_hours',
        'bytes': 'bytes',
        'filename': 'filename',
        'save': 'save'
    }

    def __init__(self, time_shift_hours=0, bytes=None, filename=None, save=True, local_vars_configuration=None):  # noqa: E501
        """DataLoadTask - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._time_shift_hours = None
        self._bytes = None
        self._filename = None
        self._save = None
        self.discriminator = None

        if time_shift_hours is not None:
            self.time_shift_hours = time_shift_hours
        self.bytes = bytes
        self.filename = filename
        if save is not None:
            self.save = save

    @property
    def time_shift_hours(self):
        """Gets the time_shift_hours of this DataLoadTask.  # noqa: E501

        The times in the data will be shifted during loading for the specified time period in hours, and both positive and negative values are accepted.  # noqa: E501

        :return: The time_shift_hours of this DataLoadTask.  # noqa: E501
        :rtype: int
        """
        return self._time_shift_hours

    @time_shift_hours.setter
    def time_shift_hours(self, time_shift_hours):
        """Sets the time_shift_hours of this DataLoadTask.

        The times in the data will be shifted during loading for the specified time period in hours, and both positive and negative values are accepted.  # noqa: E501

        :param time_shift_hours: The time_shift_hours of this DataLoadTask.  # noqa: E501
        :type: int
        """

        self._time_shift_hours = time_shift_hours

    @property
    def bytes(self):
        """Gets the bytes of this DataLoadTask.  # noqa: E501

        Data for loading to the XLSX\\json in the form of base64 line.  # noqa: E501

        :return: The bytes of this DataLoadTask.  # noqa: E501
        :rtype: str
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this DataLoadTask.

        Data for loading to the XLSX\\json in the form of base64 line.  # noqa: E501

        :param bytes: The bytes of this DataLoadTask.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bytes is None:  # noqa: E501
            raise ValueError("Invalid value for `bytes`, must not be `None`")  # noqa: E501

        self._bytes = bytes

    @property
    def filename(self):
        """Gets the filename of this DataLoadTask.  # noqa: E501

        File name which type is defined by its extension (xlsx\\json).  # noqa: E501

        :return: The filename of this DataLoadTask.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DataLoadTask.

        File name which type is defined by its extension (xlsx\\json).  # noqa: E501

        :param filename: The filename of this DataLoadTask.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and filename is None:  # noqa: E501
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                filename is not None and len(filename) > 256):
            raise ValueError("Invalid value for `filename`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                filename is not None and len(filename) < 1):
            raise ValueError("Invalid value for `filename`, length must be greater than or equal to `1`")  # noqa: E501

        self._filename = filename

    @property
    def save(self):
        """Gets the save of this DataLoadTask.  # noqa: E501

        Save the file after uploading to the server.  # noqa: E501

        :return: The save of this DataLoadTask.  # noqa: E501
        :rtype: bool
        """
        return self._save

    @save.setter
    def save(self, save):
        """Sets the save of this DataLoadTask.

        Save the file after uploading to the server.  # noqa: E501

        :param save: The save of this DataLoadTask.  # noqa: E501
        :type: bool
        """

        self._save = save

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataLoadTask):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataLoadTask):
            return True

        return self.to_dict() != other.to_dict()
