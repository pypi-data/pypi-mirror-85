# coding: utf-8

"""
    VeeRoute.UD

    VeeRoute.UD API  # noqa: E501

    The version of the OpenAPI document: 3.7.163551
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_ud.configuration import Configuration


class FactTripProgress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'trip_id': 'str',
        'executed_orders_in_trip': 'float',
        'executed_orders_for_current_time': 'float',
        'fact_time': 'datetime'
    }

    attribute_map = {
        'trip_id': 'trip_id',
        'executed_orders_in_trip': 'executed_orders_in_trip',
        'executed_orders_for_current_time': 'executed_orders_for_current_time',
        'fact_time': 'fact_time'
    }

    def __init__(self, trip_id=None, executed_orders_in_trip=None, executed_orders_for_current_time=None, fact_time=None, local_vars_configuration=None):  # noqa: E501
        """FactTripProgress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._trip_id = None
        self._executed_orders_in_trip = None
        self._executed_orders_for_current_time = None
        self._fact_time = None
        self.discriminator = None

        self.trip_id = trip_id
        self.executed_orders_in_trip = executed_orders_in_trip
        self.executed_orders_for_current_time = executed_orders_for_current_time
        if fact_time is not None:
            self.fact_time = fact_time

    @property
    def trip_id(self):
        """Gets the trip_id of this FactTripProgress.  # noqa: E501

        Trip ID.  # noqa: E501

        :return: The trip_id of this FactTripProgress.  # noqa: E501
        :rtype: str
        """
        return self._trip_id

    @trip_id.setter
    def trip_id(self, trip_id):
        """Sets the trip_id of this FactTripProgress.

        Trip ID.  # noqa: E501

        :param trip_id: The trip_id of this FactTripProgress.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and trip_id is None:  # noqa: E501
            raise ValueError("Invalid value for `trip_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                trip_id is not None and len(trip_id) > 1024):
            raise ValueError("Invalid value for `trip_id`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                trip_id is not None and len(trip_id) < 1):
            raise ValueError("Invalid value for `trip_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._trip_id = trip_id

    @property
    def executed_orders_in_trip(self):
        """Gets the executed_orders_in_trip of this FactTripProgress.  # noqa: E501

        Rate of fulfilled orders in the trip.  # noqa: E501

        :return: The executed_orders_in_trip of this FactTripProgress.  # noqa: E501
        :rtype: float
        """
        return self._executed_orders_in_trip

    @executed_orders_in_trip.setter
    def executed_orders_in_trip(self, executed_orders_in_trip):
        """Sets the executed_orders_in_trip of this FactTripProgress.

        Rate of fulfilled orders in the trip.  # noqa: E501

        :param executed_orders_in_trip: The executed_orders_in_trip of this FactTripProgress.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and executed_orders_in_trip is None:  # noqa: E501
            raise ValueError("Invalid value for `executed_orders_in_trip`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                executed_orders_in_trip is not None and executed_orders_in_trip > 1):  # noqa: E501
            raise ValueError("Invalid value for `executed_orders_in_trip`, must be a value less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                executed_orders_in_trip is not None and executed_orders_in_trip < 0):  # noqa: E501
            raise ValueError("Invalid value for `executed_orders_in_trip`, must be a value greater than or equal to `0`")  # noqa: E501

        self._executed_orders_in_trip = executed_orders_in_trip

    @property
    def executed_orders_for_current_time(self):
        """Gets the executed_orders_for_current_time of this FactTripProgress.  # noqa: E501

        Ratio of fulfilled orders to the orders that have to be fulfilled at the moment. If more than 1, it is out of the plan.  # noqa: E501

        :return: The executed_orders_for_current_time of this FactTripProgress.  # noqa: E501
        :rtype: float
        """
        return self._executed_orders_for_current_time

    @executed_orders_for_current_time.setter
    def executed_orders_for_current_time(self, executed_orders_for_current_time):
        """Sets the executed_orders_for_current_time of this FactTripProgress.

        Ratio of fulfilled orders to the orders that have to be fulfilled at the moment. If more than 1, it is out of the plan.  # noqa: E501

        :param executed_orders_for_current_time: The executed_orders_for_current_time of this FactTripProgress.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and executed_orders_for_current_time is None:  # noqa: E501
            raise ValueError("Invalid value for `executed_orders_for_current_time`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                executed_orders_for_current_time is not None and executed_orders_for_current_time > 10):  # noqa: E501
            raise ValueError("Invalid value for `executed_orders_for_current_time`, must be a value less than or equal to `10`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                executed_orders_for_current_time is not None and executed_orders_for_current_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `executed_orders_for_current_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._executed_orders_for_current_time = executed_orders_for_current_time

    @property
    def fact_time(self):
        """Gets the fact_time of this FactTripProgress.  # noqa: E501

        Fact time in the [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6) format.  # noqa: E501

        :return: The fact_time of this FactTripProgress.  # noqa: E501
        :rtype: datetime
        """
        return self._fact_time

    @fact_time.setter
    def fact_time(self, fact_time):
        """Sets the fact_time of this FactTripProgress.

        Fact time in the [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6) format.  # noqa: E501

        :param fact_time: The fact_time of this FactTripProgress.  # noqa: E501
        :type: datetime
        """

        self._fact_time = fact_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FactTripProgress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FactTripProgress):
            return True

        return self.to_dict() != other.to_dict()
