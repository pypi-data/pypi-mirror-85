# coding: utf-8

"""
    VeeRoute.UD

    VeeRoute.UD API  # noqa: E501

    The version of the OpenAPI document: 3.7.163551
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_ud.configuration import Configuration


class PaymentDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bill_number_in_shift': 'str',
        'bill_date_time': 'str',
        'customer_email': 'str',
        'bill_amount_total': 'float',
        'fd_number': 'str',
        'fn_number': 'str',
        'qr_code': 'str',
        'payment_type': 'str',
        'approval_code': 'str',
        'kkt_registration_number': 'str',
        'invoice': 'str',
        'f_mark': 'str',
        'f_shift': 'str',
        'handmade_prepayment': 'float',
        'merchandise_lines': 'list[MerchandiseLine]'
    }

    attribute_map = {
        'bill_number_in_shift': 'bill_number_in_shift',
        'bill_date_time': 'bill_date_time',
        'customer_email': 'customer_email',
        'bill_amount_total': 'bill_amount_total',
        'fd_number': 'fd_number',
        'fn_number': 'fn_number',
        'qr_code': 'qr_code',
        'payment_type': 'payment_type',
        'approval_code': 'approval_code',
        'kkt_registration_number': 'kkt_registration_number',
        'invoice': 'invoice',
        'f_mark': 'f_mark',
        'f_shift': 'f_shift',
        'handmade_prepayment': 'handmade_prepayment',
        'merchandise_lines': 'merchandise_lines'
    }

    def __init__(self, bill_number_in_shift=None, bill_date_time=None, customer_email=None, bill_amount_total=None, fd_number=None, fn_number=None, qr_code=None, payment_type=None, approval_code=None, kkt_registration_number=None, invoice=None, f_mark=None, f_shift=None, handmade_prepayment=None, merchandise_lines=None, local_vars_configuration=None):  # noqa: E501
        """PaymentDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bill_number_in_shift = None
        self._bill_date_time = None
        self._customer_email = None
        self._bill_amount_total = None
        self._fd_number = None
        self._fn_number = None
        self._qr_code = None
        self._payment_type = None
        self._approval_code = None
        self._kkt_registration_number = None
        self._invoice = None
        self._f_mark = None
        self._f_shift = None
        self._handmade_prepayment = None
        self._merchandise_lines = None
        self.discriminator = None

        if bill_number_in_shift is not None:
            self.bill_number_in_shift = bill_number_in_shift
        self.bill_date_time = bill_date_time
        if customer_email is not None:
            self.customer_email = customer_email
        if bill_amount_total is not None:
            self.bill_amount_total = bill_amount_total
        if fd_number is not None:
            self.fd_number = fd_number
        if fn_number is not None:
            self.fn_number = fn_number
        if qr_code is not None:
            self.qr_code = qr_code
        if payment_type is not None:
            self.payment_type = payment_type
        if approval_code is not None:
            self.approval_code = approval_code
        if kkt_registration_number is not None:
            self.kkt_registration_number = kkt_registration_number
        if invoice is not None:
            self.invoice = invoice
        if f_mark is not None:
            self.f_mark = f_mark
        if f_shift is not None:
            self.f_shift = f_shift
        if handmade_prepayment is not None:
            self.handmade_prepayment = handmade_prepayment
        self.merchandise_lines = merchandise_lines

    @property
    def bill_number_in_shift(self):
        """Gets the bill_number_in_shift of this PaymentDetails.  # noqa: E501

        Payment document number in the shift.  # noqa: E501

        :return: The bill_number_in_shift of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._bill_number_in_shift

    @bill_number_in_shift.setter
    def bill_number_in_shift(self, bill_number_in_shift):
        """Sets the bill_number_in_shift of this PaymentDetails.

        Payment document number in the shift.  # noqa: E501

        :param bill_number_in_shift: The bill_number_in_shift of this PaymentDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                bill_number_in_shift is not None and len(bill_number_in_shift) > 256):
            raise ValueError("Invalid value for `bill_number_in_shift`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                bill_number_in_shift is not None and len(bill_number_in_shift) < 1):
            raise ValueError("Invalid value for `bill_number_in_shift`, length must be greater than or equal to `1`")  # noqa: E501

        self._bill_number_in_shift = bill_number_in_shift

    @property
    def bill_date_time(self):
        """Gets the bill_date_time of this PaymentDetails.  # noqa: E501

        Time when the payment document was created.  # noqa: E501

        :return: The bill_date_time of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._bill_date_time

    @bill_date_time.setter
    def bill_date_time(self, bill_date_time):
        """Sets the bill_date_time of this PaymentDetails.

        Time when the payment document was created.  # noqa: E501

        :param bill_date_time: The bill_date_time of this PaymentDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bill_date_time is None:  # noqa: E501
            raise ValueError("Invalid value for `bill_date_time`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                bill_date_time is not None and len(bill_date_time) > 256):
            raise ValueError("Invalid value for `bill_date_time`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                bill_date_time is not None and len(bill_date_time) < 1):
            raise ValueError("Invalid value for `bill_date_time`, length must be greater than or equal to `1`")  # noqa: E501

        self._bill_date_time = bill_date_time

    @property
    def customer_email(self):
        """Gets the customer_email of this PaymentDetails.  # noqa: E501

        Customer's email.  # noqa: E501

        :return: The customer_email of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this PaymentDetails.

        Customer's email.  # noqa: E501

        :param customer_email: The customer_email of this PaymentDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                customer_email is not None and len(customer_email) > 256):
            raise ValueError("Invalid value for `customer_email`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                customer_email is not None and len(customer_email) < 1):
            raise ValueError("Invalid value for `customer_email`, length must be greater than or equal to `1`")  # noqa: E501

        self._customer_email = customer_email

    @property
    def bill_amount_total(self):
        """Gets the bill_amount_total of this PaymentDetails.  # noqa: E501

        Total cost.  # noqa: E501

        :return: The bill_amount_total of this PaymentDetails.  # noqa: E501
        :rtype: float
        """
        return self._bill_amount_total

    @bill_amount_total.setter
    def bill_amount_total(self, bill_amount_total):
        """Sets the bill_amount_total of this PaymentDetails.

        Total cost.  # noqa: E501

        :param bill_amount_total: The bill_amount_total of this PaymentDetails.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                bill_amount_total is not None and bill_amount_total < 0):  # noqa: E501
            raise ValueError("Invalid value for `bill_amount_total`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bill_amount_total = bill_amount_total

    @property
    def fd_number(self):
        """Gets the fd_number of this PaymentDetails.  # noqa: E501

        FD number.  # noqa: E501

        :return: The fd_number of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._fd_number

    @fd_number.setter
    def fd_number(self, fd_number):
        """Sets the fd_number of this PaymentDetails.

        FD number.  # noqa: E501

        :param fd_number: The fd_number of this PaymentDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                fd_number is not None and len(fd_number) > 256):
            raise ValueError("Invalid value for `fd_number`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                fd_number is not None and len(fd_number) < 1):
            raise ValueError("Invalid value for `fd_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._fd_number = fd_number

    @property
    def fn_number(self):
        """Gets the fn_number of this PaymentDetails.  # noqa: E501

        FN number.  # noqa: E501

        :return: The fn_number of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._fn_number

    @fn_number.setter
    def fn_number(self, fn_number):
        """Sets the fn_number of this PaymentDetails.

        FN number.  # noqa: E501

        :param fn_number: The fn_number of this PaymentDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                fn_number is not None and len(fn_number) > 256):
            raise ValueError("Invalid value for `fn_number`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                fn_number is not None and len(fn_number) < 1):
            raise ValueError("Invalid value for `fn_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._fn_number = fn_number

    @property
    def qr_code(self):
        """Gets the qr_code of this PaymentDetails.  # noqa: E501

        QR code.  # noqa: E501

        :return: The qr_code of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._qr_code

    @qr_code.setter
    def qr_code(self, qr_code):
        """Sets the qr_code of this PaymentDetails.

        QR code.  # noqa: E501

        :param qr_code: The qr_code of this PaymentDetails.  # noqa: E501
        :type: str
        """

        self._qr_code = qr_code

    @property
    def payment_type(self):
        """Gets the payment_type of this PaymentDetails.  # noqa: E501

        Payment type.  # noqa: E501

        :return: The payment_type of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PaymentDetails.

        Payment type.  # noqa: E501

        :param payment_type: The payment_type of this PaymentDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                payment_type is not None and len(payment_type) > 256):
            raise ValueError("Invalid value for `payment_type`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                payment_type is not None and len(payment_type) < 1):
            raise ValueError("Invalid value for `payment_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._payment_type = payment_type

    @property
    def approval_code(self):
        """Gets the approval_code of this PaymentDetails.  # noqa: E501

        Approval code.  # noqa: E501

        :return: The approval_code of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._approval_code

    @approval_code.setter
    def approval_code(self, approval_code):
        """Sets the approval_code of this PaymentDetails.

        Approval code.  # noqa: E501

        :param approval_code: The approval_code of this PaymentDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                approval_code is not None and len(approval_code) > 256):
            raise ValueError("Invalid value for `approval_code`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                approval_code is not None and len(approval_code) < 1):
            raise ValueError("Invalid value for `approval_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._approval_code = approval_code

    @property
    def kkt_registration_number(self):
        """Gets the kkt_registration_number of this PaymentDetails.  # noqa: E501

        Registration number.  # noqa: E501

        :return: The kkt_registration_number of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._kkt_registration_number

    @kkt_registration_number.setter
    def kkt_registration_number(self, kkt_registration_number):
        """Sets the kkt_registration_number of this PaymentDetails.

        Registration number.  # noqa: E501

        :param kkt_registration_number: The kkt_registration_number of this PaymentDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                kkt_registration_number is not None and len(kkt_registration_number) > 256):
            raise ValueError("Invalid value for `kkt_registration_number`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                kkt_registration_number is not None and len(kkt_registration_number) < 1):
            raise ValueError("Invalid value for `kkt_registration_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._kkt_registration_number = kkt_registration_number

    @property
    def invoice(self):
        """Gets the invoice of this PaymentDetails.  # noqa: E501

        Invoice.  # noqa: E501

        :return: The invoice of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this PaymentDetails.

        Invoice.  # noqa: E501

        :param invoice: The invoice of this PaymentDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                invoice is not None and len(invoice) > 1000):
            raise ValueError("Invalid value for `invoice`, length must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                invoice is not None and len(invoice) < 1):
            raise ValueError("Invalid value for `invoice`, length must be greater than or equal to `1`")  # noqa: E501

        self._invoice = invoice

    @property
    def f_mark(self):
        """Gets the f_mark of this PaymentDetails.  # noqa: E501

        f_mark.  # noqa: E501

        :return: The f_mark of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._f_mark

    @f_mark.setter
    def f_mark(self, f_mark):
        """Sets the f_mark of this PaymentDetails.

        f_mark.  # noqa: E501

        :param f_mark: The f_mark of this PaymentDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                f_mark is not None and len(f_mark) > 1000):
            raise ValueError("Invalid value for `f_mark`, length must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                f_mark is not None and len(f_mark) < 1):
            raise ValueError("Invalid value for `f_mark`, length must be greater than or equal to `1`")  # noqa: E501

        self._f_mark = f_mark

    @property
    def f_shift(self):
        """Gets the f_shift of this PaymentDetails.  # noqa: E501

        f_shift.  # noqa: E501

        :return: The f_shift of this PaymentDetails.  # noqa: E501
        :rtype: str
        """
        return self._f_shift

    @f_shift.setter
    def f_shift(self, f_shift):
        """Sets the f_shift of this PaymentDetails.

        f_shift.  # noqa: E501

        :param f_shift: The f_shift of this PaymentDetails.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                f_shift is not None and len(f_shift) > 1000):
            raise ValueError("Invalid value for `f_shift`, length must be less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                f_shift is not None and len(f_shift) < 1):
            raise ValueError("Invalid value for `f_shift`, length must be greater than or equal to `1`")  # noqa: E501

        self._f_shift = f_shift

    @property
    def handmade_prepayment(self):
        """Gets the handmade_prepayment of this PaymentDetails.  # noqa: E501

        Prepayment amount.  # noqa: E501

        :return: The handmade_prepayment of this PaymentDetails.  # noqa: E501
        :rtype: float
        """
        return self._handmade_prepayment

    @handmade_prepayment.setter
    def handmade_prepayment(self, handmade_prepayment):
        """Sets the handmade_prepayment of this PaymentDetails.

        Prepayment amount.  # noqa: E501

        :param handmade_prepayment: The handmade_prepayment of this PaymentDetails.  # noqa: E501
        :type: float
        """
        if (self.local_vars_configuration.client_side_validation and
                handmade_prepayment is not None and handmade_prepayment < 0):  # noqa: E501
            raise ValueError("Invalid value for `handmade_prepayment`, must be a value greater than or equal to `0`")  # noqa: E501

        self._handmade_prepayment = handmade_prepayment

    @property
    def merchandise_lines(self):
        """Gets the merchandise_lines of this PaymentDetails.  # noqa: E501

        Product data.  # noqa: E501

        :return: The merchandise_lines of this PaymentDetails.  # noqa: E501
        :rtype: list[MerchandiseLine]
        """
        return self._merchandise_lines

    @merchandise_lines.setter
    def merchandise_lines(self, merchandise_lines):
        """Sets the merchandise_lines of this PaymentDetails.

        Product data.  # noqa: E501

        :param merchandise_lines: The merchandise_lines of this PaymentDetails.  # noqa: E501
        :type: list[MerchandiseLine]
        """
        if self.local_vars_configuration.client_side_validation and merchandise_lines is None:  # noqa: E501
            raise ValueError("Invalid value for `merchandise_lines`, must not be `None`")  # noqa: E501

        self._merchandise_lines = merchandise_lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentDetails):
            return True

        return self.to_dict() != other.to_dict()
