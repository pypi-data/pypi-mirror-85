# coding: utf-8

"""
    VeeRoute.UD

    VeeRoute.UD API  # noqa: E501

    The version of the OpenAPI document: 3.7.163543
    Contact: support@veeroute.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from vrt_ud.configuration import Configuration


class PossibleEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location_key': 'str',
        'duration': 'int',
        'reward': 'float',
        'time_window': 'TimeWindow'
    }

    attribute_map = {
        'location_key': 'location_key',
        'duration': 'duration',
        'reward': 'reward',
        'time_window': 'time_window'
    }

    def __init__(self, location_key=None, duration=5, reward=None, time_window=None, local_vars_configuration=None):  # noqa: E501
        """PossibleEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._location_key = None
        self._duration = None
        self._reward = None
        self._time_window = None
        self.discriminator = None

        self.location_key = location_key
        self.duration = duration
        self.reward = reward
        self.time_window = time_window

    @property
    def location_key(self):
        """Gets the location_key of this PossibleEvent.  # noqa: E501

        Key of the location, where the event is possible.  # noqa: E501

        :return: The location_key of this PossibleEvent.  # noqa: E501
        :rtype: str
        """
        return self._location_key

    @location_key.setter
    def location_key(self, location_key):
        """Sets the location_key of this PossibleEvent.

        Key of the location, where the event is possible.  # noqa: E501

        :param location_key: The location_key of this PossibleEvent.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and location_key is None:  # noqa: E501
            raise ValueError("Invalid value for `location_key`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                location_key is not None and len(location_key) > 1024):
            raise ValueError("Invalid value for `location_key`, length must be less than or equal to `1024`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                location_key is not None and len(location_key) < 1):
            raise ValueError("Invalid value for `location_key`, length must be greater than or equal to `1`")  # noqa: E501

        self._location_key = location_key

    @property
    def duration(self):
        """Gets the duration of this PossibleEvent.  # noqa: E501

        Duration of demand completion in minutes.  # noqa: E501

        :return: The duration of this PossibleEvent.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PossibleEvent.

        Duration of demand completion in minutes.  # noqa: E501

        :param duration: The duration of this PossibleEvent.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and duration is None:  # noqa: E501
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                duration is not None and duration < 0):  # noqa: E501
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0`")  # noqa: E501

        self._duration = duration

    @property
    def reward(self):
        """Gets the reward of this PossibleEvent.  # noqa: E501

        Order fulfillment reward.  # noqa: E501

        :return: The reward of this PossibleEvent.  # noqa: E501
        :rtype: float
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this PossibleEvent.

        Order fulfillment reward.  # noqa: E501

        :param reward: The reward of this PossibleEvent.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and reward is None:  # noqa: E501
            raise ValueError("Invalid value for `reward`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                reward is not None and reward < 0):  # noqa: E501
            raise ValueError("Invalid value for `reward`, must be a value greater than or equal to `0`")  # noqa: E501

        self._reward = reward

    @property
    def time_window(self):
        """Gets the time_window of this PossibleEvent.  # noqa: E501


        :return: The time_window of this PossibleEvent.  # noqa: E501
        :rtype: TimeWindow
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this PossibleEvent.


        :param time_window: The time_window of this PossibleEvent.  # noqa: E501
        :type: TimeWindow
        """
        if self.local_vars_configuration.client_side_validation and time_window is None:  # noqa: E501
            raise ValueError("Invalid value for `time_window`, must not be `None`")  # noqa: E501

        self._time_window = time_window

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PossibleEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PossibleEvent):
            return True

        return self.to_dict() != other.to_dict()
