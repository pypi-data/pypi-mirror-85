.\" Man page generated from reStructuredText.
.
.TH "SAMSON" "1" "Aug 06, 2019" "" "samson"
.SH NAME
samson \- cryptography CLI tool
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fBsamson [\-h] [\-\-eval] {hash,pki} ...\fP
.sp
\fBsamson load [\-h] file\fP
.sp
\fBsamson hash [\-h] [\-\-args [ARGS]] type [text]\fP
.sp
\fBsamson pki [\-h] [\-\-args [ARGS]] [\-\-pub] [\-\-encoding [ENCODING]] [\-\-encoding\-args [ENCODING_ARGS]] action type [filename]\fP
.SH DESCRIPTION
.sp
samson is a cryptanalysis and attack library. The intent is to provide a way to quickly prototype and execute cryptographic and side\-channel attacks. samson was born from frustration with existing libraries artificially limiting user control over cryptographic primitives.
This help is for the command\-line interface which provides a subset of samson\(aqs functionality for convenience.
.SH TOP-LEVEL
.sp
\fB\-h\fP \- shows the dynamic help menu
.sp
\fB\-\-eval\fP \- evaluates arguments as Python code
.sp
\fBload\fP \- traverses to the \(aqload\(aq subcommand tree
.sp
\fBhash\fP \- traverses to the \(aqhash\(aq subcommand tree
.sp
\fBpki\fP \- traverses to the \(aqpki\(aq subcommand tree
.SH LOAD SUBCOMMANDS
.sp
\fB\-h\fP \- shows the help menu
\fBfile\fP \- file to execute using samson environment
.SH HASH SUBCOMMANDS
.sp
\fB\-h\fP \- shows the dynamic help menu
.sp
\fB\-\-args [ARGS]\fP \- arguments to pass into the hash function
.sp
\fBtype\fP \- hash type (call \fB\-h\fP for dynamic listing)
.sp
\fBtext\fP \- text/evaluation to hash
.SH PKI SUBCOMMANDS
.sp
\fB\-h\fP \- shows the dynamic help menu
.sp
\fB\-\-args\fP \- arguments to pass into the PKI generation function
.sp
\fB\-\-pub\fP \- output public key
.sp
\fB\-\-encoding [ENCODING]\fP \- encoding to use on outputted keys (call \fB\-h\fP for dynamic listing)
.sp
\fB\-\-encoding\-args [ENCODING_ARGS]\fP \- arguments to pass into the encoding function
.sp
\fBaction\fP \- action to perform (currently \(aqparse\(aq or \(aqgenerate\(aq)
.sp
\fBtype\fP \- PKI type (call \fB\-h\fP for dynamic listing)
.sp
\fBfilename\fP \- file to read PKI data from
.SH EXAMPLES
.sp
\fBsamson load ~/Documents/myfile\fP \- execute \fI~/Documents/myfile\fP in the samson environment
.sp
\fBsamson hash md5 sometext\fP \- generate a hex\-encoded MD5 hash of \fIsometext\fP
.sp
\fBsamson hash keccak texttohash \-\-args=r=1044,c=512,digest_bit_size=256\fP \- generate a hex\-encoded Keccak hash of \fItexttohash\fP
.sp
\fBecho \-ne \(aqhiya\ex01\ex02\(aq | samson hash sha1\fP \- generate a hex\-encoded MD5 hash of \fIhiya\ex01\ex02\fP
.sp
\fBsamson \-\-eval hash sha1 "b\(aqhiya\ex01\ex02\(aq"\fP \- same as above but using evaluation to process the byte literals
.sp
\fBsamson \-\-eval hash sha256 "Bytes(Bytes(0x01234567).zfill(10)[::\-1].int() * 2)"\fP \- complicated evaluation example
.sp
\fBsamson pki generate rsa \-\-args=bits=512\fP \- generate a 512\-bit RSA key with default encodings
.sp
\fBsamson pki generate ecdsa \-\-args=curve=nistp521 \-\-pub\fP \- generate an ECDSA key and return the public with default encodings
.sp
\fBsamson pki generate eddsa \-\-args=curve=ed25519 \-\-encoding=OpenSSH \-\-encoding\-args=user=noone@localhost\fP \- generate an EdDSA key, encode it as an OpenSSH private key, and set the OpenSSH user information to \fInoone@localhost\fP
.sp
\fBopenssl genrsa 1024 | samson pki parse rsa\fP \- generate a PKCS1\-encoded RSA key from OpenSSL and parse it with \fBsamson\fP
.sp
\fBsamson pki parse auto x509_cert.crt\fP \- parse certificate from file and automatically determine the encoding and algorithm
.sp
\fBsamson pki parse auto x509_cert.pem \-\-pub \-\-encoding=X509\fP \- same as above, but output it as a X509 public key
.sp
\fBsamson pki generate rsa \-\-args=bits=2048 \-\-pub \-\-encoding=x509_cert \-\-encoding\-args=ca=1,serial_number=#666#,issuer=#\(aqCN=hiya,O=hiya\-corp,L=Rack City\(aq# | openssl x509 \-text\fP \- generate CA cert with RDN \(aqCN=hiya,O=hiya\-corp,L=Rack City\(aq. To prevent argument parsing of the RDN string, use the preprocessor macro \(aq#\(aq to signify a literal.
.SH AUTHOR
Daniel Cronce
.SH COPYRIGHT
2019, Wildcard Corp
.\" Generated by docutils manpage writer.
.
