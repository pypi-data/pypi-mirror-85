#!python

# Gery Casiez - April 2019

import http.server
import socketserver
from urllib.parse import urlparse, parse_qs
import applescript
import threading
import signal
import sys
from datetime import datetime

PORT = 49552

prevSlide = {'num': -1}
totalTime = 0
once = True

scpt = applescript.AppleScript('''
on run {arg1}
    set toStop to 0
    repeat while toStop = 0 --used for event handling
        tell application "Keynote"    
            -- check whether or not is playing
            if playing then
                tell the front document
                    set mySlide to slide number of current slide
                    do shell script ("curl 'http://localhost:49552/main?slide='" & mySlide)
                    log (mySlide)
                end tell
            end if
        end tell
        delay 1.0 --pause
    end repeat
end run
''')

def threadApplescript():
    scpt.run(PORT)
    return

class MyHandler(http.server.BaseHTTPRequestHandler):

    def do_HEAD(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_GET(self):
        global totalTime
        global once

        path = self.path
        res = urlparse(path)
        if res.path == "/main":
            qs = parse_qs(res.query)
            slide = qs['slide'][0]
            if prevSlide['num'] == -1:
                prevSlide['num'] = slide
                prevSlide['ts'] = datetime.today()
            elif slide != prevSlide['num']:
                diff = datetime.today() - prevSlide['ts']
                hours, remainder = divmod(diff.total_seconds(), 3600)
                minutes, seconds = divmod(remainder, 60)
                if not(once):
                    print("slide %s - %02d:%02d"%(int(slide)-1,minutes, seconds))
                    totalTime = totalTime + diff.total_seconds()
                once = False  
                prevSlide['num'] = slide
                prevSlide['ts'] = datetime.today()
                
        self.respond({'status': 200})

    def handle_http(self, status_code, path):
        self.send_response(status_code)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        content = '''
        <html><head><title>Title goes here.</title></head>
        <body></body></html>
        '''
        return bytes(content, 'UTF-8')

    def log_message(self, format, *args):
        # http.server.BaseHTTPRequestHandler.log_message(self, format, *args)
        return 

    def respond(self, opts):
        response = self.handle_http(opts['status'], self.path)
        self.wfile.write(response)


def signal_handler(sig, frame):
    #print('Shutting down ...')
    hours, remainder = divmod(totalTime, 3600)
    minutes, seconds = divmod(remainder, 60)
    print("Total - %02d:%02d:%02d"%(hours, minutes, seconds))
    sys.exit(0)

if __name__ == "__main__":
    socketserver.TCPServer.allow_reuse_address = True
    httpd = socketserver.TCPServer(("", PORT), MyHandler)
    print("Press CTRL+C to quit")
    signal.signal(signal.SIGINT, signal_handler)
    t = threading.Thread(target=threadApplescript)
    t.setDaemon(True)
    t.start()
    httpd.serve_forever()