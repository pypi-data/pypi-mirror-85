<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      i18n:domain="contenttypes.basic"
      tal:omit-tag="">

    <link rel="stylesheet" type="text/css" href="${python:view.portal_url}/++plone++contenttypes.basic/osmap/leaflet.css">

    <div tal:condition="python:view.value and view.value != '0|0'" id="osmap-widget-map-${python:view.timestamp}" data-value="${python:view.value}" style="height: 500px;"></div>

    <script tal:condition="python:view.value and view.value != '0|0'">
        requirejs.config({
            'baseUrl': PORTAL_URL,            
            'paths':{            
                "leaflet": "++plone++contenttypes.basic/osmap/leaflet",
            }
        })

        require([
            'jquery',
            'leaflet',
        ], function($, L) {
            "use strict";
            // Vars
            var timestamp = ${python:view.timestamp};
            var mapIdSelector = '#osmap-widget-map-'+timestamp;
            var value = parseLatLng($(mapIdSelector).attr('data-value'));

            // Map
            var osmap = L.map('osmap-widget-map-'+timestamp).setView([value.lat, value.lng], 15);
            L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="//osm.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(osmap);

            // Marker
            L.marker([value.lat, value.lng]).addTo(osmap);

            // Resize
            let invalidateSize = setInterval(function(){ 
                if (osmap.getSize().x !== '0')
                    clearInterval(invalidateSize);
                osmap.invalidateSize();
            }, 500)

            // Parse coordinates
            function parseLatLng(input){
                if (typeof input ==  'object') {
                    if (typeof input.lat == 'function')
                        return input.lat() + '|' + input.lng();
                    else
                        return input.lat + '|' + input.lng;
                } else if (typeof input == 'string') {
                    var coors = input.split('|');
                    coors = {
                        lat: parseFloat(coors[0]),
                        lng: parseFloat(coors[1])
                    }
                    return coors
                }
            }

        });
    </script>

</html>