(self["webpackChunk_jupyterlab_application_top"]=self["webpackChunk_jupyterlab_application_top"]||[]).push([[7407,4170],{77407:(e,n,t)=>{"use strict";t.r(n);t.d(n,{default:()=>j});var o=t(44626);var c=t.n(o);var s=t(90265);var r=t.n(s);var i=t(39193);var a=t.n(i);var d=t(54089);var l=t.n(d);var p=t(67674);var u=t.n(p);var m=t(68677);var v=t.n(m);var C=t(21157);var I=t.n(C);var f=t(29103);var b=t.n(f);var h;(function(e){e.open="inspector:open"})(h||(h={}));const w={id:"@jupyterlab/inspector-extension:inspector",requires:[C.ITranslator],optional:[s.ICommandPalette,p.ILauncher,o.ILayoutRestorer],provides:d.IInspector,autoStart:true,activate:(e,n,t,o,c)=>{const r=n.load("jupyterlab");const{commands:i,shell:a}=e;const l=h.open;const p=r.__("Show Contextual Help");const u="inspector";const m=new s.WidgetTracker({namespace:u});let v=null;let C;function I(){if(!C||C.isDisposed){C=new s.MainAreaWidget({content:new d.InspectorPanel({translator:n})});C.id="jp-inspector";C.title.label=p;C.title.icon=f.inspectorIcon;void m.add(C);v=v&&!v.isDisposed?v:null;C.content.source=v}if(!C.isAttached){a.add(C,"main",{activate:false})}a.activateById(C.id);return C}i.addCommand(l,{caption:r.__("Live updating code documentation from the active kernel"),isEnabled:()=>!C||C.isDisposed||!C.isAttached||!C.isVisible,label:p,icon:e=>e.isLauncher?f.inspectorIcon:undefined,execute:()=>I()});if(t){t.addItem({command:l,category:p})}if(o){o.add({command:l,args:{isLauncher:true}})}if(c){void c.restore(m,{command:l,name:()=>"inspector"})}const b=Object.defineProperty({},"source",{get:()=>!C||C.isDisposed?null:C.content.source,set:e=>{v=e&&!e.isDisposed?e:null;if(C&&!C.isDisposed){C.content.source=v}}});return b}};const g={id:"@jupyterlab/inspector-extension:consoles",requires:[d.IInspector,i.IConsoleTracker,o.ILabShell],autoStart:true,activate:(e,n,t,o,c)=>{const s={};t.widgetAdded.connect(((e,n)=>{const t=n.console.sessionContext;const o=n.console.rendermime;const c=new d.KernelConnector({sessionContext:t});const r=new d.InspectionHandler({connector:c,rendermime:o});s[n.id]=r;const i=n.console.promptCell;r.editor=i&&i.editor;n.console.promptCellCreated.connect(((e,n)=>{r.editor=n&&n.editor}));n.disposed.connect((()=>{delete s[n.id];r.dispose()}))}));o.currentChanged.connect(((e,o)=>{const c=o.newValue;if(!c||!t.has(c)){return}const r=s[c.id];if(r){n.source=r}}));e.contextMenu.addItem({command:h.open,selector:".jp-CodeConsole-promptCell"})}};const k={id:"@jupyterlab/inspector-extension:notebooks",requires:[d.IInspector,m.INotebookTracker,o.ILabShell],autoStart:true,activate:(e,n,t,o)=>{const c={};t.widgetAdded.connect(((e,n)=>{const t=n.sessionContext;const o=n.content.rendermime;const s=new d.KernelConnector({sessionContext:t});const r=new d.InspectionHandler({connector:s,rendermime:o});c[n.id]=r;const i=n.content.activeCell;r.editor=i&&i.editor;n.content.activeCellChanged.connect(((e,n)=>{r.editor=n&&n.editor}));n.disposed.connect((()=>{delete c[n.id];r.dispose()}))}));o.currentChanged.connect(((e,o)=>{const s=o.newValue;if(!s||!t.has(s)){return}const r=c[s.id];if(r){n.source=r}}));e.contextMenu.addItem({command:h.open,selector:".jp-Notebook"})}};const x=[w,g,k];const j=x}}]);