(self["webpackChunk_jupyterlab_application_top"]=self["webpackChunk_jupyterlab_application_top"]||[]).push([[962],{60962:(e,t,a)=>{"use strict";a.r(t);a.d(t,{RenderedPDF:()=>l,rendererFactory:()=>p,default:()=>b});var s=a(52191);var o=a.n(s);var i=a(58578);var n=a.n(i);var r=a(86992);var d=a.n(r);const c="application/pdf";class l extends r.Widget{constructor(){super();this._base64="";this._disposable=null;this._ready=new s.PromiseDelegate;this.addClass("jp-PDFContainer");const e=document.createElement("iframe");this.node.appendChild(e);e.onload=()=>{const t=e.contentWindow.document.createElement("body");t.style.margin="0px";e.contentWindow.document.body=t;this._object=e.contentWindow.document.createElement("object");this._object.type=c;this._object.width="100%";this._object.height="100%";t.appendChild(this._object);this._ready.resolve(void 0)}}async renderModel(e){await this._ready.promise;const t=e.data[c];if(!t||t.length===this._base64.length&&t===this._base64){if(e.metadata.fragment&&this._object.data){const t=this._object.data;this._object.data=`${t.split("#")[0]}${e.metadata.fragment}`}if(_.IS_FIREFOX){this._object.data=this._object.data}return Promise.resolve(void 0)}this._base64=t;const a=_.b64toBlob(t,c);if(this._disposable){this._disposable.dispose()}let s=URL.createObjectURL(a);if(e.metadata.fragment){s+=e.metadata.fragment}this._object.data=s;this._disposable=new i.DisposableDelegate((()=>{try{URL.revokeObjectURL(s)}catch(e){}}));return}onBeforeHide(){if(_.IS_FIREFOX){this._object.data=this._object.data.split("#")[0]}}dispose(){if(this._disposable){this._disposable.dispose()}super.dispose()}}const p={safe:false,mimeTypes:[c],defaultRank:100,createRenderer:e=>new l};const h=[{id:"@jupyterlab/pdf-extension:factory",rendererFactory:p,dataType:"string",documentWidgetFactoryOptions:{name:"PDF",modelName:"base64",primaryFileType:"PDF",fileTypes:["PDF"],defaultFor:["PDF"]}}];const b=h;var _;(function(e){e.IS_FIREFOX=/Firefox/.test(navigator.userAgent);function t(e,t="",a=512){const s=atob(e);const o=[];for(let i=0;i<s.length;i+=a){const e=s.slice(i,i+a);const t=new Array(e.length);for(let a=0;a<e.length;a++){t[a]=e.charCodeAt(a)}const n=new Uint8Array(t);o.push(n)}return new Blob(o,{type:t})}e.b64toBlob=t})(_||(_={}))}}]);