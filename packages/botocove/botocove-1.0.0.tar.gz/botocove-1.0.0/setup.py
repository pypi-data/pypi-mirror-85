# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['botocove']

package_data = \
{'': ['*']}

install_requires = \
['boto3>=1.16.12,<2.0.0']

setup_kwargs = {
    'name': 'botocove',
    'version': '1.0.0',
    'description': 'A decorator to allow running a function against all AWS accounts in an organization',
    'long_description': '# Botocove\n\nRun code against all AWS accounts in an organization asyncronously.\n\nA simple decorator for function to run them against all AWS accounts in an \norganization. Removes time and complexity burden, can access and\nrun commands against 200 organization accounts in 10 seconds. Extends `boto3`\nusing `async.io`.\n\nWrap a function in `@cove` and inject an assumed role session from every AWS \naccount in an org and return results to a dictionary.\n\n**Warning**: this tool gives you the potential to make dangerous changes\nat scale. **Test carefully and make idempotent changes**! Please read available\narguments to understand safe experimentation with this package.\n\n## Requirements\n\nAn IAM user in an AWS Organization master account that can assume roles in\norganization member AWS accounts.\n\nCredential requirements are:\n\nIn the organization master account:\n* IAM permissions `sts:assumerole`, `sts:get-caller-identity` and `organizations:list-accounts`\n\nIn the organization accounts:\n* A trust relationship to the calling account\n* IAM permissions required for your wrapped function.\n\n## Quickstart\nA function written to interact with a `boto3 session` can now be called with\na `session` from every account required in your AWS organization, assuming\na role in each account.\n\nFor example:\n\nThis function takes a boto3 `session` and gets all IAM users from a single AWS\naccount\n\n```\nimport boto3\n\n\ndef get_iam_users(session):\n    iam = session.client("iam", region_name="eu-west-1")\n    # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iam.html#IAM.Client.list_users\n    all_users = iam.get_paginator("list_users").paginate().build_full_result()\n\n    return all_users\n\ndef main():\n    session = boto3.session.Session(profile_name="my_dev_account")\n    users = get_iam_users(session)\n    print(users) # A single account\'s IAM users\n```\n\nNow with `@cove`: a session for every account in the organization is injected\nby the decorator.\n\n```\nimport boto3\nfrom botocove import cove\n\n# Only required if credentials in the boto3 chain are not suitable\norg_session = boto3.session.Session(profile_name="my_org_master")\n\n\n@cove(org_session=org_session)\ndef get_iam_users(session):\n    iam = session.client("iam", region_name="eu-west-1")\n    # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iam.html#IAM.Client.list_users\n    all_users = iam.get_paginator("list_users").paginate().build_full_result()\n\n    return all_users\n\ndef main():\n    all_results = get_iam_users()\n    # A list of dictionaries of all responses from above get_iam_users() for \n    # every account in the AWS organization and their account details\n    print(all_results["Results"])\n    # A list of dictionaries of any exceptions raised by your wrapped function\n    # and the account\'s details\n    print(all_results["Exceptions"])\n    # A list of dictionaries of all accounts that could not be assumed into\n    # and that account\'s details\n    print(all_results["FailedAssumeRole"])\n```\n\n## Arguments\n\n### Cove\n`@cove`: Uses boto3 credential chain to get every AWS account within the organization.\nEquivialent to:\n`@cove(target_ids=None, ignore_ids=None, rolename=None, org_session=None, raise_exception=False)`\n\n`target_ids`: Optional[List[str]]\nA list of AWS accounts as strings to attempt to assume role in to. As\ndefault, attempts to use every available account ID in an AWS organization.\n\n`ignore_ids`: Optional[List[str]]\nA list of AWS account ID\'s that will not attempt assumption in to. Allows IDs to be\nignored. Works with or without `target_ids`.\n\n`rolename`: Optional[str]\nAn IAM role name that will be attempted to assume in all target accounts. Defaults to\nthe AWS default, `OrganizationAccountAccessRole`\n\n`org_session`: Optional[Session]\nA Boto3 `Session` object. If not provided, defaults to standard boto3 credential chain.\n\n`raise_exception`: bool\nDefaults to False. Default behaviour is that exceptions are not raised from\ndecorated function. This is due to `cove` running asynchronously and preferring\nto resolve all tasks and report their results instead of exiting early.\n\n`raise_exception=True` will allow a full stack trace to escape on the first\nexception seen; but will not gracefully or consistently interrupt running tasks.\n It is vital to run interruptable, idempotent code with this argument as `True`.\n\n### CoveSession\n\nCove supplies an enriched Boto3 session to each function called. Account details\nare available with the `session_information` attribute.\n\nOtherwise, it functions exactly as calling `boto3` would.\n\n```\n@cove()\ndef get_all_iam_users(session: CoveSession):\n    print(session.session_information) # Outputs a dict of known information\n    iam = session.client("iam", region_name="eu-west-1")\n    # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iam.html#IAM.Client.list_users\n    all_users = iam.get_paginator("list_users").paginate().build_full_result()\n\n    return all_users\n```\n\n## Return values\n\nWrapped functions return a dictionary. Each value contains List[Dict[str, Any]]:\n```\n{\n    "Results": results: \n    "Exceptions": exceptions,\n    "FailedAssumeRole": invalid_sessions,\n}\n```\nAn example of cove_output["Results"]:\n```\n[\n    {\n    \'Id\': \'123456789010\',\n    \'Email\': \'email@address.com\',\n    \'Name\': \'account-name\',\n    \'Status\': \'ACTIVE\',\n    \'AssumeRoleSuccess\': True,\n    \'Result\': all_users # Result of above func\n    } # A dictionary per account\n]\n```\n\n\n### botocove?\n\nIt turns out that the Amazon\'s Boto dolphins are soliditary or small-group animals,\nunlike the large pods of dolphins in the oceans. This killed my "large group of boto"\nidea, so the next best idea was where might they all shelter together... a cove!',
    'author': 'Dave Connell',
    'author_email': 'daveconn41@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/connelldave/botocove',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
