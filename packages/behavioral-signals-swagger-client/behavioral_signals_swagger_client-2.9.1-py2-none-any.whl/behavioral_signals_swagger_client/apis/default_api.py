# coding: utf-8

"""
    CallER API

    CallER API in the cloud service

    OpenAPI spec version: 3.0.1
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_process_info(self, cid, pid, **kwargs):
        """
        Returns process info for pid by client request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_process_info(cid, pid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_process_info_with_http_info(cid, pid, **kwargs)
        else:
            (data) = self.get_process_info_with_http_info(cid, pid, **kwargs)
            return data

    def get_process_info_with_http_info(self, cid, pid, **kwargs):
        """
        Returns process info for pid by client request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_process_info_with_http_info(cid, pid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_info`")
        # verify the required parameter 'pid' is set
        if ('pid' not in params) or (params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_info`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']
        if 'pid' in params:
            path_params['pid'] = params['pid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/{pid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Process',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_process_results(self, cid, pid, **kwargs):
        """
        Returns process results in JSON for pid by client request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_process_results(cid, pid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_process_results_with_http_info(cid, pid, **kwargs)
        else:
            (data) = self.get_process_results_with_http_info(cid, pid, **kwargs)
            return data

    def get_process_results_with_http_info(self, cid, pid, **kwargs):
        """
        Returns process results in JSON for pid by client request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_process_results_with_http_info(cid, pid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSON
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_results`")
        # verify the required parameter 'pid' is set
        if ('pid' not in params) or (params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_results`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']
        if 'pid' in params:
            path_params['pid'] = params['pid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/{pid}/result', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResultJSON',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_process_results_asr(self, cid, pid, **kwargs):
        """
        Returns speech-to-text transcription in JSON for process
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_process_results_asr(cid, pid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONASR
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_process_results_asr_with_http_info(cid, pid, **kwargs)
        else:
            (data) = self.get_process_results_asr_with_http_info(cid, pid, **kwargs)
            return data

    def get_process_results_asr_with_http_info(self, cid, pid, **kwargs):
        """
        Returns speech-to-text transcription in JSON for process
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_process_results_asr_with_http_info(cid, pid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONASR
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_results_asr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_results_asr`")
        # verify the required parameter 'pid' is set
        if ('pid' not in params) or (params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_results_asr`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']
        if 'pid' in params:
            path_params['pid'] = params['pid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/{pid}/resultasr', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResultJSONASR',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_process_results_demo(self, cid, pid, **kwargs):
        """
        Returns process results for demo in JSON for pid by client request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_process_results_demo(cid, pid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONFrames
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_process_results_demo_with_http_info(cid, pid, **kwargs)
        else:
            (data) = self.get_process_results_demo_with_http_info(cid, pid, **kwargs)
            return data

    def get_process_results_demo_with_http_info(self, cid, pid, **kwargs):
        """
        Returns process results for demo in JSON for pid by client request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_process_results_demo_with_http_info(cid, pid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONFrames
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_results_demo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_results_demo`")
        # verify the required parameter 'pid' is set
        if ('pid' not in params) or (params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_results_demo`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']
        if 'pid' in params:
            path_params['pid'] = params['pid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/{pid}/resultdemo', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResultJSONFrames',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_process_results_frames(self, cid, pid, **kwargs):
        """
        Returns process frames results in JSON for pid by client request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_process_results_frames(cid, pid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONFrames
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_process_results_frames_with_http_info(cid, pid, **kwargs)
        else:
            (data) = self.get_process_results_frames_with_http_info(cid, pid, **kwargs)
            return data

    def get_process_results_frames_with_http_info(self, cid, pid, **kwargs):
        """
        Returns process frames results in JSON for pid by client request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_process_results_frames_with_http_info(cid, pid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of the process request (required)
        :return: ResultJSONFrames
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_process_results_frames" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_process_results_frames`")
        # verify the required parameter 'pid' is set
        if ('pid' not in params) or (params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_process_results_frames`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']
        if 'pid' in params:
            path_params['pid'] = params['pid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/{pid}/resultframes', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResultJSONFrames',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def info_client(self, cid, **kwargs):
        """
        Return a client's details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.info_client(cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: id of the requested client (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.info_client_with_http_info(cid, **kwargs)
        else:
            (data) = self.info_client_with_http_info(cid, **kwargs)
            return data

    def info_client_with_http_info(self, cid, **kwargs):
        """
        Return a client's details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.info_client_with_http_info(cid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: id of the requested client (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method info_client" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `info_client`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Client',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_feedback(self, cid, in_json, **kwargs):
        """
        Post feedback request for a process. It returns a URL with the form to fill in.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_feedback(cid, in_json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param InputFeedback in_json: The input JSON (required)
        :return: ResponseFeedback
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_feedback_with_http_info(cid, in_json, **kwargs)
        else:
            (data) = self.post_feedback_with_http_info(cid, in_json, **kwargs)
            return data

    def post_feedback_with_http_info(self, cid, in_json, **kwargs):
        """
        Post feedback request for a process. It returns a URL with the form to fill in.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_feedback_with_http_info(cid, in_json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param InputFeedback in_json: The input JSON (required)
        :return: ResponseFeedback
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'in_json']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_feedback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `post_feedback`")
        # verify the required parameter 'in_json' is set
        if ('in_json' not in params) or (params['in_json'] is None):
            raise ValueError("Missing the required parameter `in_json` when calling `post_feedback`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'in_json' in params:
            body_params = params['in_json']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/feedback', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ResponseFeedback',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_feedback(self, cid, form_code, in_json, **kwargs):
        """
        Sets the feedback JSON for a request with given formCode
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_feedback(cid, form_code, in_json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param str form_code: Form code to update the feedback JSON (required)
        :param str in_json: the input JSON read as string (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_feedback_with_http_info(cid, form_code, in_json, **kwargs)
        else:
            (data) = self.put_feedback_with_http_info(cid, form_code, in_json, **kwargs)
            return data

    def put_feedback_with_http_info(self, cid, form_code, in_json, **kwargs):
        """
        Sets the feedback JSON for a request with given formCode
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_feedback_with_http_info(cid, form_code, in_json, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param str form_code: Form code to update the feedback JSON (required)
        :param str in_json: the input JSON read as string (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'form_code', 'in_json']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_feedback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `put_feedback`")
        # verify the required parameter 'form_code' is set
        if ('form_code' not in params) or (params['form_code'] is None):
            raise ValueError("Missing the required parameter `form_code` when calling `put_feedback`")
        # verify the required parameter 'in_json' is set
        if ('in_json' not in params) or (params['in_json'] is None):
            raise ValueError("Missing the required parameter `in_json` when calling `put_feedback`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']
        if 'form_code' in params:
            path_params['formCode'] = params['form_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'in_json' in params:
            body_params = params['in_json']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/feedback/{formCode}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def send_process_audio(self, cid, adata, channels, calldirection, **kwargs):
        """
        Sends a new caller request with audio file upload
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.send_process_audio(cid, adata, channels, calldirection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param file adata: Audio file to process (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_team: Agent’s team ID
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.send_process_audio_with_http_info(cid, adata, channels, calldirection, **kwargs)
        else:
            (data) = self.send_process_audio_with_http_info(cid, adata, channels, calldirection, **kwargs)
            return data

    def send_process_audio_with_http_info(self, cid, adata, channels, calldirection, **kwargs):
        """
        Sends a new caller request with audio file upload
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.send_process_audio_with_http_info(cid, adata, channels, calldirection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param file adata: Audio file to process (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_team: Agent’s team ID
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'adata', 'channels', 'calldirection', 'name', 'customer_id', 'customer_ind', 'agent_team', 'agent_id', 'campaign_id', 'calltype', 'ani', 'calltime', 'timezone', 'storedata', 'tag']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_process_audio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `send_process_audio`")
        # verify the required parameter 'adata' is set
        if ('adata' not in params) or (params['adata'] is None):
            raise ValueError("Missing the required parameter `adata` when calling `send_process_audio`")
        # verify the required parameter 'channels' is set
        if ('channels' not in params) or (params['channels'] is None):
            raise ValueError("Missing the required parameter `channels` when calling `send_process_audio`")
        # verify the required parameter 'calldirection' is set
        if ('calldirection' not in params) or (params['calldirection'] is None):
            raise ValueError("Missing the required parameter `calldirection` when calling `send_process_audio`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))
        if 'customer_ind' in params:
            query_params.append(('customerInd', params['customer_ind']))
        if 'agent_team' in params:
            query_params.append(('agentTeam', params['agent_team']))
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))
        if 'campaign_id' in params:
            query_params.append(('campaignId', params['campaign_id']))
        if 'calltype' in params:
            query_params.append(('calltype', params['calltype']))
        if 'ani' in params:
            query_params.append(('ANI', params['ani']))
        if 'calltime' in params:
            query_params.append(('calltime', params['calltime']))
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))
        if 'channels' in params:
            query_params.append(('channels', params['channels']))
        if 'calldirection' in params:
            query_params.append(('calldirection', params['calldirection']))
        if 'storedata' in params:
            query_params.append(('storedata', params['storedata']))
        if 'tag' in params:
            query_params.append(('tag', params['tag']))
            collection_formats['tag'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'adata' in params:
            local_var_files['adata'] = params['adata']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/audio', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Process',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def send_process_tcp(self, cid, channels, calldirection, **kwargs):
        """
        Sends a new caller request in tcp mode
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.send_process_tcp(cid, channels, calldirection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_team: Agent’s team ID
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.send_process_tcp_with_http_info(cid, channels, calldirection, **kwargs)
        else:
            (data) = self.send_process_tcp_with_http_info(cid, channels, calldirection, **kwargs)
            return data

    def send_process_tcp_with_http_info(self, cid, channels, calldirection, **kwargs):
        """
        Sends a new caller request in tcp mode
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.send_process_tcp_with_http_info(cid, channels, calldirection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_team: Agent’s team ID
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'channels', 'calldirection', 'name', 'customer_id', 'customer_ind', 'agent_team', 'agent_id', 'campaign_id', 'calltype', 'ani', 'calltime', 'timezone', 'storedata', 'tag']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_process_tcp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `send_process_tcp`")
        # verify the required parameter 'channels' is set
        if ('channels' not in params) or (params['channels'] is None):
            raise ValueError("Missing the required parameter `channels` when calling `send_process_tcp`")
        # verify the required parameter 'calldirection' is set
        if ('calldirection' not in params) or (params['calldirection'] is None):
            raise ValueError("Missing the required parameter `calldirection` when calling `send_process_tcp`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))
        if 'customer_ind' in params:
            query_params.append(('customerInd', params['customer_ind']))
        if 'agent_team' in params:
            query_params.append(('agentTeam', params['agent_team']))
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))
        if 'campaign_id' in params:
            query_params.append(('campaignId', params['campaign_id']))
        if 'calltype' in params:
            query_params.append(('calltype', params['calltype']))
        if 'ani' in params:
            query_params.append(('ANI', params['ani']))
        if 'calltime' in params:
            query_params.append(('calltime', params['calltime']))
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))
        if 'channels' in params:
            query_params.append(('channels', params['channels']))
        if 'calldirection' in params:
            query_params.append(('calldirection', params['calldirection']))
        if 'storedata' in params:
            query_params.append(('storedata', params['storedata']))
        if 'tag' in params:
            query_params.append(('tag', params['tag']))
            collection_formats['tag'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/tcp', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Process',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def send_process_url(self, cid, url, channels, calldirection, **kwargs):
        """
        Sends a new caller request with a url for data
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.send_process_url(cid, url, channels, calldirection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param str url: Audio url to process (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_team: Agent’s team ID
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.send_process_url_with_http_info(cid, url, channels, calldirection, **kwargs)
        else:
            (data) = self.send_process_url_with_http_info(cid, url, channels, calldirection, **kwargs)
            return data

    def send_process_url_with_http_info(self, cid, url, channels, calldirection, **kwargs):
        """
        Sends a new caller request with a url for data
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.send_process_url_with_http_info(cid, url, channels, calldirection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param str url: Audio url to process (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_team: Agent’s team ID
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'url', 'channels', 'calldirection', 'name', 'customer_id', 'customer_ind', 'agent_team', 'agent_id', 'campaign_id', 'calltype', 'ani', 'calltime', 'timezone', 'storedata', 'tag']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_process_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `send_process_url`")
        # verify the required parameter 'url' is set
        if ('url' not in params) or (params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `send_process_url`")
        # verify the required parameter 'channels' is set
        if ('channels' not in params) or (params['channels'] is None):
            raise ValueError("Missing the required parameter `channels` when calling `send_process_url`")
        # verify the required parameter 'calldirection' is set
        if ('calldirection' not in params) or (params['calldirection'] is None):
            raise ValueError("Missing the required parameter `calldirection` when calling `send_process_url`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = []
        if 'url' in params:
            query_params.append(('url', params['url']))
        if 'name' in params:
            query_params.append(('name', params['name']))
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))
        if 'customer_ind' in params:
            query_params.append(('customerInd', params['customer_ind']))
        if 'agent_team' in params:
            query_params.append(('agentTeam', params['agent_team']))
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))
        if 'campaign_id' in params:
            query_params.append(('campaignId', params['campaign_id']))
        if 'calltype' in params:
            query_params.append(('calltype', params['calltype']))
        if 'ani' in params:
            query_params.append(('ANI', params['ani']))
        if 'calltime' in params:
            query_params.append(('calltime', params['calltime']))
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))
        if 'channels' in params:
            query_params.append(('channels', params['channels']))
        if 'calldirection' in params:
            query_params.append(('calldirection', params['calldirection']))
        if 'storedata' in params:
            query_params.append(('storedata', params['storedata']))
        if 'tag' in params:
            query_params.append(('tag', params['tag']))
            collection_formats['tag'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/url', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Process',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def send_process_video(self, cid, url, channels, calldirection, **kwargs):
        """
        Sends a new caller request to process a video file from url
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.send_process_video(cid, url, channels, calldirection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param str url: Video url to process (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_team: Agent’s team ID
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.send_process_video_with_http_info(cid, url, channels, calldirection, **kwargs)
        else:
            (data) = self.send_process_video_with_http_info(cid, url, channels, calldirection, **kwargs)
            return data

    def send_process_video_with_http_info(self, cid, url, channels, calldirection, **kwargs):
        """
        Sends a new caller request to process a video file from url
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.send_process_video_with_http_info(cid, url, channels, calldirection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param str url: Video url to process (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_team: Agent’s team ID
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'url', 'channels', 'calldirection', 'name', 'customer_id', 'customer_ind', 'agent_team', 'agent_id', 'campaign_id', 'calltype', 'ani', 'calltime', 'timezone', 'storedata', 'tag']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_process_video" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `send_process_video`")
        # verify the required parameter 'url' is set
        if ('url' not in params) or (params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `send_process_video`")
        # verify the required parameter 'channels' is set
        if ('channels' not in params) or (params['channels'] is None):
            raise ValueError("Missing the required parameter `channels` when calling `send_process_video`")
        # verify the required parameter 'calldirection' is set
        if ('calldirection' not in params) or (params['calldirection'] is None):
            raise ValueError("Missing the required parameter `calldirection` when calling `send_process_video`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']

        query_params = []
        if 'url' in params:
            query_params.append(('url', params['url']))
        if 'name' in params:
            query_params.append(('name', params['name']))
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))
        if 'customer_ind' in params:
            query_params.append(('customerInd', params['customer_ind']))
        if 'agent_team' in params:
            query_params.append(('agentTeam', params['agent_team']))
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))
        if 'campaign_id' in params:
            query_params.append(('campaignId', params['campaign_id']))
        if 'calltype' in params:
            query_params.append(('calltype', params['calltype']))
        if 'ani' in params:
            query_params.append(('ANI', params['ani']))
        if 'calltime' in params:
            query_params.append(('calltime', params['calltime']))
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))
        if 'channels' in params:
            query_params.append(('channels', params['channels']))
        if 'calldirection' in params:
            query_params.append(('calldirection', params['calldirection']))
        if 'storedata' in params:
            query_params.append(('storedata', params['storedata']))
        if 'tag' in params:
            query_params.append(('tag', params['tag']))
            collection_formats['tag'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/video', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Process',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def service_status(self, **kwargs):
        """
        Return status of the service
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.service_status(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.service_status_with_http_info(**kwargs)
        else:
            (data) = self.service_status_with_http_info(**kwargs)
            return data

    def service_status_with_http_info(self, **kwargs):
        """
        Return status of the service
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.service_status_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Status',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_process_url(self, cid, pid, url, channels, calldirection, **kwargs):
        """
        Update and optionally reprocess a previously posted request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_process_url(cid, pid, url, channels, calldirection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of process to update/reprocess (required)
        :param str url: Audio url to use on reprocessing (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_team: Agent’s team ID
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :param list[str] rerun: Force component reprocessing list
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_process_url_with_http_info(cid, pid, url, channels, calldirection, **kwargs)
        else:
            (data) = self.update_process_url_with_http_info(cid, pid, url, channels, calldirection, **kwargs)
            return data

    def update_process_url_with_http_info(self, cid, pid, url, channels, calldirection, **kwargs):
        """
        Update and optionally reprocess a previously posted request
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_process_url_with_http_info(cid, pid, url, channels, calldirection, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cid: ID of client giving request (required)
        :param int pid: ID of process to update/reprocess (required)
        :param str url: Audio url to use on reprocessing (required)
        :param int channels: number of channels (required)
        :param int calldirection: 1 for incoming,2 for outgoing (required)
        :param str name: Optionally, a name for the job request
        :param str customer_id: The Customer's ID
        :param str customer_ind: The Customer's Industry Index
        :param str agent_team: Agent’s team ID
        :param str agent_id: Agent's ID
        :param str campaign_id: Campaign's ID
        :param str calltype: The type of call: LA (live answer), AM (answering machine)
        :param str ani: ANI information
        :param datetime calltime: The date and time the call took place
        :param int timezone: The timezone of the call as integer value
        :param int storedata: Request to store incoming process data on a per job basis. If the client has not enabled the datastore option or enabled for all requests (per client basis) then this value is ignored. Can take values 0=no storage, 1=yes.
        :param list[str] tag: Client defined tagging of processing job
        :param list[str] rerun: Force component reprocessing list
        :return: Process
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'pid', 'url', 'channels', 'calldirection', 'name', 'customer_id', 'customer_ind', 'agent_team', 'agent_id', 'campaign_id', 'calltype', 'ani', 'calltime', 'timezone', 'storedata', 'tag', 'rerun']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_process_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params) or (params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `update_process_url`")
        # verify the required parameter 'pid' is set
        if ('pid' not in params) or (params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `update_process_url`")
        # verify the required parameter 'url' is set
        if ('url' not in params) or (params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `update_process_url`")
        # verify the required parameter 'channels' is set
        if ('channels' not in params) or (params['channels'] is None):
            raise ValueError("Missing the required parameter `channels` when calling `update_process_url`")
        # verify the required parameter 'calldirection' is set
        if ('calldirection' not in params) or (params['calldirection'] is None):
            raise ValueError("Missing the required parameter `calldirection` when calling `update_process_url`")


        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']
        if 'pid' in params:
            path_params['pid'] = params['pid']

        query_params = []
        if 'url' in params:
            query_params.append(('url', params['url']))
        if 'name' in params:
            query_params.append(('name', params['name']))
        if 'customer_id' in params:
            query_params.append(('customerId', params['customer_id']))
        if 'customer_ind' in params:
            query_params.append(('customerInd', params['customer_ind']))
        if 'agent_team' in params:
            query_params.append(('agentTeam', params['agent_team']))
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))
        if 'campaign_id' in params:
            query_params.append(('campaignId', params['campaign_id']))
        if 'calltype' in params:
            query_params.append(('calltype', params['calltype']))
        if 'ani' in params:
            query_params.append(('ANI', params['ani']))
        if 'calltime' in params:
            query_params.append(('calltime', params['calltime']))
        if 'timezone' in params:
            query_params.append(('timezone', params['timezone']))
        if 'channels' in params:
            query_params.append(('channels', params['channels']))
        if 'calldirection' in params:
            query_params.append(('calldirection', params['calldirection']))
        if 'storedata' in params:
            query_params.append(('storedata', params['storedata']))
        if 'tag' in params:
            query_params.append(('tag', params['tag']))
            collection_formats['tag'] = 'multi'
        if 'rerun' in params:
            query_params.append(('rerun', params['rerun']))
            collection_formats['rerun'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api('/client/{cid}/process/url/{pid}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Process',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
