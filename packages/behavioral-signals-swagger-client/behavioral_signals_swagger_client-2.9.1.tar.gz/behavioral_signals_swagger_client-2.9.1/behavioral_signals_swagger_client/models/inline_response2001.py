# coding: utf-8

"""
    Oliver API

    Oliver web API service  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from behavioral_signals_swagger_client.models.array_of_customers import ArrayOfCustomers  # noqa: F401,E501
from behavioral_signals_swagger_client.models.pagination_response import PaginationResponse  # noqa: F401,E501


class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pagination_response': 'PaginationResponse',
        'customers': 'ArrayOfCustomers'
    }

    attribute_map = {
        'pagination_response': 'PaginationResponse',
        'customers': 'customers'
    }

    def __init__(self, pagination_response=None, customers=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501

        self._pagination_response = None
        self._customers = None
        self.discriminator = None

        if pagination_response is not None:
            self.pagination_response = pagination_response
        self.customers = customers

    @property
    def pagination_response(self):
        """Gets the pagination_response of this InlineResponse2001.  # noqa: E501


        :return: The pagination_response of this InlineResponse2001.  # noqa: E501
        :rtype: PaginationResponse
        """
        return self._pagination_response

    @pagination_response.setter
    def pagination_response(self, pagination_response):
        """Sets the pagination_response of this InlineResponse2001.


        :param pagination_response: The pagination_response of this InlineResponse2001.  # noqa: E501
        :type: PaginationResponse
        """

        self._pagination_response = pagination_response

    @property
    def customers(self):
        """Gets the customers of this InlineResponse2001.  # noqa: E501


        :return: The customers of this InlineResponse2001.  # noqa: E501
        :rtype: ArrayOfCustomers
        """
        return self._customers

    @customers.setter
    def customers(self, customers):
        """Sets the customers of this InlineResponse2001.


        :param customers: The customers of this InlineResponse2001.  # noqa: E501
        :type: ArrayOfCustomers
        """
        if customers is None:
            raise ValueError("Invalid value for `customers`, must not be `None`")  # noqa: E501

        self._customers = customers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
