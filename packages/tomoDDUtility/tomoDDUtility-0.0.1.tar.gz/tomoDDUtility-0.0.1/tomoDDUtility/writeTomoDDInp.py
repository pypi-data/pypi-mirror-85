'''
Input: Vp_model.dat, Vs_model, MOD

Output: BaseMOD for tomoDD_TimeLapse program

Author: HuJing
'''
def createMOD(vpname,vsname,i):
    import numpy as np
    import subprocess
    vp = np.loadtxt(vpname)
    vs = np.loadtxt(vsname)
    vps = vp/vs
    MOD_heads = subprocess.getoutput("head -n4 MOD")
    with open("BaseMOD"+str(i),"w") as f:
        f.write(MOD_heads+"\n")
        for x in vp:
            string=" ".join(['{:.2f}'.format(i) for i in x])
            f.write(string+"\n")
        for x in vps:
            string=" ".join(['{:.2f}'.format(i) for i in x])
            f.write(string+"\n")


def createTomoDDInp(ctrlpara,iteration_para,i):
    with open("tomoDD09.inp"+str(i),"w") as f:
        f.write("*----input file selection\n")
        f.write("* cross correlation diff times\n")
        f.write(ctrlpara['cc_evpr']+"\n") 
        f.write("* catalog  diff times\n")
        f.write(ctrlpara['ct_evpr']+"\n") 
        f.write("* absolute time\n")
        f.write(ctrlpara['absfile']+"\n") 
        f.write("* event file\n")
        f.write(ctrlpara['eventfile']+"\n")    
        f.write(ctrlpara['stafile']+"\n")    
        f.write(ctrlpara['locfile']+"\n") 
        f.write(ctrlpara['relocfile']+"\n") 
        f.write(ctrlpara['sta_information']+"\n") 
        f.write(ctrlpara['residualfile']+"\n") 
        f.write("* source parameter information:\n* hypo3VDD.src\n\n")
        f.write(ctrlpara['Velfile']+"\n")
        f.write(ctrlpara['Vpfile']+"\n")
        f.write(ctrlpara['Vsfile']+"\n")
        f.write("*--- data type selection\n")
        f.write("* IDAT:  0 = synthetics; 1= cross corr; 2= catalog; 3= cross & cat\n" )
        f.write("* IPHA: 1= P; 2= S; 3= P&S\n")
        f.write("* DIST:max dist [km] between cluster centroid and station\n")
        f.write("* IDAT  IPHA  DIST\n")
        f.write('{}\t{}\t{}\n'.format(ctrlpara["IDAT"],ctrlpara["IPHA"],ctrlpara["DIST"]))
        f.write("*--- event clustering:\n") 
        f.write("* OBSCC:    min # of obs/pair for crosstime data (0= no clustering)\n")
        f.write("* OBSCT:    min # of obs/pair for network data (0= no clustering)\n")
        f.write("* OBSCC  OBSCT  CC_format \n")
        f.write('{}\t{}\t{}\n'.format(ctrlpara["OBSCC"],ctrlpara["OBSCT"],ctrlpara["CC_format"]))
        f.write("*--- solution control:\n")
        f.write("* ISTART:      1 = from single source; 2 = from network sources\n")
        f.write("* ISOLV:   1 = SVD, 2=lsqr\n")
        f.write("* NSET:        number of sets of iteration with specificationsfollowing\n")
        f.write("*  ISTART  ISOLV  NSET weight1 weight2 weight3 air_depth\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["ISTART"],ctrlpara["ISOLV"],ctrlpara["NSET"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["weight1"],ctrlpara["weight2"],ctrlpara["weight3"]))
        f.write('{}\n'.format(ctrlpara["air_depth"]))
        f.write("* i3D delt1 ndip iskip scale1 scale2 iuses\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["i3D"],ctrlpara["delt1"],ctrlpara["ndip"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["iskip"],ctrlpara["scale1"],ctrlpara["scale2"]))
        f.write('{}\n'.format(ctrlpara["iuses"]))
        f.write("* xfac   tlim     nitpb(1) nitpb(2) stepl \n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["xfac"],ctrlpara["tlim"],ctrlpara["nitpb1"]))
        f.write('{}\t{}\n'.format(ctrlpara["nitpb2"],ctrlpara["stepl"]))
        f.write("* lat_Orig lon_Orig Z_Orig iorig rota \n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["lat_Orig"],ctrlpara["lon_Orig"],ctrlpara["Z_Orig"]))
        f.write('{}\t{}\n'.format(ctrlpara["iorig"],ctrlpara["rota"]))
        f.write("*--- data weighting and re-weighting:\n")
        f.write("* NITER:       last iteration to used the following weights \n")
        f.write("* WTCCP, WTCCS:        weight cross P, S  \n")
        f.write("* WTCTP, WTCTS:        weight catalog P, S \n")
        f.write("* WRCC, WRCT:      residual threshold in sec for cross, catalog  data \n")
        f.write("* WDCC, WDCT:          max dist [km] between cross, catalog linked pairs \n")
        f.write("* WTCD: relative weighting between the absolute and differential catalog data\n")
        f.write("* DAMP:            damping (for lsqr only) \n")
        f.write("*       ---  CROSS DATA ----- ----CATALOG DATA ----\n")
        f.write('*NITER  WTCCP  WTCCS  WRCC  WDCC   WTCTP   WTCTS   WRCT   WDCT  WTCD  DAMP   JOINT  THRES\n')
        f.write("\n".join(iteration_para))
        f.write("\n0\n") 

def createTomoDD_ESDPInp(ctrlpara,iteration_para,i):
    with open("tomoDD09_ESDP.inp"+str(i),"w") as f:
        f.write("*----input file selection\n")
        f.write("* cross correlation diff times (event-pair): \n")
        f.write(ctrlpara['cc_evpr']+"\n") 
        f.write("* cross correlation diff times (station-pair): \n")
        f.write(ctrlpara['cc_stapr']+"\n") 
        f.write("* cross correlation diff times (double-pair): \n")
        f.write(ctrlpara['cc_dbpr']+"\n") 
        f.write("* catalog P diff times (event-pair):\n")
        f.write(ctrlpara['ct_evpr']+"\n") 
        f.write("* catalog P diff times (station-pair):\n")
        f.write(ctrlpara['ct_stapr']+"\n") 
        f.write("* catalog P diff times (double-pair):\n")
        f.write(ctrlpara['ct_dbpr']+"\n") 
        f.write("* catalog absolute times :\n")
        f.write(ctrlpara['absfile']+"\n") 
        f.write("* event file\n")
        f.write(ctrlpara['eventfile']+"\n")    
        f.write(ctrlpara['stafile']+"\n")    
        f.write(ctrlpara['locfile']+"\n") 
        f.write(ctrlpara['relocfile']+"\n") 
        f.write(ctrlpara['sta_information']+"\n") 
        f.write(ctrlpara['residualfile']+"\n") 
        f.write("* source parameter information:\n* hypo3VDD.src\n\n")
        f.write(ctrlpara['Velfile']+"\n")
        f.write(ctrlpara['Vpfile']+"\n")
        f.write(ctrlpara['Vsfile']+"\n")
        f.write("*--- output synthesize data or not:\n")
        f.write("* isyn: 1= only construct and output the synthetic data based on the input real data and MOD\n")
        f.write("*       0= make inversion of real data and will not output the synthetic data\n")
        f.write("*       if isyn=1, cnl_P, cnl_S, rnl_P, rnl_S will control the noise level of the synthetic data.\n")
        f.write("* cnl_P: constant noise level for P wave\n")
        f.write("* cnl_S: constant noise level for S wave\n")
        f.write("* rnl_P: random   noise level for P wave\n")
        f.write("* rnl_S: random   noise level for S wave\n")
        f.write("* isyn  cnl_P_ct  cnl_S_ct  rnl_P_Ct  rnl_S_ct rnl_P_wcc rnl_S_wcc \n")
        f.write("0      0      0      0      0 0 0\n")



        f.write("*--- data type selection\n")
        f.write("* IDAT:  0 = synthetics; 1= cross corr; 2= catalog; 3= cross & cat\n" )
        f.write("* IPHA: 1= P; 2= S; 3= P&S\n")
        f.write("* DIST:max dist [km] between cluster centroid and station\n")
        f.write("* IDAT  IPHA  DIST\n")
        f.write('{}\t{}\t{}\n'.format(ctrlpara["IDAT"],ctrlpara["IPHA"],ctrlpara["DIST"]))

        f.write("* btsp: 1= inversion with bootstrapping resampling data\n")
        f.write("*       0= inversion with the real data \n0\n")

        f.write("*--- event clustering:\n") 
        f.write("* OBSCC:    min # of obs/pair for crosstime data (0= no clustering)\n")
        f.write("* OBSCT:    min # of obs/pair for network data (0= no clustering)\n")
        f.write("* OBSCC  OBSCT  CC_format \n")
        f.write('{}\t{}\t{}\n'.format(ctrlpara["OBSCC"],ctrlpara["OBSCT"],ctrlpara["CC_format"]))
        f.write("*--- solution control:\n")
        f.write("* ISTART:      1 = from single source; 2 = from network sources\n")
        f.write("* ISOLV:   1 = SVD, 2=lsqr\n")
        f.write("* NSET:        number of sets of iteration with specificationsfollowing\n")
        f.write("*  ISTART  ISOLV  NSET weight1 weight2 weight3 air_depth\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["ISTART"],ctrlpara["ISOLV"],ctrlpara["NSET"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["weight1"],ctrlpara["weight2"],ctrlpara["weight3"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["weight4"],ctrlpara["weight5"],ctrlpara["weight6"]))
        f.write('{}\n'.format(ctrlpara["air_depth"]))
        f.write("* i3D delt1 ndip iskip scale1 scale2 iuses\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["i3D"],ctrlpara["delt1"],ctrlpara["ndip"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["iskip"],ctrlpara["scale1"],ctrlpara["scale2"]))
        f.write('{}\n'.format(ctrlpara["iuses"]))
        f.write("* xfac   tlim     nitpb(1) nitpb(2) stepl \n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["xfac"],ctrlpara["tlim"],ctrlpara["nitpb1"]))
        f.write('{}\t{}\n'.format(ctrlpara["nitpb2"],ctrlpara["stepl"]))

        f.write("*  minVp  maxVp  minVs  maxVs  isct\n")
        f.write("0.5     10  0.001    6    0 \n")

        f.write("*cs lat_Orig lon_Orig Z_Orig iorig rota \n")
        f.write('{}\t{}\t{}\t{}\t'.format(1,ctrlpara["lat_Orig"],ctrlpara["lon_Orig"],ctrlpara["Z_Orig"]))
        f.write('{}\t{}\n'.format(ctrlpara["iorig"],ctrlpara["rota"]))

        f.write("*--- L-curve analysis\n")
        f.write("* ilv:   0: selection of damp for relocation only\n")
        f.write("*        1: selection of damp and smooth for joint inversion\n")
        f.write("*       -9: no l-curve analysis\n")
        f.write("-9\n")
        f.write("* ndamp  l-curve damps for relocation only (ilv=0)\n")
        f.write("16   0.0001 10 50 100 150 200 250 300 350 400 450 500 600 800 1000 1000000\n")
        f.write("* ndamp  l-curve damps for joint inversion (ilv=1)\n")
        f.write("1   1\n")
        f.write("* nsmooth l-curve smooths for joint inversion (ilv=1)\n")
        f.write("1   1 \n")
        f.write("*--- data weighting and re-weighting:\n")
        f.write("* NITER:       last iteration to used the following weights \n")
        f.write("* WTCCP, WTCCS:        weight cross P, S  \n")
        f.write("* WTCTP, WTCTS:        weight catalog P, S \n")
        f.write("* WRCC, WRCT:      residual threshold in sec for cross, catalog  data \n")
        f.write("* WDCC, WDCT:          max dist [km] between cross, catalog linked pairs \n")
        f.write("* WTCD: relative weighting between the absolute and differential catalog data\n")
        f.write("* DAMP:            damping (for lsqr only) \n")
        f.write("*       ---  CROSS DATA ----- ----CATALOG DATA ----\n")
        f.write("* NITER WTCCP WTCCS WRCC WDCC WTCTP WTCTS WRCT WDCT WTCD WTEP WTSP WTDP DAMP JOINT THRES\n")
        f.write("\n".join(iteration_para))
        f.write("\n0\n") 

def createTomoDD_ESDP_TDInp(ctrlpara,iteration_para,i):
    with open("tomoDD09_ESDP_TD.inp"+str(i),"w") as f:
        f.write("*----input file selection\n")
        f.write("* cross correlation diff times (event-pair): \n")
        f.write(ctrlpara['cc_evpr']+"\n") 
        f.write("* cross correlation diff times (station-pair): \n")
        f.write(ctrlpara['cc_stapr']+"\n") 
        f.write("* cross correlation diff times (double-pair): \n")
        f.write(ctrlpara['cc_dbpr']+"\n") 
        f.write("* catalog P diff times (event-pair):\n")
        f.write(ctrlpara['ct_evpr']+"\n") 
        f.write("* catalog P diff times (station-pair):\n")
        f.write(ctrlpara['ct_stapr']+"\n") 
        f.write("* catalog P diff times (double-pair):\n")
        f.write(ctrlpara['ct_dbpr']+"\n") 
        f.write("* catalog absolute times :\n")
        f.write(ctrlpara['absfile']+"\n") 
        f.write("* event file\n")
        f.write(ctrlpara['eventfile']+"\n")    
        f.write(ctrlpara['stafile']+"\n")    
        f.write(ctrlpara['locfile']+"\n") 
        f.write(ctrlpara['relocfile']+"\n") 
        f.write(ctrlpara['sta_information']+"\n") 
        f.write(ctrlpara['residualfile']+"\n") 
        f.write("* source parameter information:\n* hypo3VDD.src\n\n")
        f.write(ctrlpara['Velfile']+"\n")
        f.write(ctrlpara['Vpfile']+"\n")
        f.write(ctrlpara['Vsfile']+"\n")
        f.write("*--- output synthesize data or not:\n")
        f.write("* isyn: 1= only construct and output the synthetic data based on the input real data and MOD\n")
        f.write("*       0= make inversion of real data and will not output the synthetic data\n")
        f.write("*       if isyn=1, cnl_P, cnl_S, rnl_P, rnl_S will control the noise level of the synthetic data.\n")
        f.write("* cnl_P: constant noise level for P wave\n")
        f.write("* cnl_S: constant noise level for S wave\n")
        f.write("* rnl_P: random   noise level for P wave\n")
        f.write("* rnl_S: random   noise level for S wave\n")
        f.write("* isyn  cnl_P_ct  cnl_S_ct  rnl_P_Ct  rnl_S_ct rnl_P_wcc rnl_S_wcc \n")
        f.write("0      0      0      0      0 0 0\n")



        f.write("*--- data type selection\n")
        f.write("* IDAT:  0 = synthetics; 1= cross corr; 2= catalog; 3= cross & cat\n" )
        f.write("* IPHA: 1= P; 2= S; 3= P&S\n")
        f.write("* DIST:max dist [km] between cluster centroid and station\n")
        f.write("* IDAT  IPHA  DIST\n")
        f.write('{}\t{}\t{}\n'.format(ctrlpara["IDAT"],ctrlpara["IPHA"],ctrlpara["DIST"]))

        f.write("* btsp: 1= inversion with bootstrapping resampling data\n")
        f.write("*       0= inversion with the real data \n0\n")

        f.write("*--- event clustering:\n") 
        f.write("* OBSCC:    min # of obs/pair for crosstime data (0= no clustering)\n")
        f.write("* OBSCT:    min # of obs/pair for network data (0= no clustering)\n")
        f.write("* OBSCC  OBSCT  CC_format \n")
        f.write('{}\t{}\t{}\n'.format(ctrlpara["OBSCC"],ctrlpara["OBSCT"],ctrlpara["CC_format"]))
        f.write("*--- solution control:\n")
        f.write("* ISTART:      1 = from single source; 2 = from network sources\n")
        f.write("* ISOLV:   1 = SVD, 2=lsqr\n")
        f.write("* NSET:        number of sets of iteration with specificationsfollowing\n")
        f.write("*  ISTART  ISOLV  NSET weight1 weight2 weight3 air_depth\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["ISTART"],ctrlpara["ISOLV"],ctrlpara["NSET"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["weight1"],ctrlpara["weight2"],ctrlpara["weight3"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["weight4"],ctrlpara["weight5"],ctrlpara["weight6"]))
        f.write('{}\n'.format(ctrlpara["air_depth"]))
        f.write("* i3D delt1 ndip iskip scale1 scale2 iuses\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["i3D"],ctrlpara["delt1"],ctrlpara["ndip"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["iskip"],ctrlpara["scale1"],ctrlpara["scale2"]))
        f.write('{}\n'.format(ctrlpara["iuses"]))
        f.write("* xfac   tlim     nitpb(1) nitpb(2) stepl \n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["xfac"],ctrlpara["tlim"],ctrlpara["nitpb1"]))
        f.write('{}\t{}\n'.format(ctrlpara["nitpb2"],ctrlpara["stepl"]))

        f.write("*  minVp  maxVp  minVs  maxVs  isct\n")
        f.write("0.5     10  0.001    6    0 \n")

        f.write("*cs lat_Orig lon_Orig Z_Orig iorig rota \n")
        f.write('{}\t{}\t{}\t{}\t'.format(1,ctrlpara["lat_Orig"],ctrlpara["lon_Orig"],ctrlpara["Z_Orig"]))
        f.write('{}\t{}\n'.format(ctrlpara["iorig"],ctrlpara["rota"]))

        f.write("*--- L-curve analysis\n")
        f.write("* ilv:   0: selection of damp for relocation only\n")
        f.write("*        1: selection of damp and smooth for joint inversion\n")
        f.write("*       -9: no l-curve analysis\n")
        f.write("-9\n")
        f.write("* ndamp  l-curve damps for relocation only (ilv=0)\n")
        f.write("16   0.0001 10 50 100 150 200 250 300 350 400 450 500 600 800 1000 1000000\n")
        f.write("* ndamp  l-curve damps for joint inversion (ilv=1)\n")
        f.write("1   1\n")
        f.write("* nsmooth l-curve smooths for joint inversion (ilv=1)\n")
        f.write("1   1 \n")
        f.write("*--- data weighting and re-weighting:\n")
        f.write("* NITER:       last iteration to used the following weights \n")
        f.write("* WTCCP, WTCCS:        weight cross P, S  \n")
        f.write("* WTCTP, WTCTS:        weight catalog P, S \n")
        f.write("* WRCC, WRCT:      residual threshold in sec for cross, catalog  data \n")
        f.write("* WDCC, WDCT:          max dist [km] between cross, catalog linked pairs \n")
        f.write("* WTCD: relative weighting between the absolute and differential catalog data\n")
        f.write("* DAMP:            damping (for lsqr only) \n")
        f.write("*       ---  CROSS DATA ----- ----CATALOG DATA ----\n")
        f.write("* NITER WTCCP WTCCS WRCC WDCC WTCTP WTCTS WRCT WDCT WTCD WTEP WTSP WTDP DAMP JOINT THRES\n")
        f.write("\n".join(iteration_para))
        f.write("\n0\n") 

def createTomoDD_TD_Inp(ctrlpara,iteration_para,i): 
    with open("tomodd_TD.inp"+str(i),"w") as f:
        f.write("*----input file selection\n")
        f.write("* cross correlation diff times\n")
        f.write(ctrlpara['cc_evpr']+"\n") 
        f.write("* catalog  diff times\n")
        f.write(ctrlpara['ct_evpr']+"\n") 
        f.write("* absolute time\n")
        f.write(ctrlpara['absfile']+"\n") 
        f.write("* event file\n")
        f.write(ctrlpara['eventfile']+"\n")    
        f.write(ctrlpara['stafile']+"\n")    
        f.write(ctrlpara['locfile']+"\n") 
        f.write(ctrlpara['relocfile']+"\n") 
        f.write(ctrlpara['sta_information']+"\n") 
        f.write(ctrlpara['residualfile']+"\n") 
        f.write("* source parameter information:\n* hypo3VDD.src\n\n")
        f.write(ctrlpara['Velfile']+"\n")
        f.write(ctrlpara['Vpfile']+"\n")
        f.write(ctrlpara['Vsfile']+"\n")
        f.write("*--- data type selection\n")
        f.write("* IDAT:  0 = synthetics; 1= cross corr; 2= catalog; 3= cross & cat\n" )
        f.write("* IPHA: 1= P; 2= S; 3= P&S\n")
        f.write("* DIST:max dist [km] between cluster centroid and station\n")
        f.write("* IDAT  IPHA  DIST\n")
        f.write('{}\t{}\t{}\n'.format(ctrlpara["IDAT"],ctrlpara["IPHA"],ctrlpara["DIST"]))
        f.write("*--- event clustering:\n") 
        f.write("* OBSCC:    min # of obs/pair for crosstime data (0= no clustering)\n")
        f.write("* OBSCT:    min # of obs/pair for network data (0= no clustering)\n")
        f.write("* OBSCC  OBSCT  CC_format \n")
        f.write('{}\t{}\t{}\n'.format(ctrlpara["OBSCC"],ctrlpara["OBSCT"],ctrlpara["CC_format"]))
        f.write("*--- solution control:\n")
        f.write("* ISTART:      1 = from single source; 2 = from network sources\n")
        f.write("* ISOLV:   1 = SVD, 2=lsqr\n")
        f.write("* NSET:        number of sets of iteration with specificationsfollowing\n")
        f.write("*  ISTART  ISOLV  NSET weight1 weight2 weight3 air_depth\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["ISTART"],ctrlpara["ISOLV"],ctrlpara["NSET"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["weight1"],ctrlpara["weight2"],ctrlpara["weight3"]))
        f.write('{}\n'.format(ctrlpara["air_depth"]))
        f.write("* i3D delt1 ndip iskip scale1 scale2 iuses\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["i3D"],ctrlpara["delt1"],ctrlpara["ndip"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["iskip"],ctrlpara["scale1"],ctrlpara["scale2"]))
        f.write('{}\n'.format(ctrlpara["iuses"]))
        f.write("* xfac   tlim     nitpb(1) nitpb(2) stepl \n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["xfac"],ctrlpara["tlim"],ctrlpara["nitpb1"]))
        f.write('{}\t{}\n'.format(ctrlpara["nitpb2"],ctrlpara["stepl"]))
        f.write("* lat_Orig lon_Orig Z_Orig iorig rota \n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["lat_Orig"],ctrlpara["lon_Orig"],ctrlpara["Z_Orig"]))
        f.write('{}\t{}\n'.format(ctrlpara["iorig"],ctrlpara["rota"]))
        f.write("*--- data weighting and re-weighting:\n")
        f.write("* NITER:       last iteration to used the following weights \n")
        f.write("* WTCCP, WTCCS:        weight cross P, S  \n")
        f.write("* WTCTP, WTCTS:        weight catalog P, S \n")
        f.write("* WRCC, WRCT:      residual threshold in sec for cross, catalog  data \n")
        f.write("* WDCC, WDCT:          max dist [km] between cross, catalog linked pairs \n")
        f.write("* WTCD: relative weighting between the absolute and differential catalog data\n")
        f.write("* DAMP:            damping (for lsqr only) \n")
        f.write("*       ---  CROSS DATA ----- ----CATALOG DATA ----\n")
        f.write("*NITER  WTCCP  WTCCS  WRCC  WDCC   WTCTP   WTCTS   WRCT   WDCT  WTCD  DAMP   JOINT  THRES\n")
        f.write("\n".join(iteration_para))
        f.write("\n0\n")  
def createTomoDD_KF_Inp(ctrlpara,iteration_para): 
    with open("tomodd_KF.inp","w") as f:
        f.write("*----input file selection\n")
        f.write("* cross correlation diff times\n")
        f.write(ctrlpara['cc_evpr']+"\n") 
        f.write("* catalog  diff times\n")
        f.write(ctrlpara['ct_evpr']+"\n") 
        f.write("* absolute time\n")
        f.write(ctrlpara['absfile']+"\n") 
        f.write("* event file\n")
        f.write(ctrlpara['eventfile']+"\n")    
        f.write(ctrlpara['stafile']+"\n")    
        f.write(ctrlpara['locfile']+"\n") 
        f.write(ctrlpara['relocfile']+"\n") 
        f.write(ctrlpara['sta_information']+"\n") 
        f.write(ctrlpara['residualfile']+"\n") 
        f.write("* source parameter information:\n* hypo3VDD.src\n\n")
        f.write(ctrlpara['Velfile']+"\n")
        f.write(ctrlpara['Vpfile']+"\n")
        f.write(ctrlpara['Vsfile']+"\n")
        f.write("*--- data type selection\n")
        f.write("* IDAT:  0 = synthetics; 1= cross corr; 2= catalog; 3= cross & cat\n" )
        f.write("* IPHA: 1= P; 2= S; 3= P&S\n")
        f.write("* DIST:max dist [km] between cluster centroid and station\n")
        f.write("* IDAT  IPHA  DIST\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["IDAT"],ctrlpara["IPHA"],ctrlpara["DIST"]))
        f.write("{}\t{}\n".format(ctrlpara["sigmap"],ctrlpara["sigmas"]))
        f.write("*--- event clustering:\n") 
        f.write("* OBSCC:    min # of obs/pair for crosstime data (0= no clustering)\n")
        f.write("* OBSCT:    min # of obs/pair for network data (0= no clustering)\n")
        f.write("* OBSCC  OBSCT  CC_format \n")
        f.write('{}\t{}\t{}\n'.format(ctrlpara["OBSCC"],ctrlpara["OBSCT"],ctrlpara["CC_format"]))
        f.write("*--- solution control:\n")
        f.write("* ISTART:      1 = from single source; 2 = from network sources\n")
        f.write("* ISOLV:   1 = SVD, 2=lsqr\n")
        f.write("* NSET:        number of sets of iteration with specificationsfollowing\n")
        f.write("*  ISTART  ISOLV  NSET weight1 weight2 weight3 air_depth\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["ISTART"],ctrlpara["ISOLV"],ctrlpara["NSET"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["wp1"],ctrlpara["wp2"],ctrlpara["wp3"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["ws1"],ctrlpara["ws2"],ctrlpara["ws3"]))
        f.write('{}\t'.format(ctrlpara["air_depth"]))
        f.write('{}\t{}\n'.format(ctrlpara["minccsep"],ctrlpara["dfac"]))
        f.write("* i3D delt1 ndip iskip scale1 scale2 iuses\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["i3D"],ctrlpara["delt1"],ctrlpara["ndip"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["iskip"],ctrlpara["scale1"],ctrlpara["scale2"]))
        f.write('{}\n'.format(ctrlpara["iuses"]))
        f.write("* xfac   tlim     nitpb(1) nitpb(2) stepl \n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["xfac"],ctrlpara["tlim"],ctrlpara["nitpb1"]))
        f.write('{}\t{}\n'.format(ctrlpara["nitpb2"],ctrlpara["stepl"]))
        f.write("* lat_Orig lon_Orig Z_Orig iorig rota \n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["lat_Orig"],ctrlpara["lon_Orig"],ctrlpara["Z_Orig"]))
        f.write('{}\t{}\n'.format(ctrlpara["iorig"],ctrlpara["rota"]))

        f.write("*--- data weighting and re-weighting:\n")
        f.write("* NITER:       last iteration to used the following weights \n")
        f.write("* WTCCP, WTCCS:        weight cross P, S  \n")
        f.write("* WTCTP, WTCTS:        weight catalog P, S \n")
        f.write("* WRCC, WRCT:      residual threshold in sec for cross, catalog  data \n")
        f.write("* WDCC, WDCT:          max dist [km] between cross, catalog linked pairs \n")
        f.write("* WTCD: relative weighting between the absolute and differential catalog data\n")
        f.write("* DAMP:            damping (for lsqr only) \n")
        f.write("*       ---  CROSS DATA ----- ----CATALOG DATA ----\n")
        f.write("*NITER  WTCCP  WTCCS  WRCC  WDCC   WTCTP   WTCTS   WRCT   WDCT  WTCD  DAMP   JOINT  THRES\n")
        f.write("\n".join(iteration_para))
        f.write("\n0\n")  

def createTomoDD_ART_Inp(ctrlpara,iteration_para): 
    with open("tomodd_ART.inp","w") as f:
        f.write("*----input file selection\n")
        f.write("* cross correlation diff times\n")
        f.write(ctrlpara['cc_evpr']+"\n") 
        f.write("* catalog  diff times\n")
        f.write(ctrlpara['ct_evpr']+"\n") 
        f.write("* absolute time\n")
        f.write(ctrlpara['absfile']+"\n") 
        f.write("* event file\n")
        f.write(ctrlpara['eventfile']+"\n")    
        f.write(ctrlpara['stafile']+"\n")    
        f.write(ctrlpara['locfile']+"\n") 
        f.write(ctrlpara['relocfile']+"\n") 
        f.write(ctrlpara['sta_information']+"\n") 
        f.write(ctrlpara['residualfile']+"\n") 
        f.write("* source parameter information:\n* hypo3VDD.src\n\n")
        f.write(ctrlpara['Velfile']+"\n")
        f.write(ctrlpara['Vpfile']+"\n")
        f.write(ctrlpara['Vsfile']+"\n")
        f.write("*--- data type selection\n")
        f.write("* IDAT:  0 = synthetics; 1= cross corr; 2= catalog; 3= cross & cat\n" )
        f.write("* IPHA: 1= P; 2= S; 3= P&S\n")
        f.write("* DIST:max dist [km] between cluster centroid and station\n")
        f.write("* IDAT  IPHA  DIST\n")
        f.write('{}\t{}\t{}\n'.format(ctrlpara["IDAT"],ctrlpara["IPHA"],ctrlpara["DIST"]))
        f.write("*--- event clustering:\n") 
        f.write("* OBSCC:    min # of obs/pair for crosstime data (0= no clustering)\n")
        f.write("* OBSCT:    min # of obs/pair for network data (0= no clustering)\n")
        f.write("* OBSCC  OBSCT  CC_format \n")
        f.write('{}\t{}\t{}\n'.format(ctrlpara["OBSCC"],ctrlpara["OBSCT"],ctrlpara["CC_format"]))
        f.write("*--- solution control:\n")
        f.write("* ISTART:      1 = from single source; 2 = from network sources\n")
        f.write("* ISOLV:   1 = SVD, 2=lsqr\n")
        f.write("* NSET:        number of sets of iteration with specificationsfollowing\n")
        f.write("*  ISTART  ISOLV  NSET weight1 weight2 weight3 air_depth\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["ISTART"],ctrlpara["ISOLV"],ctrlpara["NSET"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["weight1"],ctrlpara["weight2"],ctrlpara["weight3"]))
        f.write('{}\n'.format(ctrlpara["air_depth"]))
        f.write("* i3D delt1 ndip iskip scale1 scale2 iuses\n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["i3D"],ctrlpara["delt1"],ctrlpara["ndip"]))
        f.write('{}\t{}\t{}\t'.format(ctrlpara["iskip"],ctrlpara["scale1"],ctrlpara["scale2"]))
        f.write('{}\n'.format(ctrlpara["iuses"]))
        f.write("* xfac   tlim     nitpb(1) nitpb(2) stepl \n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["xfac"],ctrlpara["tlim"],ctrlpara["nitpb1"]))
        f.write('{}\t{}\n'.format(ctrlpara["nitpb2"],ctrlpara["stepl"]))
        f.write("* lat_Orig lon_Orig Z_Orig iorig rota \n")
        f.write('{}\t{}\t{}\t'.format(ctrlpara["lat_Orig"],ctrlpara["lon_Orig"],ctrlpara["Z_Orig"]))
        f.write('{}\t{}\n'.format(ctrlpara["iorig"],ctrlpara["rota"]))
        f.write("*--- data weighting and re-weighting:\n")
        f.write("* NITER:       last iteration to used the following weights \n")
        f.write("* WTCCP, WTCCS:        weight cross P, S  \n")
        f.write("* WTCTP, WTCTS:        weight catalog P, S \n")
        f.write("* WRCC, WRCT:      residual threshold in sec for cross, catalog  data \n")
        f.write("* WDCC, WDCT:          max dist [km] between cross, catalog linked pairs \n")
        f.write("* WTCD: relative weighting between the absolute and differential catalog data\n")
        f.write("* DAMP:            damping (for lsqr only) \n")
        f.write("*       ---  CROSS DATA ----- ----CATALOG DATA ----\n")
        f.write("* NITER,WTCCP,WTCCS,WRCC,WDCC,WTCTP,WTCTS,WRCT,WDCT,WTCD,DAMP,alevel,amaxlevel,amaxleveld,aweight,JOINT,THRES\n")
        f.write("\n".join(iteration_para))
        f.write("\n0\n")  
        
