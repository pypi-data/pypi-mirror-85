# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _result
else:
    import _result

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _result.SWIG_PyInstanceMethod_New
_swig_new_static_method = _result.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import gphoto2.abilities_list
import gphoto2.camera
import gphoto2.context
import gphoto2.file
import gphoto2.filesys
import gphoto2.list
import gphoto2.port_info_list
import gphoto2.port_log
import gphoto2.version
import gphoto2.widget
GP_OK = _result.GP_OK

GP_ERROR = _result.GP_ERROR

GP_ERROR_BAD_PARAMETERS = _result.GP_ERROR_BAD_PARAMETERS

GP_ERROR_NO_MEMORY = _result.GP_ERROR_NO_MEMORY

GP_ERROR_LIBRARY = _result.GP_ERROR_LIBRARY

GP_ERROR_UNKNOWN_PORT = _result.GP_ERROR_UNKNOWN_PORT

GP_ERROR_NOT_SUPPORTED = _result.GP_ERROR_NOT_SUPPORTED

GP_ERROR_IO = _result.GP_ERROR_IO

GP_ERROR_FIXED_LIMIT_EXCEEDED = _result.GP_ERROR_FIXED_LIMIT_EXCEEDED

GP_ERROR_TIMEOUT = _result.GP_ERROR_TIMEOUT

GP_ERROR_IO_SUPPORTED_SERIAL = _result.GP_ERROR_IO_SUPPORTED_SERIAL

GP_ERROR_IO_SUPPORTED_USB = _result.GP_ERROR_IO_SUPPORTED_USB

GP_ERROR_IO_INIT = _result.GP_ERROR_IO_INIT

GP_ERROR_IO_READ = _result.GP_ERROR_IO_READ

GP_ERROR_IO_WRITE = _result.GP_ERROR_IO_WRITE

GP_ERROR_IO_UPDATE = _result.GP_ERROR_IO_UPDATE

GP_ERROR_IO_SERIAL_SPEED = _result.GP_ERROR_IO_SERIAL_SPEED

GP_ERROR_IO_USB_CLEAR_HALT = _result.GP_ERROR_IO_USB_CLEAR_HALT

GP_ERROR_IO_USB_FIND = _result.GP_ERROR_IO_USB_FIND

GP_ERROR_IO_USB_CLAIM = _result.GP_ERROR_IO_USB_CLAIM

GP_ERROR_IO_LOCK = _result.GP_ERROR_IO_LOCK

GP_ERROR_HAL = _result.GP_ERROR_HAL

gp_port_result_as_string = _result.gp_port_result_as_string
GP_ERROR_CORRUPTED_DATA = _result.GP_ERROR_CORRUPTED_DATA

GP_ERROR_FILE_EXISTS = _result.GP_ERROR_FILE_EXISTS

GP_ERROR_MODEL_NOT_FOUND = _result.GP_ERROR_MODEL_NOT_FOUND

GP_ERROR_DIRECTORY_NOT_FOUND = _result.GP_ERROR_DIRECTORY_NOT_FOUND

GP_ERROR_FILE_NOT_FOUND = _result.GP_ERROR_FILE_NOT_FOUND

GP_ERROR_DIRECTORY_EXISTS = _result.GP_ERROR_DIRECTORY_EXISTS

GP_ERROR_CAMERA_BUSY = _result.GP_ERROR_CAMERA_BUSY

GP_ERROR_PATH_NOT_ABSOLUTE = _result.GP_ERROR_PATH_NOT_ABSOLUTE

GP_ERROR_CANCEL = _result.GP_ERROR_CANCEL

GP_ERROR_CAMERA_ERROR = _result.GP_ERROR_CAMERA_ERROR

GP_ERROR_OS_FAILURE = _result.GP_ERROR_OS_FAILURE

GP_ERROR_NO_SPACE = _result.GP_ERROR_NO_SPACE

gp_result_as_string = _result.gp_result_as_string

import logging

# user adjustable check_result lookup table
error_severity = {
    GP_ERROR_CANCEL           : logging.INFO,
    GP_ERROR_DIRECTORY_EXISTS : logging.WARNING,
    }
error_exception = logging.ERROR

_return_logger = logging.getLogger('gphoto2.returnvalue')

def check_result(result):
    """Pops gphoto2 'error' value from 'result' list and checks it.

    If there is no error the remaining result is returned. For other
    errors a severity level is taken from the error_severity dict, or
    set to logging.CRITICAL if the error is not in error_severity.

    If the severity >= error_exception an exception is raised.
    Otherwise a message is logged at the appropriate severity level.
    """

    if not isinstance(result, (tuple, list)):
        error = result
    elif len(result) == 2:
        error, result = result
    else:
        error = result[0]
        result = result[1:]
    if error >= GP_OK:
        return result
    severity = logging.CRITICAL
    if error in error_severity:
        severity = error_severity[error]
    if severity >= error_exception:
        raise gphoto2.GPhoto2Error(error)
    _return_logger.log(severity, '[%d] %s', error, gp_result_as_string(error))
    return result



