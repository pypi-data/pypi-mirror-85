# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _context
else:
    import _context

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _context.SWIG_PyInstanceMethod_New
_swig_new_static_method = _context.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import gphoto2.abilities_list
import gphoto2.camera
import gphoto2.file
import gphoto2.filesys
import gphoto2.list
import gphoto2.port_info_list
import gphoto2.port_log
import gphoto2.result
import gphoto2.version
import gphoto2.widget
class CallbackDetails(object):
    r"""Proxy of C CallbackDetails struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    func_1 = property(_context.CallbackDetails_func_1_get, _context.CallbackDetails_func_1_set, doc=r"""func_1""")
    func_2 = property(_context.CallbackDetails_func_2_get, _context.CallbackDetails_func_2_set, doc=r"""func_2""")
    func_3 = property(_context.CallbackDetails_func_3_get, _context.CallbackDetails_func_3_set, doc=r"""func_3""")
    __swig_destroy__ = _context.delete_CallbackDetails

# Register CallbackDetails in _context:
_context.CallbackDetails_swigregister(CallbackDetails)

unset_progress_funcs = _context.unset_progress_funcs
class Context(object):
    r"""Proxy of C _GPContext struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    camera_autodetect = _swig_new_instance_method(_context.Context_camera_autodetect)
    set_idle_func = _swig_new_instance_method(_context.Context_set_idle_func)
    set_error_func = _swig_new_instance_method(_context.Context_set_error_func)
    set_message_func = _swig_new_instance_method(_context.Context_set_message_func)
    set_question_func = _swig_new_instance_method(_context.Context_set_question_func)
    set_cancel_func = _swig_new_instance_method(_context.Context_set_cancel_func)
    set_progress_funcs = _swig_new_instance_method(_context.Context_set_progress_funcs)
    set_status_func = _swig_new_instance_method(_context.Context_set_status_func)

    def __init__(self):
        r"""__init__(self) -> Context"""
        _context.Context_swiginit(self, _context.new_Context())
    __swig_destroy__ = _context.delete_Context

# Register Context in _context:
_context.Context_swigregister(Context)

gp_context_new = _context.gp_context_new
GP_CONTEXT_FEEDBACK_OK = _context.GP_CONTEXT_FEEDBACK_OK

GP_CONTEXT_FEEDBACK_CANCEL = _context.GP_CONTEXT_FEEDBACK_CANCEL

gp_context_set_idle_func = _context.gp_context_set_idle_func
gp_context_set_progress_funcs = _context.gp_context_set_progress_funcs
gp_context_set_error_func = _context.gp_context_set_error_func
gp_context_set_status_func = _context.gp_context_set_status_func
gp_context_set_question_func = _context.gp_context_set_question_func
gp_context_set_cancel_func = _context.gp_context_set_cancel_func
gp_context_set_message_func = _context.gp_context_set_message_func


