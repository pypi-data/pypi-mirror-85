# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _abilities_list
else:
    import _abilities_list

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _abilities_list.SWIG_PyInstanceMethod_New
_swig_new_static_method = _abilities_list.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import gphoto2.camera
import gphoto2.context
import gphoto2.file
import gphoto2.filesys
import gphoto2.list
import gphoto2.port_info_list
import gphoto2.port_log
import gphoto2.result
import gphoto2.version
import gphoto2.widget
class CameraAbilitiesList(object):
    r"""Proxy of C _CameraAbilitiesList struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(self) -> CameraAbilitiesList"""
        _abilities_list.CameraAbilitiesList_swiginit(self, _abilities_list.new_CameraAbilitiesList())
    __swig_destroy__ = _abilities_list.delete_CameraAbilitiesList
    __len__ = _swig_new_instance_method(_abilities_list.CameraAbilitiesList___len__)
    __getitem__ = _swig_new_instance_method(_abilities_list.CameraAbilitiesList___getitem__)
    load = _swig_new_instance_method(_abilities_list.CameraAbilitiesList_load)
    load_dir = _swig_new_instance_method(_abilities_list.CameraAbilitiesList_load_dir)
    reset = _swig_new_instance_method(_abilities_list.CameraAbilitiesList_reset)
    detect = _swig_new_instance_method(_abilities_list.CameraAbilitiesList_detect)
    append = _swig_new_instance_method(_abilities_list.CameraAbilitiesList_append)
    count = _swig_new_instance_method(_abilities_list.CameraAbilitiesList_count)
    lookup_model = _swig_new_instance_method(_abilities_list.CameraAbilitiesList_lookup_model)
    get_abilities = _swig_new_instance_method(_abilities_list.CameraAbilitiesList_get_abilities)

# Register CameraAbilitiesList in _abilities_list:
_abilities_list.CameraAbilitiesList_swigregister(CameraAbilitiesList)

GP_DRIVER_STATUS_PRODUCTION = _abilities_list.GP_DRIVER_STATUS_PRODUCTION

GP_DRIVER_STATUS_TESTING = _abilities_list.GP_DRIVER_STATUS_TESTING

GP_DRIVER_STATUS_EXPERIMENTAL = _abilities_list.GP_DRIVER_STATUS_EXPERIMENTAL

GP_DRIVER_STATUS_DEPRECATED = _abilities_list.GP_DRIVER_STATUS_DEPRECATED

GP_DEVICE_STILL_CAMERA = _abilities_list.GP_DEVICE_STILL_CAMERA

GP_DEVICE_AUDIO_PLAYER = _abilities_list.GP_DEVICE_AUDIO_PLAYER

GP_OPERATION_NONE = _abilities_list.GP_OPERATION_NONE

GP_OPERATION_CAPTURE_IMAGE = _abilities_list.GP_OPERATION_CAPTURE_IMAGE

GP_OPERATION_CAPTURE_VIDEO = _abilities_list.GP_OPERATION_CAPTURE_VIDEO

GP_OPERATION_CAPTURE_AUDIO = _abilities_list.GP_OPERATION_CAPTURE_AUDIO

GP_OPERATION_CAPTURE_PREVIEW = _abilities_list.GP_OPERATION_CAPTURE_PREVIEW

GP_OPERATION_CONFIG = _abilities_list.GP_OPERATION_CONFIG

GP_OPERATION_TRIGGER_CAPTURE = _abilities_list.GP_OPERATION_TRIGGER_CAPTURE

GP_FILE_OPERATION_NONE = _abilities_list.GP_FILE_OPERATION_NONE

GP_FILE_OPERATION_DELETE = _abilities_list.GP_FILE_OPERATION_DELETE

GP_FILE_OPERATION_PREVIEW = _abilities_list.GP_FILE_OPERATION_PREVIEW

GP_FILE_OPERATION_RAW = _abilities_list.GP_FILE_OPERATION_RAW

GP_FILE_OPERATION_AUDIO = _abilities_list.GP_FILE_OPERATION_AUDIO

GP_FILE_OPERATION_EXIF = _abilities_list.GP_FILE_OPERATION_EXIF

GP_FOLDER_OPERATION_NONE = _abilities_list.GP_FOLDER_OPERATION_NONE

GP_FOLDER_OPERATION_DELETE_ALL = _abilities_list.GP_FOLDER_OPERATION_DELETE_ALL

GP_FOLDER_OPERATION_PUT_FILE = _abilities_list.GP_FOLDER_OPERATION_PUT_FILE

GP_FOLDER_OPERATION_MAKE_DIR = _abilities_list.GP_FOLDER_OPERATION_MAKE_DIR

GP_FOLDER_OPERATION_REMOVE_DIR = _abilities_list.GP_FOLDER_OPERATION_REMOVE_DIR

class CameraAbilities(object):
    r"""
    Describes the properties of a specific camera.  

    The internals of this structures are used extensively by the camlibs,
    but the status regarding use by frontends is questionable.  

    C++ includes: gphoto2-abilities-list.h
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    model = property(_abilities_list.CameraAbilities_model_get, doc=r"""model""")
    status = property(_abilities_list.CameraAbilities_status_get, doc=r"""status""")
    port = property(_abilities_list.CameraAbilities_port_get, doc=r"""port""")
    speed = property(_abilities_list.CameraAbilities_speed_get, doc=r"""speed""")
    operations = property(_abilities_list.CameraAbilities_operations_get, doc=r"""operations""")
    file_operations = property(_abilities_list.CameraAbilities_file_operations_get, doc=r"""file_operations""")
    folder_operations = property(_abilities_list.CameraAbilities_folder_operations_get, doc=r"""folder_operations""")
    usb_vendor = property(_abilities_list.CameraAbilities_usb_vendor_get, doc=r"""usb_vendor""")
    usb_product = property(_abilities_list.CameraAbilities_usb_product_get, doc=r"""usb_product""")
    usb_class = property(_abilities_list.CameraAbilities_usb_class_get, doc=r"""usb_class""")
    usb_subclass = property(_abilities_list.CameraAbilities_usb_subclass_get, doc=r"""usb_subclass""")
    usb_protocol = property(_abilities_list.CameraAbilities_usb_protocol_get, doc=r"""usb_protocol""")
    library = property(_abilities_list.CameraAbilities_library_get, doc=r"""library""")
    id = property(_abilities_list.CameraAbilities_id_get, doc=r"""id""")
    device_type = property(_abilities_list.CameraAbilities_device_type_get, doc=r"""device_type""")
    reserved2 = property(_abilities_list.CameraAbilities_reserved2_get, doc=r"""reserved2""")
    reserved3 = property(_abilities_list.CameraAbilities_reserved3_get, doc=r"""reserved3""")
    reserved4 = property(_abilities_list.CameraAbilities_reserved4_get, doc=r"""reserved4""")
    reserved5 = property(_abilities_list.CameraAbilities_reserved5_get, doc=r"""reserved5""")
    reserved6 = property(_abilities_list.CameraAbilities_reserved6_get, doc=r"""reserved6""")
    reserved7 = property(_abilities_list.CameraAbilities_reserved7_get, doc=r"""reserved7""")
    reserved8 = property(_abilities_list.CameraAbilities_reserved8_get, doc=r"""reserved8""")
    __swig_destroy__ = _abilities_list.delete_CameraAbilities

# Register CameraAbilities in _abilities_list:
_abilities_list.CameraAbilities_swigregister(CameraAbilities)

gp_abilities_list_new = _abilities_list.gp_abilities_list_new
gp_abilities_list_load = _abilities_list.gp_abilities_list_load
gp_abilities_list_load_dir = _abilities_list.gp_abilities_list_load_dir
gp_abilities_list_reset = _abilities_list.gp_abilities_list_reset
gp_abilities_list_detect = _abilities_list.gp_abilities_list_detect
gp_abilities_list_append = _abilities_list.gp_abilities_list_append
gp_abilities_list_count = _abilities_list.gp_abilities_list_count
gp_abilities_list_lookup_model = _abilities_list.gp_abilities_list_lookup_model
gp_abilities_list_get_abilities = _abilities_list.gp_abilities_list_get_abilities
gp_message_codeset = _abilities_list.gp_message_codeset


