# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _list
else:
    import _list

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _list.SWIG_PyInstanceMethod_New
_swig_new_static_method = _list.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import gphoto2.abilities_list
import gphoto2.camera
import gphoto2.context
import gphoto2.file
import gphoto2.filesys
import gphoto2.port_info_list
import gphoto2.port_log
import gphoto2.result
import gphoto2.version
import gphoto2.widget
class CameraList(object):
    r"""Proxy of C _CameraList struct."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __len__ = _swig_new_instance_method(_list.CameraList___len__)
    __getitem__ = _swig_new_instance_method(_list.CameraList___getitem__)
    count = _swig_new_instance_method(_list.CameraList_count)
    append = _swig_new_instance_method(_list.CameraList_append)
    reset = _swig_new_instance_method(_list.CameraList_reset)
    sort = _swig_new_instance_method(_list.CameraList_sort)
    find_by_name = _swig_new_instance_method(_list.CameraList_find_by_name)
    get_name = _swig_new_instance_method(_list.CameraList_get_name)
    get_value = _swig_new_instance_method(_list.CameraList_get_value)
    set_name = _swig_new_instance_method(_list.CameraList_set_name)
    set_value = _swig_new_instance_method(_list.CameraList_set_value)
    populate = _swig_new_instance_method(_list.CameraList_populate)

    def __init__(self):
        r"""__init__(self) -> CameraList"""
        _list.CameraList_swiginit(self, _list.new_CameraList())
    __swig_destroy__ = _list.delete_CameraList

# Register CameraList in _list:
_list.CameraList_swigregister(CameraList)

gp_list_new = _list.gp_list_new
gp_list_count = _list.gp_list_count
gp_list_append = _list.gp_list_append
gp_list_reset = _list.gp_list_reset
gp_list_sort = _list.gp_list_sort
gp_list_find_by_name = _list.gp_list_find_by_name
gp_list_get_name = _list.gp_list_get_name
gp_list_get_value = _list.gp_list_get_value
gp_list_set_name = _list.gp_list_set_name
gp_list_set_value = _list.gp_list_set_value
gp_list_populate = _list.gp_list_populate


