(self.webpackChunkjupyterlab_vimrc=self.webpackChunkjupyterlab_vimrc||[]).push([[868],{868:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>m});var a=t(742),i=t(99);function o(...e){let r;return r=e.length>2?o.apply(void 0,Array.prototype.slice.call(e,1)):e[1],function(e,r){return e.line<r.line||e.line===r.line&&e.ch<r.ch}(e[0],r)?e[0]:r}function n(e,r){return function(t,a,i,n){const c=t.state.vim,m=t.getSelection(),l=c.visualMode?o(c.sel.anchor,c.sel.head,i[0].head,i[0].anchor):n,s=null===a.registerName&&r;return(-1!==["+","*"].indexOf(a.registerName)||s)&&(navigator.clipboard.writeText(m).catch((e=>{console.error("Could not copy text: ",e)})),t.focus()),e.pushText(a.registerName,"yank",m,a.linewise,c.visualBlock),l}}const c="jupyterlab-vimrc:vimrc",m={id:c,autoStart:!0,requires:[i.ISettingRegistry,a.ICodeMirror],activate:async(e,r,t)=>{await t.ensureVimKeymap();const a=t.CodeMirror;function i(e){const r=e.get("unnamedplus").composite;a.Vim.defineOperator("yank",n(a.Vim.getRegisterController(),r)),a.Vim.mapclear("normal"),a.Vim.mapclear("visual"),a.Vim.mapclear("insert"),e.get("imap").composite.forEach((e=>{e[0]&&e[1]&&a.Vim.map(e[0],e[1],"insert")})),e.get("nmap").composite.forEach((e=>{e[0]&&e[1]&&a.Vim.map(e[0],e[1],"normal")})),e.get("vmap").composite.forEach((e=>{e[0]&&e[1]&&a.Vim.map(e[0],e[1],"visual")})),e.get("inoremap").composite.forEach((e=>{e[0]&&e[1]&&a.Vim.noremap(e[0],e[1],"insert")})),e.get("nnoremap").composite.forEach((e=>{e[0]&&e[1]&&a.Vim.noremap(e[0],e[1],"normal")})),e.get("vnoremap").composite.forEach((e=>{e[0]&&e[1]&&a.Vim.noremap(e[0],e[1],"visual")}))}Promise.all([e.restored,r.load(c)]).then((([,e])=>{i(e),e.changed.connect(i)}))}}}}]);