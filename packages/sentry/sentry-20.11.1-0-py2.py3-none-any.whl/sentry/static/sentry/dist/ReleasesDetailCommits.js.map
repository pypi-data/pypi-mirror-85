{"version":3,"sources":["webpack:///./app/components/commitLink.tsx","webpack:///./app/components/commitRow.tsx","webpack:///./app/views/releases/detail/emptyState.tsx","webpack:///./app/views/releases/detail/repositorySwitcher.tsx","webpack:///./app/views/releases/detail/withRepositories/noRepoConnected.tsx","webpack:///./app/views/releases/detail/withRepositories/index.tsx","webpack:///./app/views/releases/detail/commits.tsx"],"names":["SUPPORTED_PROVIDERS","icon","size","providerIds","commitUrl","baseUrl","commitId","CommitLink","inline","repository","t","shortId","getShortCommitHash","providerData","find","provider","includes","id","undefined","url","className","href","external","CommitRow","message","split","author","EmailWarning","tct","actorEmail","email","accountSettings","StyledLink","to","inviteUser","onClick","openInviteMembersModal","initialData","emails","Set","source","this","props","commit","customAvatar","dateCreated","nonMemberEmail","key","AvatarWrapper","body","renderHovercardBody","user","EmailWarningIcon","CommitMessage","Message","renderMessage","Meta","name","timeago","date","React","Component","space","p","theme","fontSizeSmall","Link","textColor","white","yellow200","TextOverflow","subText","EmptyState","withIcon","children","small","RepositorySwitcher","state","dropdownButton","createRef","handleRepoFilterChange","activeRepo","router","location","push","query","cursor","setButtonDropDownWidth","dropdownButtonWidth","current","offsetWidth","setState","activeRepository","repositories","StyledDropdownControl","minMenuWidth","label","Fragment","FilterText","buttonProps","forwardRef","map","repo","repoName","onSelect","eventKey","isActive","RepoLabel","PureComponent","DropdownControl","borderRadius","button","border","gray300","overflowEllipsis","NoRepoConnected","orgId","dashedBorder","title","description","action","priority","withRepositories","WrappedComponent","isLoading","fetchRepositories","nextProps","setActiveRepo","_prevProps","prevState","length","matchedRepository","addErrorMessage","params","release","project","context","slug","encodeURIComponent","api","requestPromise","getEndpoint","Sentry","projectSlug","displayName","getDisplayName","contextType","ReleaseContext","Commits","routeTitleGen","formatVersion","commits","getQuery","commitsPageLinks","commitsByRepository","getCommitsByRepository","reposToRender","getReposToRender","Object","keys","pageLinks","renderContent","AsyncView","withApi"],"mappings":"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","file":"ReleasesDetailCommits.js","sourcesContent":["import React from 'react';\n\nimport {Repository} from 'app/types';\nimport {t} from 'app/locale';\nimport {getShortCommitHash} from 'app/utils';\nimport Button from 'app/components/button';\nimport {IconBitbucket, IconGithub, IconGitlab, IconVsts} from 'app/icons';\nimport ExternalLink from 'app/components/links/externalLink';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: React.ReactNode;\n  providerIds: string[];\n  commitUrl: (CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: <IconGithub size=\"xs\" />,\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconBitbucket size=\"xs\" />,\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: <IconVsts size=\"xs\" />,\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconGitlab size=\"xs\" />,\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      {providerData.icon}\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nexport default CommitLink;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Commit} from 'app/types';\nimport {openInviteMembersModal} from 'app/actionCreators/modal';\nimport {PanelItem} from 'app/components/panels';\nimport {t, tct} from 'app/locale';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport CommitLink from 'app/components/commitLink';\nimport Hovercard from 'app/components/hovercard';\nimport {IconWarning} from 'app/icons';\nimport Link from 'app/components/links/link';\nimport TextOverflow from 'app/components/textOverflow';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\n\ntype Props = {\n  commit: Commit;\n  customAvatar?: React.ReactNode;\n};\n\nclass CommitRow extends React.Component<Props> {\n  static propTypes = {\n    commit: PropTypes.object,\n    customAvatar: PropTypes.node,\n  };\n\n  renderMessage(message: Commit['message']): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n\n    return firstLine;\n  }\n\n  renderHovercardBody(author) {\n    return (\n      <EmailWarning>\n        {tct(\n          'The email [actorEmail] is not a member of your organization. [inviteUser:Invite] them or link additional emails in [accountSettings:account settings].',\n          {\n            actorEmail: <strong>{author.email}</strong>,\n            accountSettings: <StyledLink to=\"/settings/account/emails/\" />,\n            inviteUser: (\n              <StyledLink\n                to=\"\"\n                onClick={() =>\n                  openInviteMembersModal({\n                    initialData: [\n                      {\n                        emails: new Set([author.email]),\n                      },\n                    ],\n                    source: 'suspect_commit',\n                  })\n                }\n              />\n            ),\n          }\n        )}\n      </EmailWarning>\n    );\n  }\n\n  render() {\n    const {commit, customAvatar, ...props} = this.props;\n    const {id, dateCreated, message, author, repository} = commit;\n    const nonMemberEmail = author && author.id === undefined;\n\n    return (\n      <PanelItem key={id} {...props}>\n        {customAvatar ? (\n          customAvatar\n        ) : nonMemberEmail ? (\n          <AvatarWrapper>\n            <Hovercard body={this.renderHovercardBody(author)}>\n              <UserAvatar size={36} user={author} />\n              <EmailWarningIcon>\n                <IconWarning size=\"xs\" />\n              </EmailWarningIcon>\n            </Hovercard>\n          </AvatarWrapper>\n        ) : (\n          <AvatarWrapper>\n            <UserAvatar size={36} user={author} />\n          </AvatarWrapper>\n        )}\n\n        <CommitMessage>\n          <Message>{this.renderMessage(message)}</Message>\n          <Meta>\n            {tct('[author] committed [timeago]', {\n              author: <strong>{(author && author.name) || t('Unknown author')}</strong>,\n              timeago: <TimeSince date={dateCreated} />,\n            })}\n          </Meta>\n        </CommitMessage>\n\n        <div>\n          <CommitLink commitId={id} repository={repository} />\n        </div>\n      </PanelItem>\n    );\n  }\n}\n\nconst AvatarWrapper = styled('div')`\n  align-self: flex-start;\n  margin-right: ${space(2)};\n`;\n\nconst EmailWarning = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  line-height: 1.4;\n  margin: -4px;\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${p => p.theme.textColor};\n  border-bottom: 1px dotted ${p => p.theme.textColor};\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst EmailWarningIcon = styled('span')`\n  position: relative;\n  top: 15px;\n  left: -11px;\n  display: inline-block;\n  line-height: 12px;\n  border-radius: 50%;\n  border: 1px solid ${p => p.theme.white};\n  background: ${p => p.theme.yellow200};\n  padding: 1px 2px 3px 2px;\n`;\n\nconst CommitMessage = styled('div')`\n  flex: 1;\n  flex-direction: column;\n  min-width: 0;\n  margin-right: ${space(2)};\n`;\n\nconst Message = styled(TextOverflow)`\n  font-size: 15px;\n  line-height: 1.1;\n  font-weight: bold;\n`;\n\nconst Meta = styled(TextOverflow)`\n  font-size: 13px;\n  line-height: 1.5;\n  margin: 0;\n  color: ${p => p.theme.subText};\n`;\n\nexport default styled(CommitRow)`\n  align-items: center;\n`;\n","import React from 'react';\n\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport {Panel, PanelBody} from 'app/components/panels';\n\ntype Props = Pick<React.ComponentProps<typeof EmptyStateWarning>, 'withIcon'> & {\n  children: React.ReactNode;\n};\n\nconst EmptyState = ({withIcon, children}: Props) => (\n  <Panel>\n    <PanelBody>\n      <EmptyStateWarning small withIcon={withIcon}>\n        {children}\n      </EmptyStateWarning>\n    </PanelBody>\n  </Panel>\n);\n\nexport default EmptyState;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport {InjectedRouter} from 'react-router';\n\nimport {t} from 'app/locale';\nimport DropdownControl, {DropdownItem} from 'app/components/dropdownControl';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport space from 'app/styles/space';\nimport {Repository} from 'app/types';\n\ntype Props = {\n  repositories: Array<Repository>;\n  router: InjectedRouter;\n  location: Location;\n  activeRepository?: Repository;\n};\n\ntype State = {\n  dropdownButtonWidth?: number;\n};\n\nclass RepositorySwitcher extends React.PureComponent<Props, State> {\n  state: State = {};\n\n  componentDidMount() {\n    this.setButtonDropDownWidth();\n  }\n  setButtonDropDownWidth() {\n    const dropdownButtonWidth = this.dropdownButton?.current?.offsetWidth;\n    if (dropdownButtonWidth) {\n      this.setState({dropdownButtonWidth});\n    }\n  }\n\n  dropdownButton = React.createRef<HTMLButtonElement>();\n  handleRepoFilterChange = (activeRepo: string) => {\n    const {router, location} = this.props;\n\n    router.push({\n      ...location,\n      query: {...location.query, cursor: undefined, activeRepo},\n    });\n  };\n\n  render() {\n    const {activeRepository, repositories} = this.props;\n    const {dropdownButtonWidth} = this.state;\n\n    const activeRepo = activeRepository?.name;\n\n    return (\n      <StyledDropdownControl\n        minMenuWidth={dropdownButtonWidth}\n        label={\n          <React.Fragment>\n            <FilterText>{`${t('Filter')}:`}</FilterText>\n            {activeRepo}\n          </React.Fragment>\n        }\n        buttonProps={{forwardRef: this.dropdownButton}}\n      >\n        {repositories\n          .map(repo => repo.name)\n          .map(repoName => (\n            <DropdownItem\n              key={repoName}\n              onSelect={this.handleRepoFilterChange}\n              eventKey={repoName}\n              isActive={repoName === activeRepo}\n            >\n              <RepoLabel>{repoName}</RepoLabel>\n            </DropdownItem>\n          ))}\n      </StyledDropdownControl>\n    );\n  }\n}\n\nexport default RepositorySwitcher;\n\nconst StyledDropdownControl = styled(DropdownControl)<{\n  minMenuWidth: State['dropdownButtonWidth'];\n}>`\n  margin-bottom: ${space(1)};\n  > *:nth-child(2) {\n    right: auto;\n    width: auto;\n    ${p => p.minMenuWidth && `min-width: calc(${p.minMenuWidth}px + 10px);`}\n    border-radius: ${p => p.theme.borderRadius};\n    border-top-left-radius: 0px;\n    border: 1px solid ${p => p.theme.button.default.border};\n    top: calc(100% - 1px);\n  }\n`;\n\nconst FilterText = styled('em')`\n  font-style: normal;\n  color: ${p => p.theme.gray300};\n  margin-right: ${space(0.5)};\n`;\n\nconst RepoLabel = styled('div')`\n  ${overflowEllipsis}\n`;\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport {IconCommit} from 'app/icons';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport {Panel} from 'app/components/panels';\n\ntype Props = {\n  orgId: string;\n};\n\nconst NoRepoConnected = ({orgId}: Props) => (\n  <Panel dashedBorder>\n    <EmptyMessage\n      icon={<IconCommit size=\"xl\" />}\n      title={t('Releases are better with commit data!')}\n      description={t(\n        'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n      )}\n      action={\n        <Button priority=\"primary\" to={`/settings/${orgId}/repos/`}>\n          {t('Connect a repository')}\n        </Button>\n      }\n    />\n  </Panel>\n);\n\nexport default NoRepoConnected;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport * as Sentry from '@sentry/react';\n\nimport {t} from 'app/locale';\nimport {Client} from 'app/api';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport {Repository} from 'app/types';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {addErrorMessage} from 'app/actionCreators/indicator';\n\nimport {ReleaseContext} from '..';\nimport NoRepoConnected from './noRepoConnected';\n\n// We require these props when using this HOC\ntype Props = RouteComponentProps<{orgId: string; release: string}, {}> & {\n  api: Client;\n};\n\ntype State = {\n  repositories: Array<Repository>;\n  isLoading: boolean;\n  activeRepository?: Repository | null;\n};\n\nconst withRepositories = <P extends Props>(WrappedComponent: React.ComponentType<P>) =>\n  class extends React.Component<P, State> {\n    static displayName = `withRepositories(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      repositories: [],\n      isLoading: true,\n    };\n\n    componentDidMount() {\n      this.fetchRepositories();\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps: P) {\n      this.setActiveRepo(nextProps);\n    }\n\n    componentDidUpdate(_prevProps: P, prevState: State) {\n      if (prevState.repositories.length !== this.state.repositories.length) {\n        this.setActiveRepo(this.props);\n      }\n    }\n    static contextType = ReleaseContext;\n\n    setActiveRepo(props: P) {\n      const {repositories, activeRepository} = this.state;\n\n      if (!repositories.length) {\n        return;\n      }\n\n      const activeRepo = props.location.query?.activeRepo;\n\n      if (!activeRepo) {\n        this.setState({\n          activeRepository: repositories[0] ?? null,\n        });\n        return;\n      }\n\n      if (activeRepo === activeRepository?.name) {\n        return;\n      }\n\n      const matchedRepository = repositories.find(repo => repo.name === activeRepo);\n\n      if (matchedRepository) {\n        this.setState({\n          activeRepository: matchedRepository,\n        });\n        return;\n      }\n\n      addErrorMessage(t('The repository you were looking for was not found.'));\n    }\n\n    getEndpoint() {\n      const {params} = this.props;\n      const {release, orgId} = params;\n      const {project} = this.context;\n\n      return `/projects/${orgId}/${project.slug}/releases/${encodeURIComponent(\n        release\n      )}/repositories/`;\n    }\n    async fetchRepositories() {\n      const {params} = this.props;\n      const {release} = params;\n      this.setState({isLoading: true});\n      try {\n        const repositories = await this.props.api.requestPromise(this.getEndpoint());\n        this.setState({repositories, isLoading: false});\n      } catch (error) {\n        Sentry.captureException(error);\n        addErrorMessage(\n          t(\n            'An error occured while trying to fetch the repositories of the release: %s',\n            release\n          )\n        );\n      }\n    }\n\n    render() {\n      const {isLoading, activeRepository, repositories} = this.state;\n\n      if (isLoading) {\n        return <LoadingIndicator />;\n      }\n\n      if (!repositories.length) {\n        return <NoRepoConnected orgId={this.props.params.orgId} />;\n      }\n\n      if (activeRepository === undefined) {\n        return <LoadingIndicator />;\n      }\n\n      return (\n        <WrappedComponent\n          {...(this.props as P)}\n          projectSlug={this.context.project.slug}\n          repositories={repositories}\n          activeRepository={activeRepository}\n        />\n      );\n    }\n  };\n\nexport default withRepositories;\n","import React from 'react';\nimport {RouteComponentProps} from 'react-router/lib/Router';\n\nimport {Client} from 'app/api';\nimport CommitRow from 'app/components/commitRow';\nimport {t} from 'app/locale';\nimport {Commit, Repository} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport {formatVersion} from 'app/utils/formatters';\nimport withApi from 'app/utils/withApi';\nimport Pagination from 'app/components/pagination';\nimport AsyncView from 'app/views/asyncView';\nimport {PanelHeader, Panel, PanelBody} from 'app/components/panels';\n\nimport {getCommitsByRepository, getQuery, getReposToRender} from './utils';\nimport withRepositories from './withRepositories';\nimport RepositorySwitcher from './repositorySwitcher';\nimport EmptyState from './emptyState';\n\ntype Props = RouteComponentProps<{orgId: string; release: string}, {}> & {\n  api: Client;\n  repositories: Array<Repository>;\n  projectSlug: string;\n  activeRepository?: Repository;\n} & AsyncView['props'];\n\ntype State = {\n  commits: Commit[];\n} & AsyncView['state'];\n\nclass Commits extends AsyncView<Props, State> {\n  getTitle() {\n    const {params} = this.props;\n    const {orgId} = params;\n\n    return routeTitleGen(\n      t('Commits - Release %s', formatVersion(params.release)),\n      orgId,\n      false\n    );\n  }\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      commits: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params, projectSlug, activeRepository, location} = this.props;\n    const {orgId, release} = params;\n    const query = getQuery({location, activeRepository});\n\n    return [\n      [\n        'commits',\n        `/projects/${orgId}/${projectSlug}/releases/${encodeURIComponent(\n          release\n        )}/commits/`,\n        {query},\n      ],\n    ];\n  }\n\n  renderContent() {\n    const {commits, commitsPageLinks} = this.state;\n    const {activeRepository} = this.props;\n\n    if (!commits.length) {\n      return (\n        <EmptyState>\n          {!activeRepository\n            ? t('There are no commits associated with this release.')\n            : t(\n                'There are no commits associated with this release in the %s repository.',\n                activeRepository.name\n              )}\n        </EmptyState>\n      );\n    }\n\n    const commitsByRepository = getCommitsByRepository(commits);\n    const reposToRender = getReposToRender(Object.keys(commitsByRepository));\n\n    return (\n      <React.Fragment>\n        {reposToRender.map(repoName => (\n          <Panel key={repoName}>\n            <PanelHeader>{repoName}</PanelHeader>\n            <PanelBody>\n              {commitsByRepository[repoName]?.map(commit => (\n                <CommitRow key={commit.id} commit={commit} />\n              ))}\n            </PanelBody>\n          </Panel>\n        ))}\n        <Pagination pageLinks={commitsPageLinks} />\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {location, router, activeRepository, repositories} = this.props;\n\n    return (\n      <React.Fragment>\n        {repositories.length > 1 && (\n          <RepositorySwitcher\n            repositories={repositories}\n            activeRepository={activeRepository}\n            location={location}\n            router={router}\n          />\n        )}\n        {this.renderContent()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApi(withRepositories(Commits));\n"],"sourceRoot":""}