{"version":3,"sources":["webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/components/charts/styles.tsx","webpack:///./app/components/breadcrumbs.tsx","webpack:///./app/components/events/rootSpanStatus.tsx","webpack:///./app/components/events/opsBreakdown.tsx","webpack:///./app/components/events/eventMetadata.tsx","webpack:///./app/components/tagsTable.tsx","webpack:///./app/utils/measurements/index.tsx","webpack:///./app/components/events/realUserMonitoring.tsx","webpack:////workspace/node_modules/lodash/isFinite.js"],"names":["SentryDocumentTitle","props","_title","title","objSlug","children","ChartControls","space","p","theme","border","SectionHeading","subText","fontSizeMedium","SectionValue","InlineContainer","Breadcrumbs","crumbs","linkLastItem","length","to","BreadcrumbList","map","index","label","preserveGlobalSelection","key","labelKey","mapKey","Fragment","BreadcrumbLink","BreadcrumbItem","BreadcrumbDividerIcon","size","direction","getBreadcrumbListItemStyles","gray300","overflowEllipsis","textColor","IconChevron","RootSpanStatus","event","this","type","getTransactionEvent","traceContext","contexts","trace","status","tags","Array","isArray","tag","find","tagObject","value","getHttpStatusCode","getRootSpanStatus","trim","Container","Header","t","React","Component","OtherOperation","Symbol","OpsBreakdown","spanEntry","entries","entry","spans","data","operationNameIntervals","op","timestamp","endTimestamp","start_timestamp","startTimestamp","trace_id","span_id","reduce","intervals","span","operationName","cover","operationNameInterval","push","sort","first","second","merged","currentInterval","lastInterval","lastIntervalEnd","currentIntervalStart","currentIntervalEnd","Math","max","mergeInterval","operationNameCoverage","Object","acc","duration","sum","start","end","abs","sortedOpsBreakdown","firstDuration","secondDuration","breakdown","slice","name","percentage","totalInterval","other","accOther","total","operationNameGroup","forEach","generateStats","StyledBreakdown","position","containerDisplayMode","currOp","isOther","durLabel","round","pctLabel","isFinite","opsColor","pickSpanBarColour","OpsLine","OpsNameContainer","OpsDot","style","backgroundColor","OpsName","OpsContent","Dur","Pct","EventMetadata","organization","projectId","eventJsonUrl","slug","eventID","MetaDataID","MetadataContainer","data-test-id","date","getDynamicText","dateCreated","fixed","orgId","slugs","project","projects","StyledProjectBadge","avatarSize","MetadataJSON","href","className","bytes","ExternalLink","ProjectBadge","TagsTable","query","generateUrl","StyledTagsTable","StyledTable","tagInQuery","includes","target","undefined","renderTagValue","version","anchor","withPackage","StyledTr","TagKey","TagValue","backgroundSecondary","formattedValue","record","getDuration","toFixed","RealUserMonitoring","measurements","keys","filter","startsWith","values","WEB_VITAL_DETAILS","vital","failedThreshold","failureThreshold","currentValue","thresholdValue","LONG_WEB_VITAL_NAMES","hasOwnProperty","StyledPanel","Name","ValueRow","FireIconContainer","Value","sdk","sdkVersion","hasMeasurements","isOutdatedSdk","WarningIconContainer","Measurements","renderMeasurements","Panel","red300","iconSizes","fontSizeExtraLarge","nativeIsFinite","module","exports"],"mappings":"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","file":"DiscoverV2Details~PerformanceTransactionDetails.js","sourcesContent":["import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nexport const ChartControls = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  padding: ${space(1)} ${space(3)};\n  border-top: 1px solid ${p => p.theme.border};\n`;\n\nexport const SubHeading = styled('h3')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  font-weight: normal;\n  color: ${p => p.theme.textColor};\n  margin: 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport const SectionHeading = styled('h4')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  align-items: center;\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: ${space(1)} 0;\n  line-height: 1.3;\n`;\n\nexport const SectionValue = styled('span')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-right: ${space(1)};\n`;\n\nexport const InlineContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  margin-right: ${space(2)};\n\n  > h4 {\n    margin-right: ${space(1)};\n  }\n\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {IconChevron} from 'app/icons';\nimport Link from 'app/components/links/link';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport {Theme} from 'app/utils/theme';\n\nexport type Crumb = {\n  /**\n   * Label of the crumb\n   */\n  label: React.ReactNode;\n\n  /**\n   * Link of the crumb\n   */\n  to?: React.ComponentProps<typeof Link>['to'] | null;\n\n  /**\n   * It will keep the global selection values (projects, environments, time) in the\n   * querystring when navigating (GlobalSelectionLink)\n   */\n  preserveGlobalSelection?: boolean;\n\n  /**\n   * Component will try to come up with unique key, but you can provide your own\n   * (used when mapping over crumbs)\n   */\n  key?: string;\n};\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  /**\n   * Array of crumbs that will be rendered\n   */\n  crumbs: Crumb[];\n\n  /**\n   * As a general rule of thumb we don't want the last item to be link as it most likely\n   * points to the same page we are currently on. This is by default false, so that\n   * people don't have to check if crumb is last in the array and then manually\n   * assign `to: null/undefined` when passing props to this component.\n   */\n  linkLastItem?: boolean;\n};\n\n/**\n * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs\n */\nconst Breadcrumbs = ({crumbs, linkLastItem = false, ...props}: Props) => {\n  if (crumbs.length === 0) {\n    return null;\n  }\n\n  if (!linkLastItem) {\n    crumbs[crumbs.length - 1].to = null;\n  }\n\n  return (\n    <BreadcrumbList {...props}>\n      {crumbs.map(({label, to, preserveGlobalSelection, key}, index) => {\n        const labelKey = typeof label === 'string' ? label : '';\n        const mapKey =\n          key ?? typeof to === 'string' ? `${labelKey}${to}` : `${labelKey}${index}`;\n\n        return (\n          <React.Fragment key={mapKey}>\n            {to ? (\n              <BreadcrumbLink to={to} preserveGlobalSelection={preserveGlobalSelection}>\n                {label}\n              </BreadcrumbLink>\n            ) : (\n              <BreadcrumbItem>{label}</BreadcrumbItem>\n            )}\n\n            {index < crumbs.length - 1 && (\n              <BreadcrumbDividerIcon size=\"xs\" direction=\"right\" />\n            )}\n          </React.Fragment>\n        );\n      })}\n    </BreadcrumbList>\n  );\n};\n\nconst getBreadcrumbListItemStyles = (p: {theme: Theme}) => `\n  color: ${p.theme.gray300};\n  ${overflowEllipsis};\n  width: auto;\n\n  &:last-child {\n    color: ${p.theme.textColor};\n  }\n`;\n\nconst BreadcrumbList = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 0;\n`;\n\nconst BreadcrumbLink = styled(({preserveGlobalSelection, ...props}) =>\n  preserveGlobalSelection ? <GlobalSelectionLink {...props} /> : <Link {...props} />\n)`\n  ${getBreadcrumbListItemStyles}\n\n  &:hover,\n  &:active {\n    color: ${p => p.theme.subText};\n  }\n`;\n\nconst BreadcrumbItem = styled('span')`\n  ${getBreadcrumbListItemStyles}\n`;\n\nconst BreadcrumbDividerIcon = styled(IconChevron)`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n  flex-shrink: 0;\n`;\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Event, SentryTransactionEvent} from 'app/types';\nimport {TraceContextType} from 'app/components/events/interfaces/spans/types';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\n\ntype Props = {\n  event: Event;\n};\n\nclass RootSpanStatus extends React.Component<Props> {\n  getTransactionEvent(): SentryTransactionEvent | undefined {\n    const {event} = this.props;\n\n    if (event.type === 'transaction') {\n      return event as SentryTransactionEvent;\n    }\n\n    return undefined;\n  }\n\n  getRootSpanStatus(): string {\n    const event = this.getTransactionEvent();\n\n    const DEFAULT = '\\u2014';\n\n    if (!event) {\n      return DEFAULT;\n    }\n\n    const traceContext: TraceContextType | undefined = event?.contexts?.trace;\n\n    return traceContext?.status ?? DEFAULT;\n  }\n\n  getHttpStatusCode(): string {\n    const {event} = this.props;\n\n    const {tags} = event;\n\n    if (!Array.isArray(tags)) {\n      return '';\n    }\n\n    const tag = tags.find(tagObject => tagObject.key === 'http.status_code');\n\n    if (!tag) {\n      return '';\n    }\n\n    return tag.value;\n  }\n\n  render() {\n    const event = this.getTransactionEvent();\n\n    if (!event) {\n      return null;\n    }\n\n    const label = `${this.getHttpStatusCode()} ${this.getRootSpanStatus()}`.trim();\n\n    return (\n      <Container>\n        <Header>\n          <SectionHeading>{t('Status')}</SectionHeading>\n        </Header>\n        <div>{label}</div>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(4)};\n`;\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nexport default RootSpanStatus;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport isFinite from 'lodash/isFinite';\n\nimport {Event, SentryTransactionEvent} from 'app/types';\nimport {\n  SpanEntry,\n  RawSpanType,\n  TraceContextType,\n} from 'app/components/events/interfaces/spans/types';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport {pickSpanBarColour} from 'app/components/events/interfaces/spans/utils';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\n\ntype StartTimestamp = number;\ntype EndTimestamp = number;\ntype Duration = number;\n\ntype TimeWindowSpan = [StartTimestamp, EndTimestamp];\n\nconst OtherOperation = Symbol('Other');\n\ntype OperationName = string | typeof OtherOperation;\n\n// mapping an operation name to a disjoint set of time intervals (start/end timestamp).\n// this is an intermediary data structure to help calculate the coverage of an operation name\n// with respect to the root transaction span's operation lifetime\ntype OperationNameIntervals = Record<OperationName, Array<TimeWindowSpan>>;\ntype OperationNameCoverage = Record<OperationName, Duration>;\n\ntype OpStats = {\n  name: OperationName;\n  percentage: number;\n  totalInterval: number;\n};\n\nconst TOP_N_SPANS = 4;\n\ntype OpBreakdownType = OpStats[];\n\ntype Props = {\n  event: Event;\n};\n\nclass OpsBreakdown extends React.Component<Props> {\n  getTransactionEvent(): SentryTransactionEvent | undefined {\n    const {event} = this.props;\n\n    if (event.type === 'transaction') {\n      return event as SentryTransactionEvent;\n    }\n\n    return undefined;\n  }\n\n  generateStats(): OpBreakdownType {\n    const event = this.getTransactionEvent();\n\n    if (!event) {\n      return [];\n    }\n\n    const traceContext: TraceContextType | undefined = event?.contexts?.trace;\n\n    if (!traceContext) {\n      return [];\n    }\n\n    const spanEntry: SpanEntry | undefined = event.entries.find(\n      (entry: {type: string}) => entry.type === 'spans'\n    );\n\n    let spans: RawSpanType[] = spanEntry?.data ?? [];\n\n    spans =\n      spans.length > 0\n        ? spans\n        : // if there are no descendent spans, then use the transaction root span\n          [\n            {\n              op: traceContext.op,\n              timestamp: event.endTimestamp,\n              start_timestamp: event.startTimestamp,\n              trace_id: traceContext.trace_id || '',\n              span_id: traceContext.span_id || '',\n              data: {},\n            },\n          ];\n\n    const operationNameIntervals = spans.reduce(\n      (intervals: Partial<OperationNameIntervals>, span: RawSpanType) => {\n        let startTimestamp = span.start_timestamp;\n        let endTimestamp = span.timestamp;\n\n        if (endTimestamp < startTimestamp) {\n          // reverse timestamps\n          startTimestamp = span.timestamp;\n          endTimestamp = span.start_timestamp;\n        }\n\n        // invariant: startTimestamp <= endTimestamp\n\n        let operationName = span.op;\n\n        if (typeof operationName !== 'string') {\n          // a span with no operation name is considered an 'unknown' op\n          operationName = 'unknown';\n        }\n\n        const cover: TimeWindowSpan = [startTimestamp, endTimestamp];\n\n        const operationNameInterval = intervals[operationName];\n\n        if (!Array.isArray(operationNameInterval)) {\n          intervals[operationName] = [cover];\n\n          return intervals;\n        }\n\n        operationNameInterval.push(cover);\n\n        intervals[operationName] = mergeInterval(operationNameInterval);\n\n        return intervals;\n      },\n      {}\n    ) as OperationNameIntervals;\n\n    const operationNameCoverage = Object.entries(operationNameIntervals).reduce(\n      (\n        acc: Partial<OperationNameCoverage>,\n        [operationName, intervals]: [OperationName, TimeWindowSpan[]]\n      ) => {\n        const duration = intervals.reduce((sum: number, [start, end]) => {\n          return sum + Math.abs(end - start);\n        }, 0);\n\n        acc[operationName] = duration;\n\n        return acc;\n      },\n      {}\n    ) as OperationNameCoverage;\n\n    const sortedOpsBreakdown = Object.entries(operationNameCoverage).sort(\n      (first: [OperationName, Duration], second: [OperationName, Duration]) => {\n        const firstDuration = first[1];\n        const secondDuration = second[1];\n\n        if (firstDuration === secondDuration) {\n          return 0;\n        }\n\n        if (firstDuration < secondDuration) {\n          // sort second before first\n          return 1;\n        }\n\n        // otherwise, sort first before second\n        return -1;\n      }\n    );\n\n    const breakdown = sortedOpsBreakdown.slice(0, TOP_N_SPANS).map(\n      ([operationName, duration]: [OperationName, Duration]): OpStats => {\n        return {\n          name: operationName,\n          // percentage to be recalculated after the ops breakdown group is decided\n          percentage: 0,\n          totalInterval: duration,\n        };\n      }\n    );\n\n    const other = sortedOpsBreakdown.slice(TOP_N_SPANS).reduce(\n      (accOther: OpStats, [_operationName, duration]: [OperationName, Duration]) => {\n        accOther.totalInterval += duration;\n\n        return accOther;\n      },\n      {\n        name: OtherOperation,\n        // percentage to be recalculated after the ops breakdown group is decided\n        percentage: 0,\n        totalInterval: 0,\n      }\n    );\n\n    if (other.totalInterval > 0) {\n      breakdown.push(other);\n    }\n\n    // calculate breakdown total duration\n\n    const total = breakdown.reduce((sum: number, operationNameGroup) => {\n      return sum + operationNameGroup.totalInterval;\n    }, 0);\n\n    // recalculate percentage values\n\n    breakdown.forEach(operationNameGroup => {\n      operationNameGroup.percentage = operationNameGroup.totalInterval / total;\n    });\n\n    return breakdown;\n  }\n\n  render() {\n    const event = this.getTransactionEvent();\n\n    if (!event) {\n      return null;\n    }\n\n    const breakdown = this.generateStats();\n\n    return (\n      <StyledBreakdown>\n        <SectionHeading>\n          {t('Operation Breakdown')}\n          <QuestionTooltip\n            position=\"top\"\n            size=\"sm\"\n            containerDisplayMode=\"block\"\n            title={t(\n              'Durations are calculated by summing span durations over the course of the transaction. Percentages are then calculated by dividing the individual op duration by the sum of total op durations. Overlapping/parallel spans are only counted once.'\n            )}\n          />\n        </SectionHeading>\n        {breakdown.map(currOp => {\n          const {name, percentage, totalInterval} = currOp;\n\n          const isOther = name === OtherOperation;\n          const operationName = typeof name === 'string' ? name : t('Other');\n\n          const durLabel = Math.round(totalInterval * 1000 * 100) / 100;\n          const pctLabel = isFinite(percentage) ? Math.round(percentage * 100) : '∞';\n          const opsColor: string = pickSpanBarColour(operationName);\n\n          return (\n            <OpsLine key={operationName}>\n              <OpsNameContainer>\n                <OpsDot style={{backgroundColor: isOther ? 'transparent' : opsColor}} />\n                <OpsName>{operationName}</OpsName>\n              </OpsNameContainer>\n              <OpsContent>\n                <Dur>{durLabel}ms</Dur>\n                <Pct>{pctLabel}%</Pct>\n              </OpsContent>\n            </OpsLine>\n          );\n        })}\n      </StyledBreakdown>\n    );\n  }\n}\n\nconst StyledBreakdown = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(4)};\n`;\n\nconst OpsLine = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: ${space(0.5)};\n\n  * + * {\n    margin-left: ${space(0.5)};\n  }\n`;\n\nconst OpsDot = styled('div')`\n  content: '';\n  display: block;\n  width: 8px;\n  min-width: 8px;\n  height: 8px;\n  margin-right: ${space(1)};\n  border-radius: 100%;\n`;\n\nconst OpsContent = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst OpsNameContainer = styled(OpsContent)`\n  overflow: hidden;\n`;\n\nconst OpsName = styled('div')`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst Dur = styled('div')`\n  color: ${p => p.theme.gray300};\n`;\n\nconst Pct = styled('div')`\n  min-width: 40px;\n  text-align: right;\n`;\n\nfunction mergeInterval(intervals: TimeWindowSpan[]): TimeWindowSpan[] {\n  // sort intervals by start timestamps\n  intervals.sort((first: TimeWindowSpan, second: TimeWindowSpan) => {\n    if (first[0] < second[0]) {\n      // sort first before second\n      return -1;\n    }\n\n    if (second[0] < first[0]) {\n      // sort second before first\n      return 1;\n    }\n\n    return 0;\n  });\n\n  // array of disjoint intervals\n  const merged: TimeWindowSpan[] = [];\n\n  for (const currentInterval of intervals) {\n    if (merged.length === 0) {\n      merged.push(currentInterval);\n      continue;\n    }\n\n    const lastInterval = merged[merged.length - 1];\n    const lastIntervalEnd = lastInterval[1];\n\n    const [currentIntervalStart, currentIntervalEnd] = currentInterval;\n\n    if (lastIntervalEnd < currentIntervalStart) {\n      // if currentInterval does not overlap with lastInterval,\n      // then add currentInterval\n      merged.push(currentInterval);\n      continue;\n    }\n\n    // currentInterval and lastInterval overlaps; so we merge these intervals\n\n    // invariant: lastIntervalStart <= currentIntervalStart\n\n    lastInterval[1] = Math.max(lastIntervalEnd, currentIntervalEnd);\n  }\n\n  return merged;\n}\n\nexport default OpsBreakdown;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport {Event, OrganizationSummary} from 'app/types';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport DateTime from 'app/components/dateTime';\nimport ExternalLink from 'app/components/links/externalLink';\nimport FileSize from 'app/components/fileSize';\nimport ProjectBadge from 'app/components/idBadge/projectBadge';\nimport space from 'app/styles/space';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport Projects from 'app/utils/projects';\n\ntype Props = {\n  event: Event;\n  organization: OrganizationSummary;\n  projectId: string;\n};\n\n/**\n * Render metadata about the event and provide a link to the JSON blob.\n * Used in the sidebar of performance event details and discover2 event details.\n */\nfunction EventMetadata({event, organization, projectId}: Props) {\n  const eventJsonUrl = `/api/0/projects/${organization.slug}/${projectId}/events/${event.eventID}/json/`;\n\n  return (\n    <MetaDataID>\n      <SectionHeading>{t('Event ID')}</SectionHeading>\n      <MetadataContainer data-test-id=\"event-id\">{event.eventID}</MetadataContainer>\n      <MetadataContainer>\n        <DateTime\n          date={getDynamicText({\n            value: event.dateCreated || (event.endTimestamp || 0) * 1000,\n            fixed: 'Dummy timestamp',\n          })}\n        />\n      </MetadataContainer>\n      <Projects orgId={organization.slug} slugs={[projectId]}>\n        {({projects}) => {\n          const project = projects.find(p => p.slug === projectId);\n          return (\n            <StyledProjectBadge\n              project={project ? project : {slug: projectId}}\n              avatarSize={16}\n            />\n          );\n        }}\n      </Projects>\n      <MetadataJSON href={eventJsonUrl} className=\"json-link\">\n        {t('Preview JSON')} (<FileSize bytes={event.size} />)\n      </MetadataJSON>\n    </MetaDataID>\n  );\n}\n\nconst MetaDataID = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nconst MetadataContainer = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst MetadataJSON = styled(ExternalLink)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StyledProjectBadge = styled(ProjectBadge)`\n  margin-bottom: ${space(2)};\n`;\n\nexport default EventMetadata;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport {SectionHeading} from 'app/components/charts/styles';\nimport Link from 'app/components/links/link';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\nimport {Event, EventTag} from 'app/types';\nimport Version from 'app/components/version';\n\ntype Props = {\n  event: Event;\n  query: string;\n  generateUrl: (tag: EventTag) => LocationDescriptor;\n  title?: React.ReactNode;\n};\n\nconst TagsTable = ({\n  event,\n  query,\n  generateUrl,\n  title = t('Event Tag Details'),\n}: Props) => {\n  const tags = event.tags;\n\n  return (\n    <StyledTagsTable>\n      <SectionHeading>{title}</SectionHeading>\n      <StyledTable>\n        <tbody>\n          {tags.map(tag => {\n            const tagInQuery = query.includes(`${tag.key}:`);\n            const target = tagInQuery ? undefined : generateUrl(tag);\n\n            const renderTagValue = () => {\n              switch (tag.key) {\n                case 'release':\n                  return <Version version={tag.value} anchor={false} withPackage />;\n                default:\n                  return tag.value;\n              }\n            };\n\n            return (\n              <StyledTr key={tag.key}>\n                <TagKey>{tag.key}</TagKey>\n                <TagValue>\n                  {tagInQuery ? (\n                    <Tooltip title={t('This tag is in the current filter conditions')}>\n                      <span>{renderTagValue()}</span>\n                    </Tooltip>\n                  ) : (\n                    <Link to={target || ''}>{renderTagValue()}</Link>\n                  )}\n                </TagValue>\n              </StyledTr>\n            );\n          })}\n        </tbody>\n      </StyledTable>\n    </StyledTagsTable>\n  );\n};\n\nconst StyledTagsTable = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst StyledTable = styled('table')`\n  table-layout: fixed;\n  width: 100%;\n  max-width: 100%;\n`;\n\nconst StyledTr = styled('tr')`\n  &:nth-child(2n + 1) td {\n    background-color: ${p => p.theme.backgroundSecondary};\n  }\n`;\n\nconst TagKey = styled('td')`\n  padding: ${space(0.5)} ${space(1)};\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst TagValue = styled(TagKey)`\n  text-align: right;\n  ${overflowEllipsis};\n`;\n\nexport default TagsTable;\n","import {Vital} from 'app/views/performance/transactionVitals/types';\nimport {getDuration} from 'app/utils/formatters';\n\nexport function formattedValue(record: Vital | undefined, value: number): string {\n  if (record && record.type === 'duration') {\n    return getDuration(value / 1000, 3);\n  }\n\n  return value.toFixed(3);\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Event} from 'app/types';\nimport {IconSize} from 'app/utils/theme';\nimport {t} from 'app/locale';\nimport {SectionHeading} from 'app/components/charts/styles';\nimport {Panel} from 'app/components/panels';\nimport space from 'app/styles/space';\nimport Tooltip from 'app/components/tooltip';\nimport {IconFire, IconWarning} from 'app/icons';\nimport {\n  WEB_VITAL_DETAILS,\n  LONG_WEB_VITAL_NAMES,\n} from 'app/views/performance/transactionVitals/constants';\nimport {formattedValue} from 'app/utils/measurements/index';\n\ntype Props = {\n  event: Event;\n};\n\nclass RealUserMonitoring extends React.Component<Props> {\n  hasMeasurements() {\n    const {event} = this.props;\n\n    if (!event.measurements) {\n      return false;\n    }\n\n    return Object.keys(event.measurements).length > 0;\n  }\n\n  renderMeasurements() {\n    const {event} = this.props;\n\n    if (!event.measurements) {\n      return null;\n    }\n\n    const measurementNames = Object.keys(event.measurements)\n      .filter(name => {\n        // ignore marker measurements\n        return !name.startsWith('mark.');\n      })\n      .sort();\n\n    return measurementNames.map(name => {\n      const value = event.measurements![name].value;\n\n      const record = Object.values(WEB_VITAL_DETAILS).find(vital => vital.slug === name);\n\n      const failedThreshold = record ? value >= record.failureThreshold : false;\n\n      const currentValue = formattedValue(record, value);\n      const thresholdValue = formattedValue(record, record?.failureThreshold ?? 0);\n\n      if (!LONG_WEB_VITAL_NAMES.hasOwnProperty(name)) {\n        return null;\n      }\n\n      return (\n        <div key={name}>\n          <StyledPanel failedThreshold={failedThreshold}>\n            <Name>{LONG_WEB_VITAL_NAMES[name] ?? name}</Name>\n            <ValueRow>\n              {failedThreshold ? (\n                <FireIconContainer size=\"sm\">\n                  <Tooltip\n                    title={t('Fails threshold at %s.', thresholdValue)}\n                    position=\"top\"\n                    containerDisplayMode=\"inline-block\"\n                  >\n                    <IconFire size=\"sm\" />\n                  </Tooltip>\n                </FireIconContainer>\n              ) : null}\n              <Value failedThreshold={failedThreshold}>{currentValue}</Value>\n            </ValueRow>\n          </StyledPanel>\n        </div>\n      );\n    });\n  }\n\n  isOutdatedSdk() {\n    const {event} = this.props;\n\n    if (!event.sdk?.version) {\n      return false;\n    }\n\n    const sdkVersion = event.sdk.version;\n    return (\n      sdkVersion.startsWith('5.26.') ||\n      sdkVersion.startsWith('5.27.0') ||\n      sdkVersion.startsWith('5.27.1') ||\n      sdkVersion.startsWith('5.27.2')\n    );\n  }\n\n  render() {\n    if (!this.hasMeasurements()) {\n      return null;\n    }\n\n    return (\n      <Container>\n        <SectionHeading>\n          {t('Web Vitals')}\n          {this.isOutdatedSdk() && (\n            <WarningIconContainer size=\"sm\">\n              <Tooltip\n                title={t(\n                  'These vitals were collected using an outdated SDK version and may not be accurate. To ensure accurate web vitals in new transaction events, please update your SDK to the latest version.'\n                )}\n                position=\"top\"\n                containerDisplayMode=\"inline-block\"\n              >\n                <IconWarning size=\"sm\" />\n              </Tooltip>\n            </WarningIconContainer>\n          )}\n        </SectionHeading>\n        <Measurements>{this.renderMeasurements()}</Measurements>\n      </Container>\n    );\n  }\n}\n\nconst Measurements = styled('div')`\n  display: grid;\n  grid-column-gap: ${space(1)};\n`;\n\nconst Container = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(4)};\n`;\n\nconst StyledPanel = styled(Panel)<{failedThreshold: boolean}>`\n  padding: ${space(1)} ${space(1.5)};\n  margin-bottom: ${space(1)};\n  ${p => p.failedThreshold && `border: 1px solid ${p.theme.red300};`}\n`;\n\nconst Name = styled('div')``;\n\nconst ValueRow = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst WarningIconContainer = styled('span')<{size: IconSize | string}>`\n  display: inline-block;\n  height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  line-height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  margin-left: ${space(0.5)};\n  color: ${p => p.theme.red300};\n`;\n\nconst FireIconContainer = styled('span')<{size: IconSize | string}>`\n  display: inline-block;\n  height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  line-height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  margin-right: ${space(0.5)};\n  color: ${p => p.theme.red300};\n`;\n\nconst Value = styled('span')<{failedThreshold: boolean}>`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  ${p => p.failedThreshold && `color: ${p.theme.red300};`}\n`;\n\nexport default RealUserMonitoring;\n","var root = require('./_root');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsFinite = root.isFinite;\n\n/**\n * Checks if `value` is a finite primitive number.\n *\n * **Note:** This method is based on\n * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n * @example\n *\n * _.isFinite(3);\n * // => true\n *\n * _.isFinite(Number.MIN_VALUE);\n * // => true\n *\n * _.isFinite(Infinity);\n * // => false\n *\n * _.isFinite('3');\n * // => false\n */\nfunction isFinite(value) {\n  return typeof value == 'number' && nativeIsFinite(value);\n}\n\nmodule.exports = isFinite;\n"],"sourceRoot":""}