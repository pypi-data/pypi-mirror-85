{"version":3,"sources":["webpack:///./app/views/settings/projectAlerts/index.tsx"],"names":["ProjectAlerts","children","organization","access","hasAccess","features","hasMetricAlerts","hasFeature","Fragment","React","isValidElement","cloneElement","canEditRule"],"mappings":"6FACA,oDAWMA,EAAgB,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,aAAZ,OACpB,YAAC,IAAD,CAAQA,aAAcA,EAAcC,OAAQ,CAAC,mBAC1C,gBAAEC,EAAF,EAAEA,UAAF,OACC,YAAC,IAAD,CAASF,aAAcA,EAAcG,SAAU,CAAC,eAC7C,gBAAcC,EAAd,EAAEC,WAAF,OACC,YAAC,IAAMC,SAAP,KACGC,IAAMC,eAAeT,IACpBQ,IAAME,aAAaV,EAAU,CAC3BC,eACAU,YAAaR,EACbE,4BAVVN,E,4BAmBSA","file":"ProjectAlerts.js","sourcesContent":["import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {Organization} from 'app/types';\nimport Access from 'app/components/acl/access';\nimport Feature from 'app/components/acl/feature';\n\ntype Props = {\n  organization: Organization;\n  children: React.ReactNode;\n} & RouteComponentProps<{organizationId: string; projectId: string}, {}>;\n\nconst ProjectAlerts = ({children, organization}: Props) => (\n  <Access organization={organization} access={['project:write']}>\n    {({hasAccess}) => (\n      <Feature organization={organization} features={['incidents']}>\n        {({hasFeature: hasMetricAlerts}) => (\n          <React.Fragment>\n            {React.isValidElement(children) &&\n              React.cloneElement(children, {\n                organization,\n                canEditRule: hasAccess,\n                hasMetricAlerts,\n              })}\n          </React.Fragment>\n        )}\n      </Feature>\n    )}\n  </Access>\n);\n\nexport default ProjectAlerts;\n"],"sourceRoot":""}