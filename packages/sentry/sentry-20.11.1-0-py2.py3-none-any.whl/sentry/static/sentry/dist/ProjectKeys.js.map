{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/project/projectKeys/projectKeyCredentials.tsx","webpack:///./app/views/settings/project/projectKeys/list/keyRow.tsx","webpack:///./app/views/settings/project/projectKeys/list/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","routeTitleGen","routeName","orgSlug","withSentry","tmpl","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","ProjectKeyCredentials","state","showDeprecatedDsn","toggleDeprecatedDsn","setState","projectId","data","showDsn","showDsnPublic","showSecurityEndpoint","showMinidump","showUnreal","showPublicKey","showSecretKey","showProjectId","Fragment","label","t","inline","flexibleControlStateSize","help","tct","link","onClick","getDynamicText","value","dsn","fixed","StyledField","secret","security","href","minidump","unreal","Field","KeyRow","handleRemove","onRemove","handleEnable","onToggle","handleDisable","access","editUrl","id","controlActive","has","controls","key","size","isActive","disabled","priority","onConfirm","confirmText","message","hasButtons","PanelHeaderLink","Controls","c","n","StyledClippedBox","clipHeight","defaultClipped","btnText","StyledPanelBody","ClippedBox","Link","theme","subText","PanelBody","ProjectKeys","handleRemoveKey","a","oldKeyList","keyList","addLoadingMessage","filter","orgId","api","requestPromise","method","addSuccessMessage","addErrorMessage","handleToggleKey","handleCreateKey","description","organization","Set","pageLinks","keyListPageLinks","isEmpty","length","data-test-id","isCircled","code","renderEmpty","renderResults","withOrganization","withProject"],"mappings":"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","file":"ProjectKeys.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true\n): string {\n  const tmpl = `${routeName} - ${orgSlug}`;\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {ProjectKey} from 'app/views/settings/project/projectKeys/types';\nimport {t, tct} from 'app/locale';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Link from 'app/components/links/link';\nimport Field from 'app/views/settings/components/forms/field';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport space from 'app/styles/space';\n\nconst DEFAULT_PROPS = {\n  showDsn: true,\n  showDsnPublic: true,\n  showSecurityEndpoint: true,\n  showMinidump: true,\n  showUnreal: true,\n  showPublicKey: false,\n  showSecretKey: false,\n  showProjectId: false,\n};\n\ntype Props = {\n  projectId: string;\n  data: ProjectKey;\n} & typeof DEFAULT_PROPS;\n\ntype State = {\n  showDeprecatedDsn: boolean;\n};\n\nclass ProjectKeyCredentials extends React.Component<Props, State> {\n  static defaultProps = DEFAULT_PROPS;\n\n  state = {\n    showDeprecatedDsn: false,\n  };\n\n  toggleDeprecatedDsn = () => {\n    this.setState(state => ({\n      showDeprecatedDsn: !state.showDeprecatedDsn,\n    }));\n  };\n\n  render() {\n    const {showDeprecatedDsn} = this.state;\n    const {\n      projectId,\n      data,\n      showDsn,\n      showDsnPublic,\n      showSecurityEndpoint,\n      showMinidump,\n      showUnreal,\n      showPublicKey,\n      showSecretKey,\n      showProjectId,\n    } = this.props;\n\n    return (\n      <React.Fragment>\n        {showDsnPublic && (\n          <Field\n            label={t('DSN')}\n            inline={false}\n            flexibleControlStateSize\n            help={tct('The DSN tells the SDK where to send the events to. [link]', {\n              link: showDsn ? (\n                <Link to=\"\" onClick={this.toggleDeprecatedDsn}>\n                  {showDeprecatedDsn\n                    ? t('Hide deprecated DSN')\n                    : t('Show deprecated DSN')}\n                </Link>\n              ) : null,\n            })}\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.public,\n                fixed: '__DSN__',\n              })}\n            </TextCopyInput>\n            {showDeprecatedDsn && (\n              <StyledField\n                label={null}\n                help={t(\n                  'Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.'\n                )}\n                inline={false}\n                flexibleControlStateSize\n              >\n                <TextCopyInput>\n                  {getDynamicText({\n                    value: data.dsn.secret,\n                    fixed: '__DSN_DEPRECATED__',\n                  })}\n                </TextCopyInput>\n              </StyledField>\n            )}\n          </Field>\n        )}\n\n        {/* this edge case should imho not happen, but just to be sure */}\n        {!showDsnPublic && showDsn && (\n          <Field\n            label={t('DSN (Deprecated)')}\n            help={t(\n              'Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language.'\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.secret,\n                fixed: '__DSN_DEPRECATED__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showSecurityEndpoint && (\n          <Field\n            label={t('Security Header Endpoint')}\n            help={t(\n              'Use your security header endpoint for features like CSP and Expect-CT reports.'\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.security,\n                fixed: '__SECURITY_HEADER_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showMinidump && (\n          <Field\n            label={t('Minidump Endpoint')}\n            help={tct(\n              'Use this endpoint to upload [link], for example with Electron, Crashpad or Breakpad.',\n              {\n                link: (\n                  <ExternalLink href=\"https://docs.sentry.io/clients/minidump/\">\n                    minidump crash reports\n                  </ExternalLink>\n                ),\n              }\n            )}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.minidump,\n                fixed: '__MINIDUMP_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showUnreal && (\n          <Field\n            label={t('Unreal Engine 4 Endpoint')}\n            help={t('Use this endpoint to configure your UE4 Crash Reporter.')}\n            inline={false}\n            flexibleControlStateSize\n          >\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.dsn.unreal || '',\n                fixed: '__UNREAL_ENDPOINT__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showPublicKey && (\n          <Field label={t('Public Key')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.public,\n                fixed: '__PUBLICKEY__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showSecretKey && (\n          <Field label={t('Secret Key')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: data.secret,\n                fixed: '__SECRETKEY__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n\n        {showProjectId && (\n          <Field label={t('Project ID')} inline flexibleControlStateSize>\n            <TextCopyInput>\n              {getDynamicText({\n                value: projectId,\n                fixed: '__PROJECTID__',\n              })}\n            </TextCopyInput>\n          </Field>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledField = styled(Field)`\n  padding: ${space(0.5)} 0 0 0;\n`;\n\nexport default ProjectKeyCredentials;\n","import {Link} from 'react-router';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'app/api';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {ProjectKey} from 'app/views/settings/project/projectKeys/types';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport ClippedBox from 'app/components/clippedBox';\nimport Confirm from 'app/components/confirm';\nimport {IconDelete} from 'app/icons';\nimport ProjectKeyCredentials from 'app/views/settings/project/projectKeys/projectKeyCredentials';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport space from 'app/styles/space';\nimport {Scope} from 'app/types';\n\ntype Props = {\n  api: Client;\n  orgId: string;\n  projectId: string;\n  data: ProjectKey;\n  access: Set<Scope>;\n  onToggle: (isActive: boolean, data: ProjectKey) => void;\n  onRemove: (data: ProjectKey) => void;\n} & Pick<RouteComponentProps<{}, {}>, 'routes' | 'location' | 'params'>;\n\nclass KeyRow extends React.Component<Props> {\n  handleRemove = () => {\n    const {data, onRemove} = this.props;\n    onRemove(data);\n  };\n\n  handleEnable = () => {\n    const {onToggle, data} = this.props;\n    onToggle(true, data);\n  };\n\n  handleDisable = () => {\n    const {onToggle, data} = this.props;\n    onToggle(false, data);\n  };\n\n  render() {\n    const {access, data, routes, location, params} = this.props;\n    const editUrl = recreateRoute(`${data.id}/`, {routes, params, location});\n    const controlActive = access.has('project:write');\n\n    const controls = [\n      <Button key=\"edit\" to={editUrl} size=\"small\">\n        {t('Configure')}\n      </Button>,\n      <Button\n        key=\"toggle\"\n        size=\"small\"\n        onClick={data.isActive ? this.handleDisable : this.handleEnable}\n        disabled={!controlActive}\n      >\n        {data.isActive ? t('Disable') : t('Enable')}\n      </Button>,\n      <Confirm\n        key=\"remove\"\n        priority=\"danger\"\n        disabled={!controlActive}\n        onConfirm={this.handleRemove}\n        confirmText={t('Remove Key')}\n        message={t(\n          'Are you sure you want to remove this key? This action is irreversible.'\n        )}\n      >\n        <Button size=\"small\" disabled={!controlActive} icon={<IconDelete />} />\n      </Confirm>,\n    ];\n\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          <Title disabled={!data.isActive}>\n            <PanelHeaderLink to={editUrl}>{data.label}</PanelHeaderLink>\n            {!data.isActive && (\n              <small>\n                {' \\u2014  '}\n                {t('Disabled')}\n              </small>\n            )}\n          </Title>\n          <Controls>\n            {controls.map((c, n) => (\n              <span key={n}> {c}</span>\n            ))}\n          </Controls>\n        </PanelHeader>\n\n        <StyledClippedBox clipHeight={300} defaultClipped btnText={t('Expand')}>\n          <StyledPanelBody disabled={!data.isActive}>\n            <ProjectKeyCredentials projectId={`${data.projectId}`} data={data} />\n          </StyledPanelBody>\n        </StyledClippedBox>\n      </Panel>\n    );\n  }\n}\n\nexport default KeyRow;\n\nconst StyledClippedBox = styled(ClippedBox)`\n  padding: 0;\n  margin: 0;\n  > *:last-child {\n    padding-bottom: ${space(3)};\n  }\n`;\n\nconst PanelHeaderLink = styled(Link)`\n  color: ${p => p.theme.subText};\n`;\n\nconst Title = styled('div')<{disabled: boolean}>`\n  flex: 1;\n  ${p => (p.disabled ? 'opacity: 0.5;' : '')};\n  margin-right: ${space(1)};\n`;\n\nconst Controls = styled('div')`\n  display: grid;\n  align-items: center;\n  grid-gap: ${space(1)};\n  grid-auto-flow: column;\n`;\n\nconst StyledPanelBody = styled(PanelBody)<{disabled: boolean}>`\n  ${p => (p.disabled ? 'opacity: 0.5;' : '')};\n`;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {\n  addLoadingMessage,\n  addErrorMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {Organization, Project} from 'app/types';\nimport {Panel} from 'app/components/panels';\nimport {ProjectKey} from 'app/views/settings/project/projectKeys/types';\nimport {t, tct} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport ExternalLink from 'app/components/links/externalLink';\nimport Pagination from 'app/components/pagination';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport withOrganization from 'app/utils/withOrganization';\nimport withProject from 'app/utils/withProject';\nimport {IconAdd, IconFlag} from 'app/icons';\n\nimport KeyRow from './keyRow';\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  keyList: ProjectKey[];\n} & AsyncView['state'];\n\nclass ProjectKeys extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('Client Keys'), projectId, false);\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, projectId} = this.props.params;\n    return [['keyList', `/projects/${orgId}/${projectId}/keys/`]];\n  }\n\n  /**\n   * Optimistically remove key\n   */\n  handleRemoveKey = async (data: ProjectKey) => {\n    const oldKeyList = [...this.state.keyList];\n\n    addLoadingMessage(t('Revoking key\\u2026'));\n\n    this.setState(state => ({\n      keyList: state.keyList.filter(key => key.id !== data.id),\n    }));\n\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      await this.api.requestPromise(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {\n        method: 'DELETE',\n      });\n      addSuccessMessage(t('Revoked key'));\n    } catch (_err) {\n      this.setState({\n        keyList: oldKeyList,\n      });\n      addErrorMessage(t('Unable to revoke key'));\n    }\n  };\n\n  handleToggleKey = async (isActive: boolean, data: ProjectKey) => {\n    const oldKeyList = [...this.state.keyList];\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.setState(state => {\n      const keyList = state.keyList.map(key => {\n        if (key.id === data.id) {\n          return {\n            ...key,\n            isActive: !data.isActive,\n          };\n        }\n\n        return key;\n      });\n      return {keyList};\n    });\n\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      await this.api.requestPromise(`/projects/${orgId}/${projectId}/keys/${data.id}/`, {\n        method: 'PUT',\n        data: {isActive},\n      });\n      addSuccessMessage(isActive ? t('Enabled key') : t('Disabled key'));\n    } catch (_err) {\n      addErrorMessage(isActive ? t('Error enabling key') : t('Error disabling key'));\n      this.setState({keyList: oldKeyList});\n    }\n  };\n\n  handleCreateKey = async () => {\n    const {orgId, projectId} = this.props.params;\n\n    try {\n      const data: ProjectKey = await this.api.requestPromise(\n        `/projects/${orgId}/${projectId}/keys/`,\n        {\n          method: 'POST',\n        }\n      );\n\n      this.setState(state => ({\n        keyList: [...state.keyList, data],\n      }));\n      addSuccessMessage(t('Created a new key.'));\n    } catch (_err) {\n      addErrorMessage(t('Unable to create new key. Please try again.'));\n    }\n  };\n\n  renderEmpty() {\n    return (\n      <Panel>\n        <EmptyMessage\n          icon={<IconFlag size=\"xl\" />}\n          description={t('There are no keys active for this project.')}\n        />\n      </Panel>\n    );\n  }\n\n  renderResults() {\n    const {location, organization, routes, params} = this.props;\n    const {orgId, projectId} = params;\n    const access = new Set(organization.access);\n\n    return (\n      <React.Fragment>\n        {this.state.keyList.map(key => (\n          <KeyRow\n            api={this.api}\n            access={access}\n            key={key.id}\n            orgId={orgId}\n            projectId={`${projectId}`}\n            data={key}\n            onToggle={this.handleToggleKey}\n            onRemove={this.handleRemoveKey}\n            routes={routes}\n            location={location}\n            params={params}\n          />\n        ))}\n        <Pagination pageLinks={this.state.keyListPageLinks} />\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const access = new Set(this.props.organization.access);\n    const isEmpty = !this.state.keyList.length;\n\n    return (\n      <div data-test-id=\"project-keys\">\n        <SettingsPageHeader\n          title={t('Client Keys')}\n          action={\n            access.has('project:write') ? (\n              <Button\n                onClick={this.handleCreateKey}\n                size=\"small\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Generate New Key')}\n              </Button>\n            ) : null\n          }\n        />\n        <TextBlock>\n          {tct(\n            `To send data to Sentry you will need to configure an SDK with a client key\n          (usually referred to as the [code:SENTRY_DSN] value). For more\n          information on integrating Sentry with your application take a look at our\n          [link:documentation].`,\n            {\n              link: <ExternalLink href=\"https://docs.sentry.io/\" />,\n              code: <code />,\n            }\n          )}\n        </TextBlock>\n\n        {isEmpty ? this.renderEmpty() : this.renderResults()}\n      </div>\n    );\n  }\n}\n\nexport default withOrganization(withProject(ProjectKeys));\n"],"sourceRoot":""}