{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.jsx","webpack:///./app/data/forms/accountPassword.tsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/views/settings/account/passwordForm.jsx","webpack:///./app/views/settings/account/accountSecurity/components/twoFactorRequired.jsx","webpack:///./app/views/settings/account/accountSecurity/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","FormPanel","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","id","sanitizeQuerySelector","undefined","map","field","defaultValue","fieldWithoutDefaultValue","disabledReason","key","name","highlighted","JsonForm","state","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","forms","features","location","formGroup","i","Fragment","renderForm","contextTypes","PropTypes","object","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","stepBack","paths","path","indexOf","findLastIndex","slice","baseRoute","search","fullRoute","join","replaceRouterParams","ConfirmHeader","message","t","RemoveConfirm","getUserIsNotManaged","user","isManaged","formGroups","type","autoComplete","label","placeholder","help","required","validate","form","passwordVerify","passwordNew","route","getPendingInvite","data","Cookies","get","queryString","PasswordForm","handleSubmitSuccess","_change","model","resetForm","addSuccessMessage","handleSubmitError","addErrorMessage","ConfigStore","apiMethod","apiEndpoint","initialData","onSubmitSuccess","onSubmitError","hideFooter","accountPasswordFields","justifyContent","priority","StyledAlert","Alert","TwoFactorRequired","data-test-id","size","tct","link","href","AccountSecurity","handleSessionClose","a","api","requestPromise","method","all","window","assign","formatOrgSlugs","slugs","orgsRequire2fa","slug","authenticators","countEnrolled","deleteDisabled","onDisable","isEmpty","underlined","index","alignRight","flexibleControlStateSize","onClick","auth","authId","description","isBackupInterface","isEnrolled","configureButton","AuthenticatorPanelItem","AuthenticatorHeader","AuthenticatorTitle","AuthenticatorStatus","enabled","AuthenticatorName","Actions","className","onConfirm","Description","PanelItem","CircleIndicator","TextBlock"],"mappings":"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","file":"AccountSecurity.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport {Scope} from 'app/types';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import {Box} from 'reflexbox';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport scrollToElement from 'scroll-to-element';\nimport {Location} from 'history';\nimport * as Sentry from '@sentry/react';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport {Field, FieldObject, JsonFormObject} from './type';\nimport FieldFromConfig from './fieldFromConfig';\nimport FormPanel from './formPanel';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static propTypes = {\n    /**\n     * Fields that are grouped by \"section\"\n     */\n    forms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        fields: PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n        ),\n      })\n    ),\n\n    /**\n     * If `forms` is not defined, `title` + `fields` must be required.\n     * Allows more fine grain control of title/fields\n     */\n    fields: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n    ),\n    /**\n     * Panel title if `forms` is not defined\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    access: PropTypes.object,\n    features: PropTypes.object,\n    renderFooter: PropTypes.func,\n    /**\n     * Renders inside of PanelBody\n     */\n    renderHeader: PropTypes.func,\n    /**\n     * Disables the entire form\n     */\n    disabled: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport Confirm from 'app/components/confirm';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = props => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n","import {JsonFormObject} from 'app/views/settings/components/forms/type';\n\nconst getUserIsNotManaged = ({user}) => !user.isManaged;\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Password',\n    fields: [\n      {\n        name: 'password',\n        type: 'secret',\n        autoComplete: 'current-password',\n        label: 'Current Password',\n        placeholder: '',\n        help: 'Your current password',\n        visible: getUserIsNotManaged,\n        required: true,\n      },\n      {\n        name: 'passwordNew',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: 'New Password',\n        placeholder: '',\n        help: '',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => (form[id] !== form.passwordVerify ? [[id, '']] : []),\n      },\n      {\n        name: 'passwordVerify',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: 'Verify New Password',\n        placeholder: '',\n        help: 'Verify your new password',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => {\n          // If password is set, and passwords don't match, then return an error\n          if (form.passwordNew && form.passwordNew !== form[id]) {\n            return [[id, 'Passwords do not match']];\n          }\n\n          return [];\n        },\n      },\n    ],\n  },\n];\n\nexport const route = '/settings/account/security/';\nexport default formGroups;\n","import Cookies from 'js-cookie';\nimport * as queryString from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return queryString.parse(data) as any;\n}\n","import React from 'react';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport Form from 'app/views/settings/components/forms/form';\nimport Button from 'app/components/button';\nimport ConfigStore from 'app/stores/configStore';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport {PanelAlert, PanelItem} from 'app/components/panels';\nimport accountPasswordFields from 'app/data/forms/accountPassword';\n\nconst ENDPOINT = '/users/me/password/';\n\nclass PasswordForm extends React.Component {\n  handleSubmitSuccess = (_change, model) => {\n    // Reset form on success\n    model.resetForm();\n    addSuccessMessage('Password has been changed');\n  };\n\n  handleSubmitError = () => {\n    addErrorMessage('Error changing password');\n  };\n\n  render() {\n    const user = ConfigStore.get('user');\n    return (\n      <Form\n        apiMethod=\"PUT\"\n        apiEndpoint={ENDPOINT}\n        initialData={{}}\n        onSubmitSuccess={this.handleSubmitSuccess}\n        onSubmitError={this.handleSubmitError}\n        hideFooter\n      >\n        <JsonForm\n          location={this.props.location}\n          forms={accountPasswordFields}\n          additionalFieldProps={{user}}\n          renderFooter={() => (\n            <PanelItem justifyContent=\"flex-end\">\n              <Button type=\"submit\" priority=\"primary\">\n                {t('Change password')}\n              </Button>\n            </PanelItem>\n          )}\n          renderHeader={() => (\n            <PanelAlert type=\"info\">\n              {t('Changing your password will invalidate all logged in sessions.')}\n            </PanelAlert>\n          )}\n        />\n      </Form>\n    );\n  }\n}\n\nexport default PasswordForm;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {tct} from 'app/locale';\nimport Alert from 'app/components/alert';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {IconFlag} from 'app/icons';\nimport space from 'app/styles/space';\nimport getPendingInvite from 'app/utils/getPendingInvite';\n\nconst TwoFactorRequired = () =>\n  !getPendingInvite() ? null : (\n    <StyledAlert data-test-id=\"require-2fa\" type=\"error\" icon={<IconFlag size=\"md\" />}>\n      {tct(\n        'You have been invited to an organization that requires [link:two-factor authentication].' +\n          ' Setup two-factor authentication below to join your organization.',\n        {\n          link: <ExternalLink href=\"https://docs.sentry.io/accounts/require-2fa/\" />,\n        }\n      )}\n    </StyledAlert>\n  );\n\nconst StyledAlert = styled(Alert)`\n  margin: ${space(3)} 0;\n`;\n\nexport default TwoFactorRequired;\n","import * as ReactRouter from 'react-router';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Authenticator, OrganizationSummary} from 'app/types';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Field from 'app/views/settings/components/forms/field';\nimport ListLink from 'app/components/links/listLink';\nimport NavTabs from 'app/components/navTabs';\nimport {IconDelete} from 'app/icons';\nimport PasswordForm from 'app/views/settings/account/passwordForm';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport Tooltip from 'app/components/tooltip';\nimport TwoFactorRequired from 'app/views/settings/account/accountSecurity/components/twoFactorRequired';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport space from 'app/styles/space';\n\ntype Props = {\n  authenticators: Authenticator[] | null;\n  orgsRequire2fa: OrganizationSummary[];\n  countEnrolled: number;\n  deleteDisabled: boolean;\n  onDisable: (auth: Authenticator) => void;\n} & AsyncView['props'] &\n  ReactRouter.WithRouterProps;\n\n/**\n * Lists 2fa devices + password change form\n */\nclass AccountSecurity extends AsyncView<Props> {\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [];\n  }\n\n  handleSessionClose = async () => {\n    try {\n      await this.api.requestPromise('/auth/', {\n        method: 'DELETE',\n        data: {all: true},\n      });\n      window.location.assign('/auth/login/');\n    } catch (err) {\n      addErrorMessage(t('There was a problem closing all sessions'));\n      throw err;\n    }\n  };\n\n  formatOrgSlugs = () => {\n    const {orgsRequire2fa} = this.props;\n    const slugs = orgsRequire2fa.map(({slug}) => slug);\n\n    return [slugs.slice(0, -1).join(', '), slugs.slice(-1)[0]].join(\n      slugs.length > 1 ? ' and ' : ''\n    );\n  };\n\n  renderBody() {\n    const {authenticators, countEnrolled, deleteDisabled, onDisable} = this.props;\n    const isEmpty = !authenticators?.length;\n\n    return (\n      <div>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={recreateRoute('', this.props)} index>\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('session-history/', this.props)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        {!isEmpty && countEnrolled === 0 && <TwoFactorRequired />}\n\n        <PasswordForm />\n\n        <Panel>\n          <PanelHeader>{t('Sessions')}</PanelHeader>\n          <PanelBody>\n            <Field\n              alignRight\n              flexibleControlStateSize\n              label={t('Sign out of all devices')}\n              help={t(\n                'Signing out of all devices will sign you out of this device as well.'\n              )}\n            >\n              <Button data-test-id=\"signoutAll\" onClick={this.handleSessionClose}>\n                {t('Sign out of all devices')}\n              </Button>\n            </Field>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Two-Factor Authentication')}</PanelHeader>\n\n          {isEmpty && (\n            <EmptyMessage>{t('No available authenticators to add')}</EmptyMessage>\n          )}\n\n          <PanelBody>\n            {!isEmpty &&\n              authenticators?.map(auth => {\n                const {\n                  id,\n                  authId,\n                  description,\n                  isBackupInterface,\n                  isEnrolled,\n                  configureButton,\n                  name,\n                } = auth;\n                return (\n                  <AuthenticatorPanelItem key={id}>\n                    <AuthenticatorHeader>\n                      <AuthenticatorTitle>\n                        <AuthenticatorStatus enabled={isEnrolled} />\n                        <AuthenticatorName>{name}</AuthenticatorName>\n                      </AuthenticatorTitle>\n\n                      <Actions>\n                        {!isBackupInterface && !isEnrolled && (\n                          <Button\n                            to={`/settings/account/security/mfa/${id}/enroll/`}\n                            size=\"small\"\n                            priority=\"primary\"\n                            className=\"enroll-button\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n\n                        {isEnrolled && authId && (\n                          <Button\n                            to={`/settings/account/security/mfa/${authId}/`}\n                            size=\"small\"\n                            className=\"details-button\"\n                          >\n                            {configureButton}\n                          </Button>\n                        )}\n\n                        {!isBackupInterface && isEnrolled && (\n                          <Tooltip\n                            title={t(\n                              `Two-factor authentication is required for organization(s): ${this.formatOrgSlugs()}.`\n                            )}\n                            disabled={!deleteDisabled}\n                          >\n                            <RemoveConfirm\n                              onConfirm={() => onDisable(auth)}\n                              disabled={deleteDisabled}\n                            >\n                              <Button\n                                size=\"small\"\n                                label={t('delete')}\n                                icon={<IconDelete />}\n                              />\n                            </RemoveConfirm>\n                          </Tooltip>\n                        )}\n                      </Actions>\n\n                      {isBackupInterface && !isEnrolled ? t('requires 2FA') : null}\n                    </AuthenticatorHeader>\n\n                    <Description>{description}</Description>\n                  </AuthenticatorPanelItem>\n                );\n              })}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst AuthenticatorName = styled('span')`\n  font-size: 1.2em;\n`;\n\nconst AuthenticatorPanelItem = styled(PanelItem)`\n  flex-direction: column;\n`;\n\nconst AuthenticatorHeader = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst AuthenticatorTitle = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-right: ${space(1)};\n`;\n\nconst Description = styled(TextBlock)`\n  margin-top: ${space(2)};\n  margin-bottom: 0;\n`;\n\nexport default AccountSecurity;\n"],"sourceRoot":""}