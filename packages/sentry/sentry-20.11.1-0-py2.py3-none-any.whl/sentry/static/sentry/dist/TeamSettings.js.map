{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/actionCreators/teams.tsx","webpack:///./app/data/forms/teamSettingsFields.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/model.jsx","webpack:///./app/views/settings/organizationTeams/teamSettings/index.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","FormPanel","props","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","id","sanitizeQuerySelector","undefined","map","field","defaultValue","fieldWithoutDefaultValue","disabledReason","key","name","highlighted","React","Component","JsonForm","state","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","forms","features","location","formGroup","i","Fragment","renderForm","contextTypes","PropTypes","object","defaultProps","slugify","str","toLowerCase","replace","doCallback","params","args","callIfFunction","fetchTeamDetails","api","options","TeamActions","fetchDetails","teamId","request","orgId","success","data","fetchDetailsSuccess","error","fetchDetailsError","updateTeamSuccess","updateSuccess","updateTeam","endpoint","update","method","updateError","joinTeam","memberId","uniqueId","leaveTeam","createTeam","team","requestPromise","then","createTeamSuccess","addSuccessMessage","tct","slug","organization","createTeamError","addErrorMessage","removeTeam","removeTeamSuccess","removeTeamError","route","formGroups","type","required","label","t","placeholder","help","has","transformInput","saveOnBlur","saveMessageAlertType","saveMessage","TeamFormModel","Promise","resolve","reject","FormModel","TeamSettings","handleSubmitSuccess","resp","model","router","getValue","loading","handleRemoveTeam","a","TeamModel","Set","apiMethod","allowUndo","onSubmitSuccess","onSubmitError","initialData","teamSettingsFields","onConfirm","priority","message","icon","SentryTypes","Organization"],"mappings":"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","file":"TeamSettings.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport {Scope} from 'app/types';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import {Box} from 'reflexbox';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport scrollToElement from 'scroll-to-element';\nimport {Location} from 'history';\nimport * as Sentry from '@sentry/react';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport {Field, FieldObject, JsonFormObject} from './type';\nimport FieldFromConfig from './fieldFromConfig';\nimport FormPanel from './formPanel';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static propTypes = {\n    /**\n     * Fields that are grouped by \"section\"\n     */\n    forms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        fields: PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n        ),\n      })\n    ),\n\n    /**\n     * If `forms` is not defined, `title` + `fields` must be required.\n     * Allows more fine grain control of title/fields\n     */\n    fields: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n    ),\n    /**\n     * Panel title if `forms` is not defined\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    access: PropTypes.object,\n    features: PropTypes.object,\n    renderFooter: PropTypes.func,\n    /**\n     * Renders inside of PanelBody\n     */\n    renderHeader: PropTypes.func,\n    /**\n     * Disables the entire form\n     */\n    disabled: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {Client} from 'app/api';\nimport TeamActions from 'app/actions/teamActions';\nimport {tct} from 'app/locale';\nimport {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';\nimport {uniqueId} from 'app/utils/guid';\nimport {Team} from 'app/types';\nimport {callIfFunction} from 'app/utils/callIfFunction';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & MemberId,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import {t} from 'app/locale';\nimport slugify from 'app/utils/slugify';\nimport {JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/teams/:teamId/settings/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Team Settings',\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Name'),\n        placeholder: 'e.g. api-team',\n        help: t('A unique ID used to identify the team'),\n        disabled: ({access}) => !access.has('team:write'),\n        transformInput: slugify,\n\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t('You will be redirected to the new team slug after saving'),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import {updateTeam} from 'app/actionCreators/teams';\nimport FormModel from 'app/views/settings/components/forms/model';\n\nclass TeamFormModel extends FormModel {\n  doApiRequest({data}) {\n    return new Promise((resolve, reject) =>\n      updateTeam(\n        this.api,\n        {\n          orgId: this.orgId,\n          teamId: this.teamId,\n          data,\n        },\n        {\n          success: resolve,\n          error: reject,\n        }\n      )\n    );\n  }\n}\n\nexport default TeamFormModel;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {Panel, PanelHeader} from 'app/components/panels';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {removeTeam, updateTeamSuccess} from 'app/actionCreators/teams';\nimport {t, tct} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport {IconDelete} from 'app/icons';\nimport Confirm from 'app/components/confirm';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SentryTypes from 'app/sentryTypes';\nimport teamSettingsFields from 'app/data/forms/teamSettingsFields';\n\nimport TeamModel from './model';\n\nexport default class TeamSettings extends AsyncView {\n  static propTypes = {\n    ...AsyncView.propTypes,\n    team: PropTypes.object.isRequired,\n    onTeamChange: PropTypes.func.isRequired,\n  };\n\n  static contextTypes = {\n    location: PropTypes.object,\n    organization: SentryTypes.Organization,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.model = new TeamModel();\n    this.model.teamId = props.params.teamId;\n    this.model.orgId = props.params.orgId;\n  }\n\n  getTitle() {\n    return 'Team Settings';\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess = (resp, model, id) => {\n    updateTeamSuccess(resp.slug, resp);\n    if (id === 'slug') {\n      addSuccessMessage(t('Team name changed'));\n      this.props.router.replace(\n        `/settings/${this.props.params.orgId}/teams/${model.getValue(id)}/settings/`\n      );\n      this.setState({loading: true});\n    }\n  };\n\n  handleRemoveTeam = async () => {\n    await removeTeam(this.api, this.props.params);\n    this.props.router.replace(`/settings/${this.props.params.orgId}/teams/`);\n  };\n\n  renderBody() {\n    const {location, organization} = this.context;\n    const {team} = this.props;\n\n    const access = new Set(organization.access);\n\n    return (\n      <React.Fragment>\n        <Form\n          model={this.model}\n          apiMethod=\"PUT\"\n          saveOnBlur\n          allowUndo\n          onSubmitSuccess={this.handleSubmitSuccess}\n          onSubmitError={() => addErrorMessage(t('Unable to save change'))}\n          initialData={{\n            name: team.name,\n            slug: team.slug,\n          }}\n        >\n          <JsonForm access={access} location={location} forms={teamSettingsFields} />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Remove Team')}</PanelHeader>\n          <Field\n            help={t(\n              \"This may affect team members' access to projects and associated alert delivery.\"\n            )}\n          >\n            <div>\n              <Confirm\n                disabled={!access.has('team:admin')}\n                onConfirm={this.handleRemoveTeam}\n                priority=\"danger\"\n                message={tct('Are you sure you want to remove the team [team]?', {\n                  team: `#${team.slug}`,\n                })}\n              >\n                <Button\n                  icon={<IconDelete />}\n                  priority=\"danger\"\n                  disabled={!access.has('team:admin')}\n                >\n                  {t('Remove Team')}\n                </Button>\n              </Confirm>\n            </div>\n          </Field>\n        </Panel>\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}