{"version":3,"sources":["webpack:///./app/components/events/interfaces/keyValueList/keyValueList.jsx","webpack:///./app/components/events/groupingInfo/utils.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentFrames.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentStacktrace.tsx","webpack:///./app/components/events/groupingInfo/groupingComponentChildren.tsx","webpack:///./app/components/events/groupingInfo/groupingComponent.tsx","webpack:///./app/components/events/groupingInfo/groupingVariant.tsx","webpack:///./app/components/events/groupingInfo/groupingConfigSelect.tsx","webpack:///./app/components/events/groupingInfo/index.tsx"],"names":["KeyValueList","data","this","props","Array","filter","kv","Object","keys","map","key","isSorted","sortBy","raw","onClick","className","value","isContextData","TableData","wide","longKeys","JSON","stringify","React","Component","defaultProps","theme","breakpoints","p","displayName","groupingComponentFilter","showNonContributing","isObject","contributes","hint","values","length","GroupingComponentFrames","state","collapsed","items","maxVisibleItems","isCollapsable","Fragment","item","index","GroupingComponentListItem","ToggleCollapse","size","priority","icon","setState","tct","numberOfFrames","Button","space","GroupingComponentStacktrace","frameGroups","component","forEach","v","id","sort","a","b","localeCompare","join","lastGroup","push","group","idx","GroupingComponentChildren","GroupingValue","valueType","name","GroupingComponent","shouldInlineValue","every","shouldInlineComponentValue","GroupingComponentListItems","GroupingComponentWrapper","isContributing","GroupingHint","GroupingComponentList","isInline","innerBorder","fontSizeSmall","gray200","GroupVariant","handleShowNonContributing","handleHideNonContributing","variant","showGroupingConfig","hash","t","TextWithQuestionTooltip","Hash","position","title","hashMismatch","type","EventGroupVariantType","COMPONENT","config","CUSTOM_FINGERPRINT","SALTED_COMPONENT","GroupingTree","VariantTitle","ContributionIcon","description","split","i","capitalize","ContributingToggle","merged","active","barId","getVariantData","VariantWrapper","Header","renderTitle","hasNonContributingComponent","renderContributionToggle","fontSizeMedium","isCircled","color","ButtonBar","overflowEllipsis","GroupingConfigSelect","configs","renderBody","configId","eventConfigId","onSelect","options","hidden","label","GroupingConfigItem","isHidden","isActive","isOpen","StyledDropdownButton","AsyncComponent","DropdownButton","EventGroupingInfo","toggle","configOverride","handleConfigSelect","selection","reloadData","organization","event","projectId","path","slug","groupInfo","groupedBy","toLowerCase","SummaryGroupedBy","data-test-id","groupingConfig","GroupConfigWrapper","loading","variants","renderGroupConfigSelect","VariantDivider","renderGroupInfoSummary","actions","ToggleButton","renderGroupInfo","subText","textColor","text","familyMono","withOrganization"],"mappings":"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","file":"AccountSettingsLayout~CommandPalette~DiscoverV2Details~GroupEventDetails~HelpSearchModal~Organizatio~6244bbe6.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport sortBy from 'lodash/sortBy';\nimport styled from '@emotion/styled';\n\nimport ContextData from 'app/components/contextData';\nimport theme from 'app/utils/theme';\n\nclass KeyValueList extends React.Component {\n  static propTypes = {\n    data: PropTypes.any.isRequired,\n    isContextData: PropTypes.bool,\n    isSorted: PropTypes.bool,\n    onClick: PropTypes.func,\n    raw: PropTypes.bool,\n    longKeys: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    isContextData: false,\n    isSorted: true,\n    raw: false,\n    longKeys: false,\n  };\n\n  render() {\n    // TODO(dcramer): use non-string keys as reserved words (\"unauthorized\")\n    // break rendering\n\n    let data = this.props.data;\n    if (data === undefined || data === null) {\n      data = [];\n    } else if (!(data instanceof Array)) {\n      data = Object.keys(data).map(key => [key, data[key]]);\n    } else {\n      data = data.filter(kv => kv !== null);\n    }\n\n    data = this.props.isSorted ? sortBy(data, [([key]) => key]) : data;\n    const raw = this.props.raw;\n    const props = this.props.onClick ? {onClick: this.props.onClick} : {};\n    return (\n      <table className=\"table key-value\" {...props}>\n        <tbody>\n          {data.map(([key, value]) => {\n            if (this.props.isContextData) {\n              return [\n                <tr key={key}>\n                  <TableData className=\"key\" wide={this.props.longKeys}>\n                    {key}\n                  </TableData>\n                  <td className=\"val\">\n                    <ContextData data={!raw ? value : JSON.stringify(value)} />\n                  </td>\n                </tr>,\n              ];\n            } else {\n              return [\n                <tr key={key}>\n                  <TableData className=\"key\" wide={this.props.longKeys}>\n                    {key}\n                  </TableData>\n                  <td className=\"val\">\n                    <pre className=\"val-string\">{'' + value || ' '}</pre>\n                  </td>\n                </tr>,\n              ];\n            }\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst TableData = styled('td')`\n  @media (min-width: ${theme.breakpoints[2]}) {\n    max-width: ${p => (p.wide ? '620px !important' : null)};\n  }\n`;\n\nKeyValueList.displayName = 'KeyValueList';\n\nexport default KeyValueList;\n","import isObject from 'lodash/isObject';\n\nimport {EventGroupComponent} from 'app/types';\n\nexport function hasNonContributingComponent(component: EventGroupComponent | undefined) {\n  if (!component?.contributes) {\n    return true;\n  }\n  for (const value of component.values) {\n    if (isObject(value) && hasNonContributingComponent(value)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function shouldInlineComponentValue(component: EventGroupComponent) {\n  return (component.values as EventGroupComponent[]).every(value => !isObject(value));\n}\n\nexport function groupingComponentFilter(\n  value: EventGroupComponent | string,\n  showNonContributing: boolean\n) {\n  if (isObject(value)) {\n    // no point rendering such nodes at all, we never show them\n    if (!value.contributes && !value.hint && value.values.length === 0) {\n      return false;\n    }\n    // non contributing values are otherwise optional\n    if (!showNonContributing && !value.contributes) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {tct} from 'app/locale';\nimport Button from 'app/components/button';\nimport {IconAdd, IconSubtract} from 'app/icons';\n\nimport {GroupingComponentListItem} from './groupingComponent';\n\ntype DefaultProps = {\n  maxVisibleItems: number;\n};\n\ntype Props = DefaultProps & {\n  items: React.ReactNode[];\n};\n\ntype State = {\n  collapsed: boolean;\n};\n\nclass GroupingComponentFrames extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    maxVisibleItems: 2,\n  };\n\n  state: State = {\n    collapsed: true,\n  };\n\n  render() {\n    const {items, maxVisibleItems} = this.props;\n    const {collapsed} = this.state;\n    const isCollapsable = items.length > maxVisibleItems;\n\n    return (\n      <React.Fragment>\n        {items.map((item, index) => {\n          if (!collapsed || index < maxVisibleItems) {\n            return (\n              <GroupingComponentListItem isCollapsable={isCollapsable} key={index}>\n                {item}\n              </GroupingComponentListItem>\n            );\n          }\n\n          if (index === maxVisibleItems) {\n            return (\n              <GroupingComponentListItem key={index}>\n                <ToggleCollapse\n                  size=\"small\"\n                  priority=\"link\"\n                  icon={<IconAdd size=\"8px\" />}\n                  onClick={() => this.setState({collapsed: false})}\n                >\n                  {tct('show [numberOfFrames] similiar', {\n                    numberOfFrames: items.length - maxVisibleItems,\n                  })}\n                </ToggleCollapse>\n              </GroupingComponentListItem>\n            );\n          }\n\n          return null;\n        })}\n\n        {!collapsed && items.length > maxVisibleItems && (\n          <GroupingComponentListItem>\n            <ToggleCollapse\n              size=\"small\"\n              priority=\"link\"\n              icon={<IconSubtract size=\"8px\" />}\n              onClick={() => this.setState({collapsed: true})}\n            >\n              {tct('collapse [numberOfFrames] similiar', {\n                numberOfFrames: items.length - maxVisibleItems,\n              })}\n            </ToggleCollapse>\n          </GroupingComponentListItem>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst ToggleCollapse = styled(Button)`\n  margin: ${space(0.5)} 0;\n`;\n\nexport default GroupingComponentFrames;\n","import React from 'react';\n\nimport {EventGroupComponent} from 'app/types';\n\nimport GroupingComponent from './groupingComponent';\nimport {groupingComponentFilter} from './utils';\nimport GroupingComponentFrames from './groupingComponentFrames';\n\ntype FrameGroup = {\n  key: string;\n  data: EventGroupComponent[];\n};\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponentStacktrace = ({component, showNonContributing}: Props) => {\n  const getFrameGroups = () => {\n    const frameGroups: FrameGroup[] = [];\n\n    (component.values as EventGroupComponent[])\n      .filter(value => groupingComponentFilter(value, showNonContributing))\n      .forEach(value => {\n        const key = (value.values as EventGroupComponent[])\n          .filter(v => groupingComponentFilter(v, showNonContributing))\n          .map(v => v.id)\n          .sort((a, b) => a.localeCompare(b))\n          .join('');\n\n        const lastGroup = frameGroups[frameGroups.length - 1];\n\n        if (lastGroup?.key === key) {\n          lastGroup.data.push(value);\n        } else {\n          frameGroups.push({key, data: [value]});\n        }\n      });\n\n    return frameGroups;\n  };\n\n  return (\n    <React.Fragment>\n      {getFrameGroups().map((group, index) => (\n        <GroupingComponentFrames\n          key={index}\n          items={group.data.map((v, idx) => (\n            <GroupingComponent\n              key={idx}\n              component={v}\n              showNonContributing={showNonContributing}\n            />\n          ))}\n        />\n      ))}\n    </React.Fragment>\n  );\n};\n\nexport default GroupingComponentStacktrace;\n","import React from 'react';\nimport isObject from 'lodash/isObject';\n\nimport {EventGroupComponent} from 'app/types';\n\nimport GroupingComponent, {\n  GroupingValue,\n  GroupingComponentListItem,\n} from './groupingComponent';\nimport {groupingComponentFilter} from './utils';\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponentChildren = ({component, showNonContributing}: Props) => {\n  return (\n    <React.Fragment>\n      {(component.values as EventGroupComponent[])\n        .filter(value => groupingComponentFilter(value, showNonContributing))\n        .map((value, idx) => (\n          <GroupingComponentListItem key={idx}>\n            {isObject(value) ? (\n              <GroupingComponent\n                component={value}\n                showNonContributing={showNonContributing}\n              />\n            ) : (\n              <GroupingValue valueType={component.name || component.id}>\n                {typeof value === 'string' || typeof value === 'number'\n                  ? value\n                  : JSON.stringify(value, null, 2)}\n              </GroupingValue>\n            )}\n          </GroupingComponentListItem>\n        ))}\n    </React.Fragment>\n  );\n};\n\nexport default GroupingComponentChildren;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {EventGroupComponent} from 'app/types';\n\nimport {shouldInlineComponentValue} from './utils';\nimport GroupingComponentStacktrace from './groupingComponentStacktrace';\nimport GroupingComponentChildren from './groupingComponentChildren';\n\ntype Props = {\n  component: EventGroupComponent;\n  showNonContributing: boolean;\n};\n\nconst GroupingComponent = ({component, showNonContributing}: Props) => {\n  const shouldInlineValue = shouldInlineComponentValue(component);\n\n  const GroupingComponentListItems =\n    component.id === 'stacktrace'\n      ? GroupingComponentStacktrace\n      : GroupingComponentChildren;\n\n  return (\n    <GroupingComponentWrapper isContributing={component.contributes}>\n      <span>\n        {component.name || component.id}\n        {component.hint && <GroupingHint>{` (${component.hint})`}</GroupingHint>}\n      </span>\n\n      <GroupingComponentList isInline={shouldInlineValue}>\n        <GroupingComponentListItems\n          component={component}\n          showNonContributing={showNonContributing}\n        />\n      </GroupingComponentList>\n    </GroupingComponentWrapper>\n  );\n};\n\nconst GroupingComponentList = styled('ul')<{isInline: boolean}>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  &,\n  & > li {\n    display: ${p => (p.isInline ? 'inline' : 'block')};\n  }\n`;\n\nexport const GroupingComponentListItem = styled('li')<{isCollapsable?: boolean}>`\n  padding: 0;\n  margin: ${space(0.25)} 0 ${space(0.25)} ${space(1.5)};\n\n  ${p =>\n    p.isCollapsable &&\n    `\n    border-left: 1px solid ${p.theme.innerBorder};\n    margin: 0 0 -${space(0.25)} ${space(1)};\n    padding-left: ${space(0.5)};\n  `}\n`;\n\nexport const GroupingValue = styled('code')<{valueType: string}>`\n  display: inline-block;\n  margin: ${space(0.25)} ${space(0.5)} ${space(0.25)} 0;\n  font-size: ${p => p.theme.fontSizeSmall};\n  padding: 0 ${space(0.25)};\n  background: rgba(112, 163, 214, 0.1);\n  color: #4e3fb4;\n\n  ${({valueType}) =>\n    (valueType === 'function' || valueType === 'symbol') &&\n    `\n    font-weight: bold;\n    color: #2c58a8;\n  `}\n`;\n\nconst GroupingComponentWrapper = styled('div')<{isContributing: boolean}>`\n  color: ${p => (p.isContributing ? null : p.theme.gray200)};\n\n  ${GroupingValue}, button {\n    opacity: ${p => (p.isContributing ? 1 : 0.6)};\n  }\n`;\n\nconst GroupingHint = styled('small')`\n  font-size: 0.8em;\n`;\n\nexport default GroupingComponent;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport capitalize from 'lodash/capitalize';\n\nimport {t} from 'app/locale';\nimport KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueList';\nimport {EventGroupVariant, EventGroupVariantType, EventGroupComponent} from 'app/types';\nimport ButtonBar from 'app/components/buttonBar';\nimport Button from 'app/components/button';\nimport {IconCheckmark, IconClose} from 'app/icons';\nimport space from 'app/styles/space';\nimport Tooltip from 'app/components/tooltip';\nimport QuestionTooltip from 'app/components/questionTooltip';\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nimport {hasNonContributingComponent} from './utils';\nimport GroupingComponent from './groupingComponent';\n\ntype Props = {\n  variant: EventGroupVariant;\n  showGroupingConfig: boolean;\n};\n\ntype State = {\n  showNonContributing: boolean;\n};\n\ntype VariantData = [string, React.ReactNode][];\n\nclass GroupVariant extends React.Component<Props, State> {\n  state = {\n    showNonContributing: false,\n  };\n\n  handleShowNonContributing = () => {\n    this.setState({showNonContributing: true});\n  };\n\n  handleHideNonContributing = () => {\n    this.setState({showNonContributing: false});\n  };\n\n  getVariantData(): [VariantData, EventGroupComponent | undefined] {\n    const {variant, showGroupingConfig} = this.props;\n    const data: VariantData = [];\n    let component: EventGroupComponent | undefined;\n\n    if (!this.state.showNonContributing && variant.hash === null) {\n      return [data, component];\n    }\n\n    if (variant.hash !== null) {\n      data.push([\n        t('Hash'),\n        <TextWithQuestionTooltip key=\"hash\">\n          <Hash>{variant.hash}</Hash>\n          <QuestionTooltip\n            size=\"xs\"\n            position=\"top\"\n            title={t('Events with the same hash are grouped together')}\n          />\n        </TextWithQuestionTooltip>,\n      ]);\n    }\n\n    if (variant.hashMismatch) {\n      data.push([\n        t('Hash mismatch'),\n        t('hashing algorithm produced a hash that does not match the event'),\n      ]);\n    }\n\n    switch (variant.type) {\n      case EventGroupVariantType.COMPONENT:\n        component = variant.component;\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t(\n                'Uses a complex grouping algorithm taking event data into account'\n              )}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        if (showGroupingConfig && variant.config?.id) {\n          data.push([t('Grouping Config'), variant.config.id]);\n        }\n        break;\n      case EventGroupVariantType.CUSTOM_FINGERPRINT:\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t('Overrides the default grouping by a custom fingerprinting rule')}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        if (variant.values) {\n          data.push([t('Fingerprint values'), variant.values]);\n        }\n        break;\n      case EventGroupVariantType.SALTED_COMPONENT:\n        component = variant.component;\n        data.push([\n          t('Type'),\n          <TextWithQuestionTooltip key=\"type\">\n            {variant.type}\n            <QuestionTooltip\n              size=\"xs\"\n              position=\"top\"\n              title={t(\n                'Uses a complex grouping algorithm taking event data and a fingerprint into account'\n              )}\n            />\n          </TextWithQuestionTooltip>,\n        ]);\n        if (variant.values) {\n          data.push([t('Fingerprint values'), variant.values]);\n        }\n        if (showGroupingConfig && variant.config?.id) {\n          data.push([t('Grouping Config'), variant.config.id]);\n        }\n        break;\n      default:\n        break;\n    }\n\n    if (component) {\n      data.push([\n        t('Grouping'),\n        <GroupingTree key={component.id}>\n          <GroupingComponent\n            component={component}\n            showNonContributing={this.state.showNonContributing}\n          />\n        </GroupingTree>,\n      ]);\n    }\n\n    return [data, component];\n  }\n\n  renderTitle() {\n    const {variant} = this.props;\n    const isContributing = variant.hash !== null;\n\n    let title;\n    if (isContributing) {\n      title = t('Contributing variant');\n    } else {\n      const hint = variant.component?.hint;\n      if (hint) {\n        title = t('Non-contributing variant: %s', hint);\n      } else {\n        title = t('Non-contributing variant');\n      }\n    }\n\n    return (\n      <Tooltip title={title}>\n        <VariantTitle>\n          <ContributionIcon isContributing={isContributing} />\n          {t('By')}{' '}\n          {variant.description\n            ?.split(' ')\n            .map(i => capitalize(i))\n            .join(' ') ?? t('Nothing')}\n        </VariantTitle>\n      </Tooltip>\n    );\n  }\n\n  renderContributionToggle() {\n    const {showNonContributing} = this.state;\n\n    return (\n      <ContributingToggle merged active={showNonContributing ? 'all' : 'relevant'}>\n        <Button barId=\"relevant\" size=\"xsmall\" onClick={this.handleHideNonContributing}>\n          {t('Contributing values')}\n        </Button>\n        <Button barId=\"all\" size=\"xsmall\" onClick={this.handleShowNonContributing}>\n          {t('All values')}\n        </Button>\n      </ContributingToggle>\n    );\n  }\n\n  render() {\n    const [data, component] = this.getVariantData();\n\n    return (\n      <VariantWrapper>\n        <Header>\n          {this.renderTitle()}\n          {hasNonContributingComponent(component) && this.renderContributionToggle()}\n        </Header>\n\n        <KeyValueList data={data} isContextData isSorted={false} />\n      </VariantWrapper>\n    );\n  }\n}\n\nconst VariantWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: block;\n  }\n`;\n\nconst VariantTitle = styled('h5')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  display: flex;\n  align-items: center;\n`;\n\nconst ContributionIcon = styled(({isContributing, ...p}) =>\n  isContributing ? (\n    <IconCheckmark size=\"sm\" isCircled color=\"green300\" {...p} />\n  ) : (\n    <IconClose size=\"sm\" isCircled color=\"red\" {...p} />\n  )\n)`\n  margin-right: ${space(1)};\n`;\n\nconst ContributingToggle = styled(ButtonBar)`\n  justify-content: flex-end;\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    margin-top: ${space(0.5)};\n  }\n`;\n\nconst GroupingTree = styled('div')`\n  color: #2f2936;\n`;\n\nconst TextWithQuestionTooltip = styled('div')`\n  display: grid;\n  align-items: center;\n  grid-template-columns: max-content min-content;\n  grid-gap: ${space(0.5)};\n`;\n\nconst Hash = styled('span')`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    ${overflowEllipsis};\n    width: 210px;\n  }\n`;\n\nexport default GroupVariant;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {EventGroupingConfig} from 'app/types';\nimport AsyncComponent from 'app/components/asyncComponent';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport DropdownButton from 'app/components/dropdownButton';\nimport Tooltip from 'app/components/tooltip';\nimport {t} from 'app/locale';\n\nimport {GroupingConfigItem} from '.';\n\ntype Props = AsyncComponent['props'] & {\n  eventConfigId: string;\n  configId: string;\n  onSelect: (selection: any) => void;\n};\n\ntype State = AsyncComponent['state'] & {\n  configs: EventGroupingConfig[];\n};\n\nclass GroupingConfigSelect extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      configs: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['configs', '/grouping-configs/']];\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {configId, eventConfigId, onSelect} = this.props;\n    const {configs} = this.state;\n\n    const options = configs.map(({id, hidden}) => ({\n      value: id,\n      label: (\n        <GroupingConfigItem isHidden={hidden} isActive={id === eventConfigId}>\n          {id}\n        </GroupingConfigItem>\n      ),\n    }));\n\n    return (\n      <DropdownAutoComplete onSelect={onSelect} items={options}>\n        {({isOpen}) => (\n          <Tooltip title={t('Click here to experiment with other grouping configs')}>\n            <StyledDropdownButton isOpen={isOpen} size=\"small\">\n              <GroupingConfigItem isActive={eventConfigId === configId}>\n                {configId}\n              </GroupingConfigItem>\n            </StyledDropdownButton>\n          </Tooltip>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n}\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  font-weight: inherit;\n`;\n\nexport default GroupingConfigSelect;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'app/components/asyncComponent';\nimport EventDataSection from 'app/components/events/eventDataSection';\nimport {t} from 'app/locale';\nimport withOrganization from 'app/utils/withOrganization';\nimport {Organization, Event, EventGroupInfo} from 'app/types';\nimport space from 'app/styles/space';\nimport Button from 'app/components/button';\nimport LoadingIndicator from 'app/components/loadingIndicator';\n\nimport GroupVariant from './groupingVariant';\nimport GroupingConfigSelect from './groupingConfigSelect';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projectId: string;\n  event: Event;\n  showGroupingConfig: boolean;\n};\n\ntype State = AsyncComponent['state'] & {\n  isOpen: boolean;\n  configOverride: string | null;\n  groupInfo: EventGroupInfo;\n};\n\nclass EventGroupingInfo extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, event, projectId} = this.props;\n\n    let path = `/projects/${organization.slug}/${projectId}/events/${event.id}/grouping-info/`;\n    if (this.state?.configOverride) {\n      path = `${path}?config=${this.state.configOverride}`;\n    }\n\n    return [['groupInfo', path]];\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      isOpen: false,\n      configOverride: null,\n    };\n  }\n\n  toggle = () => {\n    this.setState(state => ({\n      isOpen: !state.isOpen,\n      configOverride: state.isOpen ? null : state.configOverride,\n    }));\n  };\n\n  handleConfigSelect = selection => {\n    this.setState({configOverride: selection.value}, () => this.reloadData());\n  };\n\n  renderGroupInfoSummary() {\n    const {groupInfo} = this.state;\n\n    if (!groupInfo) {\n      return null;\n    }\n\n    const groupedBy = Object.values(groupInfo)\n      .filter(variant => variant.hash !== null && variant.description !== null)\n      .map(variant => variant.description)\n      .sort((a, b) => a!.toLowerCase().localeCompare(b!.toLowerCase()))\n      .join(', ');\n\n    return (\n      <SummaryGroupedBy data-test-id=\"loaded-grouping-info\">{`(${t('grouped by')} ${\n        groupedBy || t('nothing')\n      })`}</SummaryGroupedBy>\n    );\n  }\n\n  renderGroupConfigSelect() {\n    const {configOverride} = this.state;\n    const {event} = this.props;\n\n    const configId = configOverride ?? event.groupingConfig.id;\n\n    return (\n      <GroupConfigWrapper>\n        <GroupingConfigSelect\n          eventConfigId={event.groupingConfig.id}\n          configId={configId}\n          onSelect={this.handleConfigSelect}\n        />\n      </GroupConfigWrapper>\n    );\n  }\n\n  renderGroupInfo() {\n    const {groupInfo, loading} = this.state;\n    const {showGroupingConfig} = this.props;\n\n    const variants = groupInfo\n      ? Object.values(groupInfo).sort((a, b) =>\n          a.hash && !b.hash\n            ? -1\n            : a.description\n                ?.toLowerCase()\n                .localeCompare(b.description?.toLowerCase() ?? '') ?? 1\n        )\n      : [];\n\n    return (\n      <React.Fragment>\n        {showGroupingConfig && this.renderGroupConfigSelect()}\n\n        {loading ? (\n          <LoadingIndicator />\n        ) : (\n          variants.map((variant, index) => (\n            <React.Fragment key={variant.key}>\n              <GroupVariant variant={variant} showGroupingConfig={showGroupingConfig} />\n              {index < variants.length - 1 && <VariantDivider />}\n            </React.Fragment>\n          ))\n        )}\n      </React.Fragment>\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {isOpen} = this.state;\n\n    const title = (\n      <React.Fragment>\n        {t('Event Grouping Information')}\n        {!isOpen && this.renderGroupInfoSummary()}\n      </React.Fragment>\n    );\n\n    const actions = (\n      <ToggleButton onClick={this.toggle} priority=\"link\">\n        {isOpen ? t('Hide Details') : t('Show Details')}\n      </ToggleButton>\n    );\n\n    return (\n      <EventDataSection type=\"grouping-info\" title={title} actions={actions}>\n        {isOpen && this.renderGroupInfo()}\n      </EventDataSection>\n    );\n  }\n}\n\nconst SummaryGroupedBy = styled('small')`\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: block;\n    margin: 0 !important;\n  }\n`;\n\nconst ToggleButton = styled(Button)`\n  font-weight: 700;\n  color: ${p => p.theme.subText};\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst GroupConfigWrapper = styled('div')`\n  margin-bottom: ${space(1.5)};\n  margin-top: -${space(1)};\n`;\n\nexport const GroupingConfigItem = styled('span')<{\n  isHidden?: boolean;\n  isActive?: boolean;\n}>`\n  font-family: ${p => p.theme.text.familyMono};\n  opacity: ${p => (p.isHidden ? 0.5 : null)};\n  font-weight: ${p => (p.isActive ? 'bold' : null)};\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst VariantDivider = styled('hr')`\n  padding-top: ${space(1)};\n`;\n\nexport default withOrganization(EventGroupingInfo);\n"],"sourceRoot":""}