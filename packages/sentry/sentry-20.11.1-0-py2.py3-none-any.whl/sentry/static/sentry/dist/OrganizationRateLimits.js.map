{"version":3,"sources":["webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/components/forms/controls/rangeSlider.tsx","webpack:///./app/views/settings/components/forms/rangeField.tsx","webpack:///./app/views/settings/organizationRateLimits/organizationRateLimits.jsx","webpack:///./app/views/settings/organizationRateLimits/index.jsx"],"names":["SettingsPageHeading","this","props","icon","title","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","RangeSlider","state","sliderValue","allowedValues","indexOf","Number","value","getActualValue","setValue","setState","changeValue","e","onChange","handleInput","parseInt","target","handleBlur","onBlur","handleCustomInputChange","isNaN","handleCustomInputBlur","nextProps","min","max","step","name","disabled","formatLabel","placeholder","showCustomInput","actualValue","displayValue","length","t","Label","htmlFor","SliderAndInputWrapper","Slider","type","onInput","onMouseUp","onKeyUp","hasLabel","theme","grid","gray200","purple300","subText","defaultFormatMessageValue","RangeField","formatMessageValue","otherProps","Object","assign","field","fieldOnChange","fieldProps","val","event","ACCOUNT_RATE_LIMIT_VALUES","steps","i","push","getRateLimitValues","OrganizationRateLimit","handleSubmitSucces","organization","quota","maxRate","maxRateInterval","initialData","projectRateLimit","projectLimit","accountRateLimit","accountLimit","data-test-id","saveOnBlur","allowUndo","apiMethod","apiEndpoint","slug","label","help","css","tct","number","toLocaleString","dangerouslySetInnerHTML","__html","OrganizationRateLimitsContainer","withOrganization"],"mappings":"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","file":"OrganizationRateLimits.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport space from 'app/styles/space';\n\ntype Props = {\n  name: string;\n\n  /**\n   * min allowed value, not needed if using `allowedValues`\n   */\n  min?: number;\n\n  /**\n   * max allowed value, not needed if using `allowedValues`\n   */\n  max?: number;\n\n  /**\n   * String is a valid type here only for empty string\n   * Otherwise react complains:\n   * \"`value` prop on `input` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.\"\n   *\n   * And we want this to be a controlled input when value is empty\n   */\n  value: number | '';\n  step?: number;\n  disabled?: boolean;\n\n  /**\n   * Render prop for slider's label\n   * Is passed the value as an argument\n   */\n  formatLabel?: (value: number | '') => React.ReactNode;\n\n  /**\n   * Array of allowed values. Make sure `value` is in this list.\n   * THIS NEEDS TO BE SORTED\n   */\n  allowedValues?: number[];\n\n  /**\n   * Show input control for custom values\n   */\n  showCustomInput?: boolean;\n\n  // Placeholder for custom input\n  placeholder?: string;\n\n  /**\n   * This is called when *any* MouseUp or KeyUp event happens.\n   * Used for \"smart\" Fields to trigger a \"blur\" event. `onChange` can\n   * be triggered quite frequently\n   */\n  onBlur?: (value, event?) => void;\n  onChange?: Function;\n};\n\ntype State = {\n  sliderValue: number | '';\n};\n\nclass RangeSlider extends React.Component<Props, State> {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    /**\n     * min allowed value, not needed if using `allowedValues`\n     */\n    min: PropTypes.number,\n    /**\n     * max allowed value, not needed if using `allowedValues`\n     */\n    max: PropTypes.number,\n    /**\n     * String is a valid type here only for empty string\n     * Otherwise react complains:\n     * \"`value` prop on `input` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.\"\n     *\n     * And we want this to be a controlled input when value is empty\n     */\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    step: PropTypes.number,\n    disabled: PropTypes.bool,\n    onChange: PropTypes.func,\n\n    /**\n     * Render prop for slider's label\n     * Is passed the value as an argument\n     */\n    formatLabel: PropTypes.func,\n\n    /**\n     * Array of allowed values. Make sure `value` is in this list.\n     * THIS NEEDS TO BE SORTED\n     */\n    allowedValues: PropTypes.arrayOf(PropTypes.number),\n\n    /**\n     * Show custom input\n     */\n    showCustomInput: PropTypes.bool,\n\n    // Placeholder for custom input\n    placeholder: PropTypes.string,\n\n    /**\n     * This is called when *any* MouseUp or KeyUp event happens.\n     * Used for \"smart\" Fields to trigger a \"blur\" event. `onChange` can\n     * be triggered quite frequently\n     */\n    onBlur: PropTypes.func,\n  };\n\n  state: State = {\n    sliderValue: this.props.allowedValues\n      ? // With `allowedValues` sliderValue will be the index to value in `allowedValues`\n        // This is so we can snap the rangeSlider using `step`\n        // This means that the range slider will have a uniform `step` in the UI\n        // and scale won't match `allowedValues\n        // e.g. with allowedValues = [0, 100, 1000, 10000] - in UI we'll have values = [0, 3] w/ step of 1\n        // so it always snaps at 25% width\n        this.props.allowedValues.indexOf(Number(this.props.value || 0))\n      : this.props.value,\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    // Update local state when re-rendered with next `props.value` (e.g if this is controlled)\n    if (typeof nextProps.value !== 'undefined') {\n      const {allowedValues} = this.props;\n      let sliderValue = nextProps.value;\n\n      // If `allowedValues` is defined, then `sliderValue` represents index to `allowedValues`\n      if (allowedValues && allowedValues.indexOf(Number(sliderValue || 0)) > -1) {\n        sliderValue = allowedValues.indexOf(Number(sliderValue || 0));\n      }\n      this.setState({sliderValue});\n    }\n  }\n\n  getActualValue = (sliderValue: State['sliderValue']): number | '' => {\n    const {allowedValues} = this.props;\n    let value: number | '';\n\n    if (allowedValues) {\n      // If `allowedValues` is defined, then `sliderValue` represents index to `allowedValues`\n      value = allowedValues[sliderValue];\n    } else {\n      value = sliderValue;\n    }\n\n    return value;\n  };\n\n  setValue = value => {\n    this.setState({\n      sliderValue: value,\n    });\n  };\n\n  changeValue = (value, e) => {\n    if (this.props.onChange) {\n      this.props.onChange(this.getActualValue(value), e);\n    }\n  };\n\n  handleInput = e => {\n    const sliderValue = parseInt(e.target.value, 10);\n    this.setValue(sliderValue);\n    this.changeValue(sliderValue, e);\n  };\n\n  handleBlur = e => {\n    const {onBlur} = this.props;\n    if (typeof onBlur !== 'function') {\n      return;\n    }\n\n    onBlur(e);\n  };\n\n  handleCustomInputChange = e => {\n    const value = parseInt(e.target.value, 10);\n    this.setValue(isNaN(value) ? 0 : value);\n  };\n\n  handleCustomInputBlur = e => {\n    this.handleInput(e);\n  };\n\n  render() {\n    let {min, max, step} = this.props;\n    const {\n      name,\n      disabled,\n      allowedValues,\n      formatLabel,\n      placeholder,\n      showCustomInput,\n    } = this.props;\n    const {sliderValue} = this.state;\n    let actualValue = sliderValue;\n    let displayValue: React.ReactNode = actualValue;\n\n    if (allowedValues) {\n      step = 1;\n      min = 0;\n      max = allowedValues.length - 1;\n      actualValue = allowedValues[sliderValue];\n      displayValue =\n        typeof actualValue !== 'undefined' ? actualValue : t('Invalid value');\n    }\n\n    displayValue =\n      typeof formatLabel === 'function' ? formatLabel(actualValue) : displayValue;\n\n    return (\n      <div>\n        {!showCustomInput && <Label htmlFor={name}>{displayValue}</Label>}\n        <SliderAndInputWrapper showCustomInput={showCustomInput}>\n          <Slider\n            type=\"range\"\n            name={name}\n            min={min}\n            max={max}\n            step={step}\n            disabled={disabled}\n            onInput={this.handleInput}\n            onChange={() => {}}\n            onMouseUp={this.handleBlur}\n            onKeyUp={this.handleBlur}\n            value={sliderValue}\n            hasLabel={!showCustomInput}\n          />\n          {showCustomInput && (\n            <Input\n              placeholder={placeholder}\n              value={sliderValue}\n              onChange={this.handleCustomInputChange}\n              onBlur={this.handleCustomInputBlur}\n            />\n          )}\n        </SliderAndInputWrapper>\n      </div>\n    );\n  }\n}\n\nexport default RangeSlider;\n\nconst Slider = styled('input')<{hasLabel: boolean}>`\n  /* stylelint-disable-next-line property-no-vendor-prefix */\n  -webkit-appearance: none;\n  width: 100%;\n  margin: ${p => p.theme.grid}px 0 ${p => p.theme.grid * (p.hasLabel ? 2 : 1)}px;\n\n  &::-webkit-slider-runnable-track {\n    width: 100%;\n    height: 3px;\n    cursor: pointer;\n    background: ${p => p.theme.gray200};\n    border-radius: 3px;\n    border: 0;\n  }\n\n  &::-moz-range-track {\n    width: 100%;\n    height: 3px;\n    cursor: pointer;\n    background: ${p => p.theme.gray200};\n    border-radius: 3px;\n    border: 0;\n  }\n\n  &::-ms-track {\n    width: 100%;\n    height: 3px;\n    cursor: pointer;\n    background: ${p => p.theme.gray200};\n    border-radius: 3px;\n    border: 0;\n  }\n\n  &::-webkit-slider-thumb {\n    box-shadow: 0 0 0 3px #fff;\n    height: 17px;\n    width: 17px;\n    border-radius: 50%;\n    background: ${p => p.theme.purple300};\n    cursor: pointer;\n    /* stylelint-disable-next-line property-no-vendor-prefix */\n    -webkit-appearance: none;\n    margin-top: -7px;\n    border: 0;\n  }\n\n  &::-moz-range-thumb {\n    box-shadow: 0 0 0 3px #fff;\n    height: 17px;\n    width: 17px;\n    border-radius: 50%;\n    background: ${p => p.theme.purple300};\n    cursor: pointer;\n    /* stylelint-disable-next-line property-no-vendor-prefix */\n    -webkit-appearance: none;\n    margin-top: -7px;\n    border: 0;\n  }\n\n  &::-ms-thumb {\n    box-shadow: 0 0 0 3px #fff;\n    height: 17px;\n    width: 17px;\n    border-radius: 50%;\n    background: ${p => p.theme.purple300};\n    cursor: pointer;\n    /* stylelint-disable-next-line property-no-vendor-prefix */\n    -webkit-appearance: none;\n    margin-top: -7px;\n    border: 0;\n  }\n\n  &::-ms-fill-lower {\n    background: ${p => p.theme.gray200};\n    border: 0;\n    border-radius: 50%;\n  }\n\n  &::-ms-fill-upper {\n    background: ${p => p.theme.gray200};\n    border: 0;\n    border-radius: 50%;\n  }\n\n  &:focus {\n    outline: none;\n\n    &::-webkit-slider-runnable-track {\n      background: ${p => p.theme.gray200};\n    }\n\n    &::-ms-fill-upper {\n      background: ${p => p.theme.gray200};\n    }\n\n    &::-ms-fill-lower {\n      background: ${p => p.theme.gray200};\n    }\n  }\n\n  &[disabled] {\n    &::-webkit-slider-thumb {\n      background: ${p => p.theme.gray200};\n      cursor: default;\n    }\n\n    &::-moz-range-thumb {\n      background: ${p => p.theme.gray200};\n      cursor: default;\n    }\n\n    &::-ms-thumb {\n      background: ${p => p.theme.gray200};\n      cursor: default;\n    }\n\n    &::-webkit-slider-runnable-track {\n      cursor: default;\n    }\n\n    &::-moz-range-track {\n      cursor: default;\n    }\n\n    &::-ms-track {\n      cursor: default;\n    }\n  }\n`;\n\nconst Label = styled('label')`\n  font-size: 14px;\n  margin-bottom: ${p => p.theme.grid}px;\n  color: ${p => p.theme.subText};\n`;\n\nconst SliderAndInputWrapper = styled('div')<{showCustomInput?: boolean}>`\n  display: grid;\n  align-items: center;\n  grid-auto-flow: column;\n  grid-template-columns: 4fr ${p => p.showCustomInput && '1fr'};\n  grid-gap: ${space(1)};\n`;\n","import React from 'react';\n\nimport InputField, {onEvent} from 'app/views/settings/components/forms/inputField';\nimport RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';\n\ntype DefaultProps = {\n  formatMessageValue?: false | Function;\n};\n\ntype DisabledFunction = (props: Omit<Props, 'formatMessageValue'>) => boolean;\ntype PlaceholderFunction = (props: any) => React.ReactNode;\n\ntype Props = DefaultProps &\n  Omit<RangeSlider['props'], 'value' | 'disabled' | 'placeholder'> &\n  Omit<InputField['props'], 'field'> & {\n    disabled?: boolean | DisabledFunction;\n    placeholder?: string | PlaceholderFunction;\n  };\n\nfunction onChange(\n  fieldOnChange: onEvent,\n  value: number | '',\n  e: React.FormEvent<HTMLInputElement>\n) {\n  fieldOnChange(value, e);\n}\n\nfunction defaultFormatMessageValue(value, props: Props) {\n  return (typeof props.formatLabel === 'function' && props.formatLabel(value)) || value;\n}\n\nexport default function RangeField({\n  formatMessageValue = defaultFormatMessageValue,\n  ...otherProps\n}: Props) {\n  if (typeof otherProps.disabled === 'function') {\n    otherProps.disabled = otherProps.disabled(otherProps);\n  }\n  const props: Props = Object.assign(otherProps, {formatMessageValue});\n\n  return (\n    <InputField\n      {...props}\n      field={({onChange: fieldOnChange, onBlur, value, ...fieldProps}) => (\n        <RangeSlider\n          {...fieldProps}\n          value={value}\n          onBlur={onBlur}\n          onChange={(val, event) => onChange(fieldOnChange, val, event)}\n        />\n      )}\n    />\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t, tct} from 'app/locale';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport RangeField from 'app/views/settings/components/forms/rangeField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst getRateLimitValues = () => {\n  const steps = [];\n  let i = 0;\n  while (i <= 1000000) {\n    steps.push(i);\n    if (i < 10000) {\n      i += 1000;\n    } else if (i < 100000) {\n      i += 10000;\n    } else {\n      i += 100000;\n    }\n  }\n  return steps;\n};\n\n// We can just generate this once\nconst ACCOUNT_RATE_LIMIT_VALUES = getRateLimitValues();\n\nexport default class OrganizationRateLimit extends React.Component {\n  static propTypes = {\n    organization: PropTypes.object.isRequired,\n  };\n\n  handleSubmitSucces = () => {\n    // TODO(billy): Update organization.quota in organizationStore with new values\n  };\n\n  render() {\n    const {organization} = this.props;\n    const {quota} = organization;\n    const {maxRate, maxRateInterval, projectLimit, accountLimit} = quota;\n    const initialData = {\n      projectRateLimit: projectLimit || 100,\n      accountRateLimit: accountLimit,\n    };\n\n    return (\n      <div>\n        <SettingsPageHeader title={t('Rate Limits')} />\n\n        <Panel>\n          <PanelHeader>{t('Adjust Limits')}</PanelHeader>\n          <PanelBody>\n            <PanelAlert type=\"info\">\n              {t(`Rate limits allow you to control how much data is stored for this\n                organization. When a rate is exceeded the system will begin discarding\n                data until the next interval.`)}\n            </PanelAlert>\n\n            <Form\n              data-test-id=\"rate-limit-editor\"\n              saveOnBlur\n              allowUndo\n              apiMethod=\"PUT\"\n              apiEndpoint={`/organizations/${organization.slug}/`}\n              initialData={initialData}\n            >\n              {!maxRate ? (\n                <RangeField\n                  name=\"accountRateLimit\"\n                  label={t('Account Limit')}\n                  min={0}\n                  max={1000000}\n                  allowedValues={ACCOUNT_RATE_LIMIT_VALUES}\n                  help={t(\n                    'The maximum number of events to accept across this entire organization.'\n                  )}\n                  placeholder=\"e.g. 500\"\n                  formatLabel={value =>\n                    !value\n                      ? t('No Limit')\n                      : tct('[number] per hour', {\n                          number: value.toLocaleString(),\n                        })\n                  }\n                />\n              ) : (\n                <Field\n                  label={t('Account Limit')}\n                  help={t(\n                    'The maximum number of events to accept across this entire organization.'\n                  )}\n                >\n                  <TextBlock css={{marginBottom: 0}}>\n                    {tct(\n                      'Your account is limited to a maximum of [maxRate] events per [maxRateInterval] seconds.',\n                      {\n                        maxRate,\n                        maxRateInterval,\n                      }\n                    )}\n                  </TextBlock>\n                </Field>\n              )}\n              <RangeField\n                name=\"projectRateLimit\"\n                label={t('Per-Project Limit')}\n                help={t(\n                  'The maximum percentage of the account limit (set above) that an individual project can consume.'\n                )}\n                step={5}\n                min={50}\n                max={100}\n                formatLabel={value =>\n                  value !== 100 ? (\n                    `${value}%`\n                  ) : (\n                    <span\n                      dangerouslySetInnerHTML={{__html: `${t('No Limit')} &mdash; 100%`}}\n                    />\n                  )\n                }\n              />\n            </Form>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SentryTypes from 'app/sentryTypes';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport OrganizationRateLimits from './organizationRateLimits';\n\nclass OrganizationRateLimitsContainer extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n    routes: PropTypes.array,\n  };\n\n  render() {\n    if (!this.props.organization) {\n      return null;\n    }\n\n    return <OrganizationRateLimits {...this.props} />;\n  }\n}\n\nexport default withOrganization(OrganizationRateLimitsContainer);\n"],"sourceRoot":""}