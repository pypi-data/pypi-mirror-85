{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.jsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/components/qrcode.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","FormPanel","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","id","sanitizeQuerySelector","undefined","map","field","defaultValue","fieldWithoutDefaultValue","disabledReason","key","name","highlighted","JsonForm","state","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","forms","features","location","formGroup","i","Fragment","renderForm","contextTypes","PropTypes","object","ConfirmHeader","message","t","RemoveConfirm","getPendingInvite","data","Cookies","get","queryString","Qrcode","code","Table","row","cell","j","BlackCell","WhiteCell","Cell","AccountSecurityEnroll","_form","handleFieldChange","value","handleSmsReset","hasSentCode","remountComponent","handleSmsSubmit","a","authenticator","phone","otp","secret","loading","addMessage","api","requestPromise","enrollEndpoint","isSmsInterface","addErrorMessage","handleEnrollSuccess","handleU2fTap","tapData","handleEnrollError","handleTotpSubmit","dataModel","method","handleRemove","authId","authenticatorEndpoint","router","push","addSuccessMessage","allowError","alreadyEnrolled","status","responseJSON","details","pendingInvitation","fetchOrganizationByMember","memberId","addOrg","fetchOrgDetails","openRecoveryOptions","authenticatorName","onSmsReset","onSmsSubmit","onU2fTap","form","qrcode","challenge","justifyContent","label","priority","type","required","pr","css","onClick","find","style","marginBottom","challengeData","displayMode","flowMode","onTap","getFields","defaultValues","reduce","acc","enabled","isEnrolled","removeButton","onConfirm","description","apiMethod","onFieldChange","apiEndpoint","onSubmit","initialData","hideFooter","params","withRouter"],"mappings":"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","file":"AccountSecurityEnroll.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport {Scope} from 'app/types';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import {Box} from 'reflexbox';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport scrollToElement from 'scroll-to-element';\nimport {Location} from 'history';\nimport * as Sentry from '@sentry/react';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport {Field, FieldObject, JsonFormObject} from './type';\nimport FieldFromConfig from './fieldFromConfig';\nimport FormPanel from './formPanel';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static propTypes = {\n    /**\n     * Fields that are grouped by \"section\"\n     */\n    forms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        fields: PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n        ),\n      })\n    ),\n\n    /**\n     * If `forms` is not defined, `title` + `fields` must be required.\n     * Allows more fine grain control of title/fields\n     */\n    fields: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n    ),\n    /**\n     * Panel title if `forms` is not defined\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    access: PropTypes.object,\n    features: PropTypes.object,\n    renderFooter: PropTypes.func,\n    /**\n     * Renders inside of PanelBody\n     */\n    renderHeader: PropTypes.func,\n    /**\n     * Disables the entire form\n     */\n    disabled: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport Confirm from 'app/components/confirm';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = props => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n","import Cookies from 'js-cookie';\nimport * as queryString from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return queryString.parse(data) as any;\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  code: (1 | 0)[][];\n};\n\nconst Qrcode = ({code}: Props) => (\n  <Table>\n    <tbody>\n      {code.map((row, i) => (\n        <tr key={i}>\n          {row.map((cell, j) => (cell ? <BlackCell key={j} /> : <WhiteCell key={j} />))}\n        </tr>\n      ))}\n    </tbody>\n  </Table>\n);\n\nconst Cell = styled('td')`\n  height: 6px;\n  width: 6px;\n  padding: 0;\n`;\n\nconst BlackCell = styled(Cell)`\n  background-color: black;\n`;\n\nconst WhiteCell = styled(Cell)`\n  background-color: white;\n`;\n\nconst Table = styled('table')`\n  margin: 0;\n`;\n\nexport default Qrcode;\n","import {withRouter} from 'react-router';\nimport React from 'react';\n\nimport {PanelItem} from 'app/components/panels';\nimport {\n  addErrorMessage,\n  addMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {openRecoveryOptions} from 'app/actionCreators/modal';\nimport {fetchOrganizationByMember} from 'app/actionCreators/organizations';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport Qrcode from 'app/components/qrcode';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport U2fsign from 'app/components/u2f/u2fsign';\nimport getPendingInvite from 'app/utils/getPendingInvite';\n\n/**\n * Retrieve additional form fields (or modify ones) based on 2fa method\n *\n * @param {object} params Params object\n * @param {object} authenticator Authenticator model\n * @param {boolean} hasSentCode Flag to track if totp has been sent\n * @param {function} onSmsReset Callback to reset SMS 2fa enrollment\n * @param {function} onSmsSubmit Callback to handle sending code or submit OTP\n * @param {function} onU2fTap Callback when u2f device is activated\n */\nconst getFields = ({authenticator, hasSentCode, onSmsReset, onSmsSubmit, onU2fTap}) => {\n  const {form, qrcode, challenge, id} = authenticator || {};\n\n  if (!form) {\n    return null;\n  }\n\n  if (qrcode) {\n    return [\n      () => (\n        <PanelItem key=\"qrcode\" justifyContent=\"center\" p={2}>\n          <Qrcode code={authenticator.qrcode} />\n        </PanelItem>\n      ),\n      () => (\n        <Field key=\"secret\" label={t('Authenticator secret')}>\n          <TextCopyInput>{authenticator.secret}</TextCopyInput>\n        </Field>\n      ),\n      ...form,\n      () => (\n        <PanelItem key=\"confirm\" justifyContent=\"flex-end\" p={2}>\n          <Button priority=\"primary\" type=\"submit\">\n            {t('Confirm')}\n          </Button>\n        </PanelItem>\n      ),\n    ];\n  }\n\n  // Sms Form needs a start over button + confirm button\n  // Also inputs being disabled vary based on hasSentCode\n  if (id === 'sms') {\n    // Ideally we would have greater flexibility when rendering footer\n    return [\n      {\n        ...form[0],\n        disabled: () => hasSentCode,\n      },\n      {\n        ...form[1],\n        required: true,\n        visible: () => hasSentCode,\n      },\n      () => (\n        <PanelItem key=\"sms-footer\" justifyContent=\"flex-end\" p={2} pr=\"36px\">\n          {hasSentCode && (\n            <Button css={{marginRight: 6}} onClick={onSmsReset}>\n              {t('Start Over')}\n            </Button>\n          )}\n          <Button priority=\"primary\" type=\"button\" onClick={onSmsSubmit}>\n            {hasSentCode ? t('Confirm') : t('Send Code')}\n          </Button>\n        </PanelItem>\n      ),\n    ];\n  }\n\n  // Need to render device name field + U2f component\n  if (id === 'u2f') {\n    const deviceNameField = form.find(({name}) => name === 'deviceName');\n    return [\n      deviceNameField,\n      () => (\n        <U2fsign\n          key=\"u2f-enroll\"\n          style={{marginBottom: 0}}\n          challengeData={challenge}\n          displayMode=\"enroll\"\n          flowMode=\"enroll\"\n          onTap={onU2fTap}\n        />\n      ),\n    ];\n  }\n\n  return null;\n};\n\n/**\n * Renders necessary forms in order to enroll user in 2fa\n */\nclass AccountSecurityEnroll extends AsyncView {\n  _form = {};\n\n  getTitle() {\n    return t('Security');\n  }\n\n  get authenticatorEndpoint() {\n    return `/users/me/authenticators/${this.props.params.authId}/`;\n  }\n\n  get enrollEndpoint() {\n    return `${this.authenticatorEndpoint}enroll/`;\n  }\n\n  getEndpoints() {\n    const errorHandler = err => {\n      const alreadyEnrolled =\n        err &&\n        err.status === 400 &&\n        err.responseJSON &&\n        err.responseJSON.details === 'Already enrolled';\n\n      if (alreadyEnrolled) {\n        this.props.router.push('/settings/account/security/');\n        addErrorMessage(t('Already enrolled'));\n      }\n\n      // Allow the endpoint to fail if the user is already enrolled\n      return alreadyEnrolled;\n    };\n\n    return [['authenticator', this.enrollEndpoint, {}, {allowError: errorHandler}]];\n  }\n\n  componentDidMount() {\n    this.pendingInvitation = getPendingInvite();\n  }\n\n  get authenticatorName() {\n    const {authenticator} = this.state;\n    return (authenticator && authenticator.name) || 'Authenticator';\n  }\n\n  handleFieldChange = (name, value) => {\n    // This should not be used for rendering, that's why it's not in state\n    this._form[name] = value;\n  };\n\n  // This resets state so that user can re-enter their phone number again\n  handleSmsReset = () => this.setState({hasSentCode: false}, this.remountComponent);\n\n  // Handles SMS authenticators\n  handleSmsSubmit = async () => {\n    const {authenticator, hasSentCode} = this.state;\n\n    // Don't submit if empty\n    if (!this._form.phone) {\n      return;\n    }\n\n    const data = {\n      phone: this._form.phone,\n      // Make sure `otp` is undefined if we are submitting OTP verification\n      // Otherwise API will think that we are on verification step (e.g. after submitting phone)\n      otp: hasSentCode ? this._form.otp || '' : undefined,\n      secret: authenticator.secret,\n    };\n\n    // Only show loading when submitting OTP\n    this.setState({loading: hasSentCode});\n\n    if (!hasSentCode) {\n      addMessage(t('Sending code to %s...', data.phone));\n    }\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (error) {\n      this._form = {};\n      const isSmsInterface = authenticator.id === 'sms';\n\n      this.setState({\n        hasSentCode: !isSmsInterface,\n      });\n\n      // Re-mount because we want to fetch a fresh secret\n      this.remountComponent();\n\n      addErrorMessage(\n        this.state.hasSentCode ? t('Incorrect OTP') : t('Error sending SMS')\n      );\n\n      return;\n    }\n\n    if (!hasSentCode) {\n      // Just successfully finished sending OTP to user\n      this.setState({hasSentCode: true, loading: false});\n      addMessage(t('Sent code to %s', data.phone));\n    } else {\n      // OTP was accepted and SMS was added as a 2fa method\n      this.handleEnrollSuccess();\n    }\n  };\n\n  // Handle u2f device tap\n  handleU2fTap = async tapData => {\n    const data = {...tapData, ...this._form};\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Currently only TOTP uses this\n  handleTotpSubmit = async dataModel => {\n    const data = {\n      ...this._form,\n      ...(dataModel || {}),\n      secret: this.state.authenticator.secret,\n    };\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {method: 'POST', data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Handler when we successfully add a 2fa device\n  async handleEnrollSuccess() {\n    // If we're pending approval of an invite, the user will have just joined\n    // the organization when completing 2fa enrollment. We should reload the\n    // organization context in that case to assign them to the org.\n    if (this.pendingInvitation) {\n      await fetchOrganizationByMember(this.pendingInvitation.memberId, {\n        addOrg: true,\n        fetchOrgDetails: true,\n      });\n    }\n\n    this.props.router.push('/settings/account/security/');\n    openRecoveryOptions({authenticatorName: this.authenticatorName});\n  }\n\n  // Handler when we failed to add a 2fa device\n  handleEnrollError() {\n    this.setState({loading: false});\n    addErrorMessage(t('Error adding %s authenticator', this.authenticatorName));\n  }\n\n  // Removes an authenticator\n  handleRemove = async () => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // `authenticator.authId` is NOT the same as `props.params.authId` This is\n    // for backwards compatability with API endpoint\n    try {\n      await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticator'));\n      return;\n    }\n\n    this.props.router.push('/settings/account/security/');\n    addSuccessMessage(t('Authenticator has been removed'));\n  };\n\n  renderBody() {\n    const {authenticator, hasSentCode} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const fields = getFields({\n      authenticator,\n      hasSentCode,\n      onSmsReset: this.handleSmsReset,\n      onSmsSubmit: this.handleSmsSubmit,\n      onU2fTap: this.handleU2fTap,\n    });\n\n    // Attempt to extract `defaultValue` from server generated form fields\n    const defaultValues = fields\n      ? fields\n          .filter(field => typeof field.defaultValue !== 'undefined')\n          .map(field => [field.name, field.defaultValue])\n          .reduce((acc, [name, value]) => {\n            acc[name] = value;\n            return acc;\n          }, {})\n      : {};\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={\n            <React.Fragment>\n              <span>{authenticator.name}</span>\n              <CircleIndicator css={{marginLeft: 6}} enabled={authenticator.isEnrolled} />\n            </React.Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <RemoveConfirm onConfirm={this.handleRemove}>\n                <Button priority=\"danger\">{authenticator.removeButton}</Button>\n              </RemoveConfirm>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        {authenticator.form && !!authenticator.form.length && (\n          <Form\n            apiMethod=\"POST\"\n            onFieldChange={this.handleFieldChange}\n            apiEndpoint={this.authenticatorEndpoint}\n            onSubmit={this.handleTotpSubmit}\n            initialData={{...defaultValues, ...authenticator}}\n            hideFooter\n          >\n            <JsonForm forms={[{title: 'Configuration', fields}]} />\n          </Form>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(AccountSecurityEnroll);\n"],"sourceRoot":""}