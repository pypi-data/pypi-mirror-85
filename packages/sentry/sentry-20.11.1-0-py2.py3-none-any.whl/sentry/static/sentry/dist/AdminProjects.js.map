{"version":3,"sources":["webpack:///./app/components/resultGrid.tsx","webpack:///./app/views/admin/adminProjects.jsx"],"names":["Filter","getSelector","title","getCurrentLabel","getDefaultItem","props","options","map","value","label","filterQuery","queryKey","query","location","key","isActive","to","pathname","path","selected","this","find","item","name","cursor","className","length","React","Component","SortBy","getCurrentSortLabel","sortBy","getSortBySelector","ResultGrid","state","defaultState","fetchData","queryParams","setState","defaultSort","filters","pageLinks","loading","error","defaultParams","api","request","endpoint","method","data","success","_","jqXHR","rows","getResponseHeader","e","targetQueryParams","preventDefault","browserHistory","push","evt","target","colSpan","columns","row","keyForRow","columnsForRow","hasSearch","onSubmit","onSearch","type","placeholder","style","width","autoComplete","onChange","onQueryChange","size","sortOptions","Object","keys","filterKey","renderLoading","renderError","renderNoResults","renderResults","hasPagination","defaultProps","id","per_page","withApi","prettyDate","x","moment","format","AdminProjects","getRow","href","organization","slug","textAlign","status","dateCreated","t"],"mappings":"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","file":"AdminProjects.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport withApi from 'app/utils/withApi';\nimport DropdownLink from 'app/components/dropdownLink';\nimport MenuItem from 'app/components/menuItem';\nimport Pagination from 'app/components/pagination';\nimport {IconSearch} from 'app/icons';\nimport {Client, RequestOptions} from 'app/api';\n\ntype Option = [value: string, label: string];\n\ntype FilterProps = {\n  name: string;\n  queryKey: string;\n  options: Option[];\n  path: string;\n  value: string;\n  location: Location;\n};\n\nclass Filter extends React.Component<FilterProps> {\n  getCurrentLabel() {\n    const selected = this.props.options.find(\n      item => item[0] === (this.props.value ?? '')\n    );\n    if (selected) {\n      return this.props.name + ': ' + selected[1];\n    }\n    return this.props.name + ': ' + 'Any';\n  }\n\n  getDefaultItem() {\n    const query = {...this.props.location.query, cursor: ''};\n    delete query[this.props.queryKey];\n\n    return (\n      <MenuItem\n        key=\"\"\n        isActive={this.props.value === '' || !this.props.value}\n        to={{pathname: this.props.path, query}}\n      >\n        Any\n      </MenuItem>\n    );\n  }\n\n  getSelector = () => (\n    <DropdownLink title={this.getCurrentLabel()}>\n      {this.getDefaultItem()}\n      {this.props.options.map(([value, label]) => {\n        const filterQuery = {\n          [this.props.queryKey]: value,\n          cursor: '',\n        };\n\n        const query = {...this.props.location.query, ...filterQuery};\n        return (\n          <MenuItem\n            key={value}\n            isActive={this.props.value === value}\n            to={{pathname: this.props.path, query}}\n          >\n            {label}\n          </MenuItem>\n        );\n      })}\n    </DropdownLink>\n  );\n\n  render() {\n    return (\n      <div className=\"filter-options\">\n        {this.props.options.length === 1 ? (\n          <strong>{this.getCurrentLabel()}</strong>\n        ) : (\n          this.getSelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype SortByProps = {\n  options: Option[];\n  path: string;\n  location: Location;\n  value: string;\n};\n\nclass SortBy extends React.Component<SortByProps> {\n  static propTypes = {\n    options: PropTypes.array.isRequired,\n    path: PropTypes.string.isRequired,\n    location: PropTypes.object,\n    value: PropTypes.any,\n  };\n\n  getCurrentSortLabel() {\n    return this.props.options.find(([value]) => value === this.props.value)?.[1];\n  }\n\n  getSortBySelector() {\n    return (\n      <DropdownLink title={this.getCurrentSortLabel()} className=\"sorted-by\">\n        {this.props.options.map(([value, label]) => {\n          const query = {...this.props.location.query, sortBy: value, cursor: ''};\n          return (\n            <MenuItem\n              isActive={this.props.value === value}\n              key={value}\n              to={{pathname: this.props.path, query}}\n            >\n              {label}\n            </MenuItem>\n          );\n        })}\n      </DropdownLink>\n    );\n  }\n\n  render() {\n    if (this.props.options.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className=\"sort-options\">\n        Showing results sorted by\n        {this.props.options.length === 1 ? (\n          <strong className=\"sorted-by\">{this.getCurrentSortLabel()}</strong>\n        ) : (\n          this.getSortBySelector()\n        )}\n      </div>\n    );\n  }\n}\n\ntype FilterConfig = {\n  name: string;\n  options: Option[];\n};\n\n// XXX(ts): Using Partial here on the DefaultProps is not really correct, since\n// defaultProps guarantees they'll be set. But because this component is\n// wrapped with a HoC, we lose the defaultProps, and users of the component\ntype Props = {\n  api: Client;\n  location: Location;\n} & Partial<DefaultProps>;\n\ntype DefaultProps = {\n  columns: React.ReactNode[];\n  columnsForRow: (row: any) => React.ReactNode[];\n  defaultSort: string;\n  defaultParams: Record<string, any>;\n  filters: Record<string, FilterConfig>;\n  endpoint: string;\n  hasPagination: boolean;\n  hasSearch: boolean;\n  keyForRow: (row: any) => string;\n  method: RequestOptions['method'];\n  path: string;\n  sortOptions: Option[];\n};\n\ntype State = {\n  rows: any[];\n  loading: boolean;\n  error: string | boolean;\n  pageLinks: null | string;\n  query: string;\n  sortBy: string;\n  filters: Record<string, string>;\n};\n\nclass ResultGrid extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    path: '',\n    endpoint: '',\n    method: 'GET',\n    columns: [],\n    sortOptions: [],\n    filters: {},\n    defaultSort: '',\n    keyForRow: row => row.id,\n    columnsForRow: () => [],\n    defaultParams: {\n      per_page: 50,\n    },\n    hasPagination: true,\n    hasSearch: false,\n  };\n\n  state: State = this.defaultState;\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps() {\n    const queryParams = this.query;\n    this.setState(\n      {\n        query: queryParams.query ?? '',\n        sortBy: queryParams.sortBy ?? this.props.defaultSort,\n        filters: {...queryParams},\n        pageLinks: null,\n        loading: true,\n        error: false,\n      },\n      this.fetchData\n    );\n  }\n\n  get defaultState() {\n    const queryParams = this.query;\n\n    return {\n      rows: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n      query: queryParams.query ?? '',\n      sortBy: queryParams.sortBy ?? this.props.defaultSort,\n      filters: {...queryParams},\n    } as State;\n  }\n\n  get query() {\n    return ((this.props.location ?? {}).query ?? {}) as {[k: string]: string};\n  }\n\n  remountComponent() {\n    this.setState(this.defaultState, this.fetchData);\n  }\n\n  refresh() {\n    this.setState({loading: true}, this.fetchData);\n  }\n\n  fetchData() {\n    // TODO(dcramer): this should explicitly allow filters/sortBy/cursor/perPage\n    const queryParams = {\n      ...this.props.defaultParams,\n      sortBy: this.state.sortBy,\n      ...this.query,\n    };\n\n    this.props.api.request(this.props.endpoint!, {\n      method: this.props.method,\n      data: queryParams,\n      success: (data, _, jqXHR) => {\n        this.setState({\n          loading: false,\n          error: false,\n          rows: data,\n          pageLinks: jqXHR?.getResponseHeader('Link') ?? null,\n        });\n      },\n      error: () => {\n        this.setState({\n          loading: false,\n          error: true,\n        });\n      },\n    });\n  }\n\n  onSearch(e: React.FormEvent<HTMLFormElement>) {\n    const location = this.props.location ?? {};\n    const {query} = this.state;\n    const targetQueryParams = {...(location.query ?? {}), query, cursor: ''};\n\n    e.preventDefault();\n\n    browserHistory.push({\n      pathname: this.props.path,\n      query: targetQueryParams,\n    });\n  }\n\n  onQueryChange(evt: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({query: evt.target.value});\n  }\n\n  renderLoading() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"loading\">\n            <div className=\"loading-indicator\" />\n            <div className=\"loading-message\">Hold on to your butts!</div>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderError() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>\n          <div className=\"alert-block alert-error\">Something bad happened :(</div>\n        </td>\n      </tr>\n    );\n  }\n\n  renderNoResults() {\n    return (\n      <tr>\n        <td colSpan={this.props.columns!.length}>No results found.</td>\n      </tr>\n    );\n  }\n\n  renderResults() {\n    return this.state.rows.map(row => (\n      <tr key={this.props.keyForRow?.(row)}>{this.props.columnsForRow?.(row)}</tr>\n    ));\n  }\n\n  render() {\n    const {filters} = this.props;\n    return (\n      <div className=\"result-grid\">\n        <div className=\"table-options\">\n          {this.props.hasSearch && (\n            <div className=\"result-grid-search\">\n              <form onSubmit={this.onSearch}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control input-search\"\n                    placeholder=\"search\"\n                    style={{width: 300}}\n                    name=\"query\"\n                    autoComplete=\"off\"\n                    value={this.state.query}\n                    onChange={this.onQueryChange}\n                  />\n                  <button type=\"submit\" className=\"btn btn-sm btn-primary\">\n                    <IconSearch size=\"xs\" />\n                  </button>\n                </div>\n              </form>\n            </div>\n          )}\n          <SortBy\n            options={this.props.sortOptions ?? []}\n            value={this.state.sortBy}\n            path={this.props.path ?? ''}\n            location={this.props.location}\n          />\n          {Object.keys(filters ?? {}).map(filterKey => (\n            <Filter\n              key={filterKey}\n              queryKey={filterKey}\n              value={this.state.filters[filterKey]}\n              path={this.props.path ?? ''}\n              location={this.props.location}\n              {...(filters?.[filterKey] as FilterConfig)}\n            />\n          ))}\n        </div>\n\n        <table className=\"table table-grid\">\n          <thead>\n            <tr>{this.props.columns}</tr>\n          </thead>\n          <tbody>\n            {this.state.loading\n              ? this.renderLoading()\n              : this.state.error\n              ? this.renderError()\n              : this.state.rows.length === 0\n              ? this.renderNoResults()\n              : this.renderResults()}\n          </tbody>\n        </table>\n        {this.props.hasPagination && this.state.pageLinks && (\n          <Pagination pageLinks={this.state.pageLinks} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport {ResultGrid};\n\nexport default withApi(ResultGrid);\n","/* eslint-disable react/jsx-key */\nimport React from 'react';\nimport moment from 'moment';\n\nimport ResultGrid from 'app/components/resultGrid';\nimport {t} from 'app/locale';\n\nexport const prettyDate = function (x) {\n  return moment(x).format('ll');\n};\n\nclass AdminProjects extends React.Component {\n  getRow = row => [\n    <td>\n      <strong>\n        <a href={`/${row.organization.slug}/${row.slug}/`}>{row.name}</a>\n      </strong>\n      <br />\n      <small>{row.organization.name}</small>\n    </td>,\n    <td style={{textAlign: 'center'}}>{row.status}</td>,\n    <td style={{textAlign: 'right'}}>{prettyDate(row.dateCreated)}</td>,\n  ];\n\n  render() {\n    const columns = [\n      <th>Project</th>,\n      <th style={{width: 150, textAlign: 'center'}}>Status</th>,\n      <th style={{width: 200, textAlign: 'right'}}>Created</th>,\n    ];\n\n    return (\n      <div>\n        <h3>{t('Projects')}</h3>\n        <ResultGrid\n          path=\"/manage/projects/\"\n          endpoint=\"/projects/?show=all\"\n          method=\"GET\"\n          columns={columns}\n          columnsForRow={this.getRow}\n          hasSearch\n          filters={{\n            status: {\n              name: 'Status',\n              options: [\n                ['active', 'Active'],\n                ['deleted', 'Deleted'],\n              ],\n            },\n          }}\n          sortOptions={[['date', 'Date Created']]}\n          defaultSort=\"date\"\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AdminProjects;\n"],"sourceRoot":""}