{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/data/forms/projectIssueGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/upgradeGrouping.tsx","webpack:///./app/views/settings/projectIssueGrouping/utils.tsx","webpack:///./app/views/settings/projectIssueGrouping/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","routeTitleGen","routeName","orgSlug","withSentry","tmpl","FormPanel","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","id","sanitizeQuerySelector","undefined","map","field","defaultValue","fieldWithoutDefaultValue","disabledReason","key","name","highlighted","JsonForm","state","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","forms","features","location","formGroup","i","Fragment","renderForm","contextTypes","PropTypes","object","route","fingerprintingRules","type","label","t","hideLabel","placeholder","multiline","monospace","autosize","inline","maxRows","saveOnBlur","saveMessageAlertType","saveMessage","formatMessageValue","help","RuleDescription","tct","pattern","docs","href","RuleExample","groupingEnhancements","validate","groupingConfig","selectionInfoFunction","args","groupingConfigs","value","selection","find","changelog","Changelog","ChangelogTitle","version","dangerouslySetInnerHTML","__html","marked","choices","hidden","toString","isHidden","has","groupingEnhancementsBase","groupingEnhancementBases","theme","innerBorder","backgroundSecondary","fontSizeMedium","borderRadius","UpgradeGrouping","organization","projectId","project","onUpgrade","api","hasAccess","includes","byId","updateNotes","riskLevel","latestGroupingConfig","latestEnhancementsBase","forEach","cfg","latest","risk","next","base","Math","max","getGroupingChanges","riskNote","alertType","getGroupingRisk","noUpdates","newData","handleUpgrade","a","addLoadingMessage","requestPromise","slug","method","data","response","clearIndicators","ProjectActions","updateSuccess","handleXhrErrorResponse","linebreak","onConfirm","priority","confirmText","message","ProjectDebugSymbols","handleSubmit","params","orgId","endpoint","Set","jsonFormProps","link","allowUndo","initialData","apiMethod","apiEndpoint","onSubmitSuccess","fetchData"],"mappings":"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","file":"ProjectIssueGrouping.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true\n): string {\n  const tmpl = `${routeName} - ${orgSlug}`;\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport {Scope} from 'app/types';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import {Box} from 'reflexbox';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport scrollToElement from 'scroll-to-element';\nimport {Location} from 'history';\nimport * as Sentry from '@sentry/react';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport {Field, FieldObject, JsonFormObject} from './type';\nimport FieldFromConfig from './fieldFromConfig';\nimport FormPanel from './formPanel';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static propTypes = {\n    /**\n     * Fields that are grouped by \"section\"\n     */\n    forms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        fields: PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n        ),\n      })\n    ),\n\n    /**\n     * If `forms` is not defined, `title` + `fields` must be required.\n     * Allows more fine grain control of title/fields\n     */\n    fields: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n    ),\n    /**\n     * Panel title if `forms` is not defined\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    access: PropTypes.object,\n    features: PropTypes.object,\n    renderFooter: PropTypes.func,\n    /**\n     * Renders inside of PanelBody\n     */\n    renderHeader: PropTypes.func,\n    /**\n     * Disables the entire form\n     */\n    disabled: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {t, tct} from 'app/locale';\nimport marked from 'app/utils/marked';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {GroupingConfigItem} from 'app/components/events/groupingInfo';\nimport {Field} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/projects/:projectId/issue-grouping/';\n\nexport const fields: Record<string, Field> = {\n  fingerprintingRules: {\n    name: 'fingerprintingRules',\n    type: 'string',\n    label: t('Fingerprint Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'error.type:MyException -> fingerprint-value\\nstack.function:some_panic_function -> fingerprint-value'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('Changing fingerprint rules will apply to future events only.'),\n    formatMessageValue: false,\n    help: () => (\n      <React.Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to modify the fingerprint rules on the server with custom rules.\n        Rules follow the pattern [pattern]. To learn more about fingerprint rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob -&gt; fingerprint, values</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=%2Fdata-management%2Fevent-grouping%2Fserver-side-fingerprinting%2F\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# force all errors of the same type to have the same fingerprint\nerror.type:DatabaseUnavailable -> system-down\n# force all memory allocation errors to be grouped together\nstack.function:malloc -> memory-allocation-error`}\n        </RuleExample>\n      </React.Fragment>\n    ),\n    visible: true,\n  },\n  groupingEnhancements: {\n    name: 'groupingEnhancements',\n    type: 'string',\n    label: t('Stack Trace Rules'),\n    hideLabel: true,\n    placeholder: t(\n      'stack.function:raise_an_exception ^-group\\nstack.function:namespace::* +app'\n    ),\n    multiline: true,\n    monospace: true,\n    autosize: true,\n    inline: false,\n    maxRows: 20,\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('Changing stack trace rules will apply to future events only.'),\n    formatMessageValue: false,\n    help: () => (\n      <React.Fragment>\n        <RuleDescription>\n          {tct(\n            `This can be used to enhance the grouping algorithm with custom rules.\n        Rules follow the pattern [pattern]. To learn more about stack trace rules, [docs:read the docs].`,\n            {\n              pattern: <code>matcher:glob [^v]?[+-]flag</code>,\n              docs: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=%2Fdata-management%2Fevent-grouping%2Fgrouping-enhancements%2F\" />\n              ),\n            }\n          )}\n        </RuleDescription>\n        <RuleExample>\n          {`# remove all frames above a certain function from grouping\nstack.function:panic_handler ^-group\n# mark all functions following a prefix in-app\nstack.function:mylibrary_* +app`}\n        </RuleExample>\n      </React.Fragment>\n    ),\n    validate: () => [],\n    visible: true,\n  },\n  groupingConfig: {\n    name: 'groupingConfig',\n    type: 'array',\n    label: t('Grouping Config'),\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('Changing grouping config will apply to future events only.'),\n    selectionInfoFunction: args => {\n      const {groupingConfigs, value} = args;\n      const selection = groupingConfigs.find(({id}) => id === value);\n      const changelog = selection?.changelog || '';\n      if (!changelog) {\n        return null;\n      }\n      return (\n        <Changelog>\n          <ChangelogTitle>\n            {tct('New in version [version]', {version: selection.id})}:\n          </ChangelogTitle>\n          <div dangerouslySetInnerHTML={{__html: marked(changelog)}} />\n        </Changelog>\n      );\n    },\n    choices: ({groupingConfigs}) =>\n      groupingConfigs.map(({id, hidden}) => [\n        id.toString(),\n        <GroupingConfigItem key={id} isHidden={hidden}>\n          {id}\n        </GroupingConfigItem>,\n      ]),\n    help: t('Sets the grouping algorithm to be used for new events.'),\n    visible: ({features}) => features.has('set-grouping-config'),\n  },\n  groupingEnhancementsBase: {\n    name: 'groupingEnhancementsBase',\n    type: 'array',\n    label: t('Stack Trace Rules Base'),\n    saveOnBlur: false,\n    saveMessageAlertType: 'info',\n    saveMessage: t('Changing base will apply to future events only.'),\n    selectionInfoFunction: args => {\n      const {groupingEnhancementBases, value} = args;\n      const selection = groupingEnhancementBases.find(({id}) => id === value);\n      const changelog = selection?.changelog || '';\n      if (!changelog) {\n        return null;\n      }\n      return (\n        <Changelog>\n          <ChangelogTitle>\n            {tct('New in version [version]', {version: selection.id})}:\n          </ChangelogTitle>\n          <div dangerouslySetInnerHTML={{__html: marked(changelog)}} />\n        </Changelog>\n      );\n    },\n    choices: ({groupingEnhancementBases}) =>\n      groupingEnhancementBases.map(({id}) => [\n        id.toString(),\n        <GroupingConfigItem key={id}>{id}</GroupingConfigItem>,\n      ]),\n    help: t('The built-in base version of stack trace rules.'),\n    visible: ({features}) => features.has('set-grouping-config'),\n  },\n};\n\nconst RuleDescription = styled('div')`\n  margin-bottom: ${space(1)};\n  margin-top: -${space(1)};\n  margin-right: 36px;\n`;\n\nconst RuleExample = styled('pre')`\n  margin-bottom: ${space(1)};\n  margin-right: 36px;\n`;\n\nconst Changelog = styled('div')`\n  position: relative;\n  top: -1px;\n  margin-bottom: -1px;\n  padding: ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.innerBorder};\n  background: ${p => p.theme.backgroundSecondary};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  &:last-child {\n    border: 0;\n    border-bottom-left-radius: ${p => p.theme.borderRadius};\n    border-bottom-right-radius: ${p => p.theme.borderRadius};\n  }\n`;\n\nconst ChangelogTitle = styled('h3')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(0.75)} !important;\n`;\n","import React from 'react';\n\nimport Alert from 'app/components/alert';\nimport {t, tct} from 'app/locale';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport {\n  EventGroupingConfig,\n  GroupingEnhancementBase,\n  Organization,\n  Project,\n} from 'app/types';\nimport ProjectActions from 'app/actions/projectActions';\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport marked from 'app/utils/marked';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport Field from 'app/views/settings/components/forms/field';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';\nimport {Client} from 'app/api';\n\nimport {getGroupingChanges, getGroupingRisk} from './utils';\n\ntype Props = {\n  groupingConfigs: EventGroupingConfig[];\n  groupingEnhancementBases: GroupingEnhancementBase[];\n  organization: Organization;\n  projectId: string;\n  project: Project;\n  onUpgrade: () => void;\n  api: Client;\n};\n\nfunction UpgradeGrouping({\n  groupingConfigs,\n  groupingEnhancementBases,\n  organization,\n  projectId,\n  project,\n  onUpgrade,\n  api,\n}: Props) {\n  const hasAccess = organization.access.includes('project:write');\n  const {\n    updateNotes,\n    riskLevel,\n    latestGroupingConfig,\n    latestEnhancementsBase,\n  } = getGroupingChanges(project, groupingConfigs, groupingEnhancementBases);\n  const {riskNote, alertType} = getGroupingRisk(riskLevel);\n  const noUpdates = !latestGroupingConfig && !latestEnhancementsBase;\n\n  const newData: Record<string, string> = {};\n  if (latestGroupingConfig) {\n    newData.groupingConfig = latestGroupingConfig.id;\n  }\n  if (latestEnhancementsBase) {\n    newData.groupingEnhancementsBase = latestEnhancementsBase.id;\n  }\n\n  const handleUpgrade = async () => {\n    addLoadingMessage(t('Changing grouping\\u2026'));\n    try {\n      const response = await api.requestPromise(\n        `/projects/${organization.slug}/${projectId}/`,\n        {\n          method: 'PUT',\n          data: newData,\n        }\n      );\n      clearIndicators();\n      ProjectActions.updateSuccess(response);\n      onUpgrade();\n    } catch {\n      handleXhrErrorResponse(t('Unable to upgrade config'));\n    }\n  };\n\n  if (!groupingConfigs || !groupingEnhancementBases) {\n    return null;\n  }\n\n  function getModalMessage() {\n    return (\n      <React.Fragment>\n        <TextBlock>\n          <strong>{t('Upgrade Grouping Strategy')}</strong>\n        </TextBlock>\n        <TextBlock>\n          {t(\n            'You can upgrade the grouping strategy to the latest but this is an irreversible operation.'\n          )}\n        </TextBlock>\n        <TextBlock>\n          <strong>{t('New Behavior')}</strong>\n          <div dangerouslySetInnerHTML={{__html: marked(updateNotes)}} />\n        </TextBlock>\n        <TextBlock>\n          <Alert type={alertType}>{riskNote}</Alert>\n        </TextBlock>\n      </React.Fragment>\n    );\n  }\n\n  function getButtonTitle() {\n    if (!hasAccess) {\n      return t('You do not have sufficient permissions to do this');\n    }\n    if (noUpdates) {\n      return t('You are already on the latest version');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <Panel id=\"upgrade-grouping\">\n      <PanelHeader>{t('Upgrade Grouping')}</PanelHeader>\n      <PanelBody>\n        <Field\n          label={t('Upgrade Grouping Strategy')}\n          help={tct(\n            'If the project uses an old grouping strategy an update is possible.[linebreak]Doing so will cause new events to group differently.',\n            {\n              linebreak: <br />,\n            }\n          )}\n          disabled\n        >\n          <Confirm\n            disabled={noUpdates}\n            onConfirm={handleUpgrade}\n            priority={riskLevel >= 2 ? 'danger' : 'primary'}\n            confirmText={t('Upgrade')}\n            message={getModalMessage()}\n          >\n            <div>\n              <Button\n                disabled={!hasAccess || noUpdates}\n                title={getButtonTitle()}\n                type=\"button\"\n                priority={riskLevel >= 2 ? 'danger' : 'primary'}\n              >\n                {t('Upgrade Grouping Strategy')}\n              </Button>\n            </div>\n          </Confirm>\n        </Field>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default UpgradeGrouping;\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport Alert from 'app/components/alert';\nimport {EventGroupingConfig, GroupingEnhancementBase, Project} from 'app/types';\n\nexport function getGroupingChanges(\n  project: Project,\n  groupingConfigs: EventGroupingConfig[],\n  groupingEnhancementBases: GroupingEnhancementBase[]\n): {\n  updateNotes: string;\n  riskLevel: number;\n  latestGroupingConfig: EventGroupingConfig | null;\n  latestEnhancementsBase: GroupingEnhancementBase | null;\n} {\n  const byId: Record<string, EventGroupingConfig> = {};\n  let updateNotes: string = '';\n  let riskLevel: number = 0;\n  let latestGroupingConfig: EventGroupingConfig | null = null;\n  let latestEnhancementsBase: GroupingEnhancementBase | null = null;\n\n  groupingConfigs.forEach(cfg => {\n    byId[cfg.id] = cfg;\n    if (cfg.latest && project.groupingConfig !== cfg.id) {\n      updateNotes = cfg.changelog;\n      latestGroupingConfig = cfg;\n      riskLevel = cfg.risk;\n    }\n  });\n\n  if (latestGroupingConfig) {\n    let next = (latestGroupingConfig as EventGroupingConfig).base ?? '';\n    while (next !== project.groupingConfig) {\n      const cfg = byId[next];\n      if (!cfg) {\n        break;\n      }\n      riskLevel = Math.max(riskLevel, cfg.risk);\n      updateNotes = cfg.changelog + '\\n' + updateNotes;\n      next = cfg.base ?? '';\n    }\n  }\n\n  groupingEnhancementBases.forEach(base => {\n    if (base.latest && project.groupingEnhancementsBase !== base.id) {\n      updateNotes += '\\n\\n' + base.changelog;\n      latestEnhancementsBase = base;\n    }\n  });\n\n  return {updateNotes, riskLevel, latestGroupingConfig, latestEnhancementsBase};\n}\n\nexport function getGroupingRisk(\n  riskLevel: number\n): {\n  riskNote: React.ReactNode;\n  alertType: React.ComponentProps<typeof Alert>['type'];\n} {\n  switch (riskLevel) {\n    case 0:\n      return {\n        riskNote: t('This upgrade has the chance to create some new issues.'),\n        alertType: 'info',\n      };\n    case 1:\n      return {\n        riskNote: t('This upgrade will create some new issues.'),\n        alertType: 'warning',\n      };\n    case 2:\n      return {\n        riskNote: (\n          <strong>\n            {t(\n              'The new grouping strategy is incompatible with the current and will create entirely new issues.'\n            )}\n          </strong>\n        ),\n        alertType: 'error',\n      };\n    default:\n      return {riskNote: undefined, alertType: undefined};\n  }\n}\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {fields} from 'app/data/forms/projectIssueGrouping';\nimport {t, tct} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport {\n  EventGroupingConfig,\n  GroupingEnhancementBase,\n  Organization,\n  Project,\n} from 'app/types';\nimport routeTitleGen from 'app/utils/routeTitle';\nimport ProjectActions from 'app/actions/projectActions';\nimport Feature from 'app/components/acl/feature';\nimport ExternalLink from 'app/components/links/externalLink';\n\nimport UpgradeGrouping from './upgradeGrouping';\n\ntype Props = RouteComponentProps<{orgId: string; projectId: string}, {}> & {\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  groupingConfigs: EventGroupingConfig[] | null;\n  groupingEnhancementBases: GroupingEnhancementBase[] | null;\n} & AsyncView['state'];\n\nclass ProjectDebugSymbols extends AsyncView<Props, State> {\n  getTitle() {\n    const {projectId} = this.props.params;\n\n    return routeTitleGen(t('Issue Grouping'), projectId, false);\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      groupingConfigs: [],\n      groupingEnhancementBases: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [\n      ['groupingConfigs', '/grouping-configs/'],\n      ['groupingEnhancementBases', '/grouping-enhancements/'],\n    ];\n  }\n\n  handleSubmit = (response: Project) => {\n    // This will update our project context\n    ProjectActions.updateSuccess(response);\n  };\n\n  renderBody() {\n    const {groupingConfigs, groupingEnhancementBases} = this.state;\n    const {organization, project, params} = this.props;\n    const {orgId, projectId} = params;\n    const endpoint = `/projects/${orgId}/${projectId}/`;\n    const access = new Set(organization.access);\n    const jsonFormProps = {\n      additionalFieldProps: {\n        organization,\n        groupingConfigs,\n        groupingEnhancementBases,\n      },\n      features: new Set(organization.features),\n      access,\n      disabled: !access.has('project:write'),\n    };\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader title={t('Issue Grouping')} />\n\n        <TextBlock>\n          {tct(\n            `All events have a fingerprint. Events with the same fingerprint are grouped together into an issue. To learn more about issue grouping, [link: read the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=%2Fdata-management%2Fevent-grouping%2F\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <Form\n          saveOnBlur\n          allowUndo\n          initialData={project}\n          apiMethod=\"PUT\"\n          apiEndpoint={endpoint}\n          onSubmitSuccess={this.handleSubmit}\n        >\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Fingerprint Rules')}\n            fields={[fields.fingerprintingRules]}\n          />\n\n          <JsonForm\n            {...jsonFormProps}\n            title={t('Stack Trace Rules')}\n            fields={[fields.groupingEnhancements]}\n          />\n\n          <Feature features={['set-grouping-config']} organization={organization}>\n            <JsonForm\n              {...jsonFormProps}\n              title={t('Change defaults')}\n              fields={[fields.groupingConfig, fields.groupingEnhancementsBase]}\n            />\n          </Feature>\n\n          <UpgradeGrouping\n            groupingConfigs={groupingConfigs ?? []}\n            groupingEnhancementBases={groupingEnhancementBases ?? []}\n            organization={organization}\n            projectId={params.projectId}\n            project={project}\n            api={this.api}\n            onUpgrade={this.fetchData}\n          />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProjectDebugSymbols;\n"],"sourceRoot":""}