{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/settings/projectSecurityHeaders/reportUri.jsx","webpack:///./app/components/previewFeature.tsx","webpack:///./app/views/settings/projectSecurityHeaders/hpkp.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","routeTitleGen","routeName","orgSlug","withSentry","tmpl","getSecurityDsn","keyList","endpoint","length","dsn","security","getDynamicText","value","fixed","ReportUri","params","orgId","projectId","type","tct","link","to","inline","flexibleControlStateSize","PreviewFeature","size","t","ProjectHpkpReports","state","withPadding","href","getInstructions","getReportOnlyInstructions"],"mappings":"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","file":"ProjectHpkpReports.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true\n): string {\n  const tmpl = `${routeName} - ${orgSlug}`;\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router';\n\nimport {tct} from 'app/locale';\nimport Field from 'app/views/settings/components/forms/field';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'app/components/panels';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\n\nconst DEFAULT_ENDPOINT = 'https://sentry.example.com/api/security-report/';\n\nexport const getSecurityDsn = keyList => {\n  const endpoint = keyList.length ? keyList[0].dsn.security : DEFAULT_ENDPOINT;\n  return getDynamicText({\n    value: endpoint,\n    fixed: DEFAULT_ENDPOINT,\n  });\n};\n\nexport default class ReportUri extends React.Component {\n  static propTypes = {\n    keyList: PropTypes.array.isRequired,\n  };\n\n  render() {\n    const {orgId, projectId} = this.props.params;\n    return (\n      <Panel>\n        <PanelHeader>{'Report URI'}</PanelHeader>\n        <PanelBody>\n          <PanelAlert type=\"info\">\n            {tct(\n              \"We've automatically pulled these credentials from your available [link:Client Keys]\",\n              {\n                link: <Link to={`/settings/${orgId}/projects/${projectId}/keys/`} />,\n              }\n            )}\n          </PanelAlert>\n          <Field inline={false} flexibleControlStateSize>\n            <TextCopyInput>{getSecurityDsn(this.props.keyList)}</TextCopyInput>\n          </Field>\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {t} from 'app/locale';\nimport {IconLab} from 'app/icons';\nimport Alert, {Props as AlertProps} from 'app/components/alert';\n\ntype Props = {\n  type?: AlertProps['type'];\n};\n\nconst PreviewFeature = ({type = 'info'}: Props) => (\n  <Alert type={type} icon={<IconLab size=\"sm\" />}>\n    {t(\n      'This feature is a preview and may change in the future. Thanks for being an early adopter!'\n    )}\n  </Alert>\n);\n\nPreviewFeature.propTypes = {\n  type: PropTypes.oneOf(['success', 'error', 'warning', 'info']),\n};\n\nexport default PreviewFeature;\n","import React from 'react';\n\nimport {t, tct} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport ReportUri, {\n  getSecurityDsn,\n} from 'app/views/settings/projectSecurityHeaders/reportUri';\nimport PreviewFeature from 'app/components/previewFeature';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport routeTitleGen from 'app/utils/routeTitle';\n\nexport default class ProjectHpkpReports extends AsyncView {\n  getEndpoints() {\n    const {orgId, projectId} = this.props.params;\n    return [\n      ['keyList', `/projects/${orgId}/${projectId}/keys/`],\n      ['project', `/projects/${orgId}/${projectId}/`],\n    ];\n  }\n\n  getTitle() {\n    const {projectId} = this.props.params;\n    return routeTitleGen(t('HTTP Public Key Pinning (HPKP)'), projectId, false);\n  }\n\n  getInstructions() {\n    return (\n      'def middleware(request, response):\\n' +\n      \"    response['Public-Key-Pins'] = \\\\\\n\" +\n      '        \\'pin-sha256=\"cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2+soZS7sWs=\"; \\' \\\\\\n' +\n      '        \\'pin-sha256=\"M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE=\"; \\' \\\\\\n' +\n      \"        'max-age=5184000; includeSubDomains; ' \\\\\\n\" +\n      `        \\'report-uri=\"${getSecurityDsn(this.state.keyList)}\"\\' \\n` +\n      '    return response\\n'\n    );\n  }\n\n  getReportOnlyInstructions() {\n    return (\n      'def middleware(request, response):\\n' +\n      \"    response['Public-Key-Pins-Report-Only'] = \\\\\\n\" +\n      '        \\'pin-sha256=\"cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2+soZS7sWs=\"; \\' \\\\\\n' +\n      '        \\'pin-sha256=\"M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE=\"; \\' \\\\\\n' +\n      \"        'max-age=5184000; includeSubDomains; ' \\\\\\n\" +\n      `        \\'report-uri=\"${getSecurityDsn(this.state.keyList)}\"\\' \\n` +\n      '    return response\\n'\n    );\n  }\n\n  renderBody() {\n    return (\n      <div>\n        <SettingsPageHeader title={t('HTTP Public Key Pinning')} />\n\n        <PreviewFeature />\n\n        <ReportUri keyList={this.state.keyList} params={this.props.params} />\n\n        <Panel>\n          <PanelHeader>{t('About')}</PanelHeader>\n\n          <PanelBody withPadding>\n            <p>\n              {tct(\n                `[link:HTTP Public Key Pinning]\n              (HPKP) is a security feature that tells a web client to associate a specific\n              cryptographic public key with a certain web server to decrease the risk of MITM\n              attacks with forged certificates. It's enforced by browser vendors, and Sentry\n              supports capturing violations using the standard reporting hooks.`,\n                {\n                  link: (\n                    <ExternalLink href=\"https://en.wikipedia.org/wiki/HTTP_Public_Key_Pinning\" />\n                  ),\n                }\n              )}\n            </p>\n\n            <p>\n              {t(\n                `To configure HPKP reports\n              in Sentry, you'll need to send a header from your server describing your\n              policy, as well specifying the authenticated Sentry endpoint.`\n              )}\n            </p>\n\n            <p>\n              {t(\n                'For example, in Python you might achieve this via a simple web middleware'\n              )}\n            </p>\n            <pre>{this.getInstructions()}</pre>\n\n            <p>\n              {t(`Alternatively you can setup HPKP reports to simply send reports rather than\n              actually enforcing the policy`)}\n            </p>\n            <pre>{this.getReportOnlyInstructions()}</pre>\n\n            <p>\n              {tct(\n                `We recommend setting this up to only run on a percentage of requests, as\n              otherwise you may find that you've quickly exhausted your quota. For more\n              information, take a look at [link:the documentation on MDN].`,\n                {\n                  link: (\n                    <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning\" />\n                  ),\n                }\n              )}\n            </p>\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}