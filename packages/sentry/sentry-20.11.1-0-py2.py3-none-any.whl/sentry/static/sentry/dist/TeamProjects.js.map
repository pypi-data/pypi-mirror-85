{"version":3,"sources":["webpack:///./app/components/projectLabel.tsx","webpack:///./app/views/settings/components/settingsProjectItem.tsx","webpack:///./app/views/settings/organizationTeams/teamProjects.jsx"],"names":["ProjectLabel","this","props","project","className","slug","React","PureComponent","ProjectItem","state","isBookmarked","handleToggleBookmark","setState","organization","Wrapper","BookmarkLink","onToggle","to","Component","BookmarkStar","space","TeamProjects","error","loading","pageLinks","unlinkedProjects","linkedProjects","fetchAll","fetchTeamProjects","fetchUnlinkedProjects","location","params","orgId","teamId","api","requestPromise","query","cursor","includeAllArgs","then","jqXHR","getResponseHeader","handleLinkProject","action","request","method","success","resp","ProjectActions","updateSuccess","addSuccessMessage","t","addErrorMessage","handleProjectSelected","selection","find","p","id","value","handleQueryUpdate","evt","target","prevProps","projects","canWrite","Set","access","has","length","sortProjects","map","StyledPanelItem","key","disabled","title","size","icon","isCircled","onClick","onRetry","otherProjects","searchKey","label","ProjectListElement","Fragment","hasButtons","style","textTransform","items","onChange","onSelect","emptyMessage","alignMenu","isOpen","projectPanelContents","PanelItem","withApi","withOrganization"],"mappings":"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","file":"TeamProjects.js","sourcesContent":["import React from 'react';\n\nimport {Project} from 'app/types';\nimport {Project as ProjectPropType} from 'app/sentryTypes';\n\ntype Props = React.HTMLProps<HTMLSpanElement> & {\n  project: Project;\n};\n\nexport default class ProjectLabel extends React.PureComponent<Props> {\n  static propTypes = {\n    project: ProjectPropType.isRequired,\n  };\n\n  render() {\n    const {project, ...props} = this.props;\n\n    return (\n      <span className=\"project-label\" {...props}>\n        <span className=\"project-name\">{project.slug}</span>\n      </span>\n    );\n  }\n}\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nimport BookmarkStar from 'app/components/projects/bookmarkStar';\nimport Link from 'app/components/links/link';\nimport ProjectLabel from 'app/components/projectLabel';\nimport space from 'app/styles/space';\nimport {Project, Organization} from 'app/types';\n\ntype Props = {\n  project: Project;\n  organization: Organization;\n};\n\ntype State = {\n  isBookmarked: boolean;\n};\n\nclass ProjectItem extends React.Component<Props, State> {\n  state = {\n    isBookmarked: this.props.project.isBookmarked,\n  };\n\n  handleToggleBookmark = (isBookmarked: State['isBookmarked']) => {\n    this.setState({isBookmarked});\n  };\n\n  render() {\n    const {project, organization} = this.props;\n\n    return (\n      <Wrapper>\n        <BookmarkLink\n          organization={organization}\n          project={project}\n          isBookmarked={this.state.isBookmarked}\n          onToggle={this.handleToggleBookmark}\n        />\n        <Link to={`/settings/${organization.slug}/projects/${project.slug}/`}>\n          <ProjectLabel project={project} />\n        </Link>\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst BookmarkLink = styled(BookmarkStar)`\n  margin-right: ${space(1)};\n  margin-top: -${space(0.25)};\n`;\n\nexport default ProjectItem;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {sortProjects} from 'app/utils';\nimport {IconFlag, IconSubtract} from 'app/icons';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport DropdownAutoComplete from 'app/components/dropdownAutoComplete';\nimport DropdownButton from 'app/components/dropdownButton';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport ProjectActions from 'app/actions/projectActions';\nimport ProjectListItem from 'app/views/settings/components/settingsProjectItem';\nimport SentryTypes from 'app/sentryTypes';\nimport Tooltip from 'app/components/tooltip';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\n\nclass TeamProjects extends React.Component {\n  static propTypes = {\n    api: PropTypes.object.isRequired,\n    organization: SentryTypes.Organization.isRequired,\n  };\n\n  state = {\n    error: false,\n    loading: true,\n    pageLinks: null,\n    unlinkedProjects: [],\n    linkedProjects: [],\n  };\n\n  componentDidMount() {\n    this.fetchAll();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.params.orgId !== this.props.params.orgId ||\n      prevProps.params.teamId !== this.props.params.teamId\n    ) {\n      this.fetchAll();\n    }\n\n    if (prevProps.location !== this.props.location) {\n      this.fetchTeamProjects();\n    }\n  }\n\n  fetchAll = () => {\n    this.fetchTeamProjects();\n    this.fetchUnlinkedProjects();\n  };\n\n  fetchTeamProjects = () => {\n    const {\n      location,\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.setState({loading: true});\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: `team:${teamId}`,\n          cursor: location.query.cursor || '',\n        },\n        includeAllArgs: true,\n      })\n      .then(([linkedProjects, _, jqXHR]) => {\n        this.setState({\n          loading: false,\n          error: false,\n          linkedProjects,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      })\n      .catch(() => {\n        this.setState({loading: false, error: true});\n      });\n  };\n\n  fetchUnlinkedProjects = query => {\n    const {\n      params: {orgId, teamId},\n    } = this.props;\n\n    this.props.api\n      .requestPromise(`/organizations/${orgId}/projects/`, {\n        query: {\n          query: query ? `!team:${teamId} ${query}` : `!team:${teamId}`,\n        },\n      })\n      .then(unlinkedProjects => {\n        this.setState({unlinkedProjects});\n      });\n  };\n\n  handleLinkProject = (project, action) => {\n    const {orgId, teamId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${project.slug}/teams/${teamId}/`, {\n      method: action === 'add' ? 'POST' : 'DELETE',\n      success: resp => {\n        this.fetchAll();\n        ProjectActions.updateSuccess(resp);\n        addSuccessMessage(\n          action === 'add'\n            ? t('Successfully added project to team.')\n            : t('Successfully removed project from team')\n        );\n      },\n      error: () => {\n        addErrorMessage(t(\"Wasn't able to change project association.\"));\n      },\n    });\n  };\n\n  handleProjectSelected = selection => {\n    const project = this.state.unlinkedProjects.find(p => p.id === selection.value);\n\n    this.handleLinkProject(project, 'add');\n  };\n\n  handleQueryUpdate = evt => {\n    this.fetchUnlinkedProjects(evt.target.value);\n  };\n\n  projectPanelContents(projects) {\n    const {organization} = this.props;\n    const access = new Set(organization.access);\n    const canWrite = access.has('org:write');\n\n    return projects.length ? (\n      sortProjects(projects).map(project => (\n        <StyledPanelItem key={project.id}>\n          <ProjectListItem project={project} organization={organization} />\n          <Tooltip\n            disabled={canWrite}\n            title={t('You do not have enough permission to change project association.')}\n          >\n            <Button\n              size=\"small\"\n              disabled={!canWrite}\n              icon={<IconSubtract isCircled size=\"xs\" />}\n              onClick={() => {\n                this.handleLinkProject(project, 'remove');\n              }}\n            >\n              {t('Remove')}\n            </Button>\n          </Tooltip>\n        </StyledPanelItem>\n      ))\n    ) : (\n      <EmptyMessage size=\"large\" icon={<IconFlag size=\"xl\" />}>\n        {t(\"This team doesn't have access to any projects.\")}\n      </EmptyMessage>\n    );\n  }\n\n  render() {\n    const {linkedProjects, unlinkedProjects, error, loading} = this.state;\n\n    if (error) {\n      return <LoadingError onRetry={() => this.fetchAll()} />;\n    }\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    const access = new Set(this.props.organization.access);\n\n    const otherProjects = unlinkedProjects.map(p => ({\n      value: p.id,\n      searchKey: p.slug,\n      label: <ProjectListElement>{p.slug}</ProjectListElement>,\n    }));\n\n    return (\n      <React.Fragment>\n        <Panel>\n          <PanelHeader hasButtons>\n            <div>{t('Projects')}</div>\n            <div style={{textTransform: 'none'}}>\n              {!access.has('org:write') ? (\n                <DropdownButton\n                  disabled\n                  title={t('You do not have enough permission to associate a project.')}\n                  size=\"xsmall\"\n                >\n                  {t('Add Project')}\n                </DropdownButton>\n              ) : (\n                <DropdownAutoComplete\n                  items={otherProjects}\n                  onChange={this.handleQueryUpdate}\n                  onSelect={this.handleProjectSelected}\n                  emptyMessage={t('No projects')}\n                  alignMenu=\"right\"\n                >\n                  {({isOpen}) => (\n                    <DropdownButton isOpen={isOpen} size=\"xsmall\">\n                      {t('Add Project')}\n                    </DropdownButton>\n                  )}\n                </DropdownAutoComplete>\n              )}\n            </div>\n          </PanelHeader>\n          <PanelBody>{this.projectPanelContents(linkedProjects)}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} {...this.props} />\n      </React.Fragment>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${space(2)};\n`;\n\nconst ProjectListElement = styled('div')`\n  padding: ${space(0.25)} 0;\n`;\n\nexport {TeamProjects};\n\nexport default withApi(withOrganization(TeamProjects));\n"],"sourceRoot":""}