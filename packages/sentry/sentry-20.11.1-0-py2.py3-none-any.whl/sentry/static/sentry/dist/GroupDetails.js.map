{"version":3,"sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/organizationGroupDetails/constants.tsx","webpack:///./app/views/organizationGroupDetails/groupDetails.tsx","webpack:///./app/views/organizationGroupDetails/index.tsx"],"names":["recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","ERROR_TYPES","GroupDetails","state","initialState","remountComponent","setState","fetchData","listener","GroupStore","listen","itemIds","onGroupChange","undefined","group","this","props","prevProps","prevState","isGlobalSelectionReady","eventId","getEvent","reset","callIfFunction","environments","api","organization","orgSlug","slug","groupId","id","projSlug","project","fetchGroupEventAndMarkSeen","event","loading","error","errorType","Sentry","requestPromise","groupDetailsEndpoint","query","environment","data","ReactRouter","push","locationWithProject","_allp","replace","Error","loadInitialData","status","has","get","stale","title","getTitle","message","getMessage","t","onRetry","children","length","currentTab","isEventRoute","baseUrl","childProps","TAB","DETAILS","TAGS","Fragment","React","isValidElement","cloneElement","isError","isLoading","skipLoadLastUsed","forceProject","showDateSelector","shouldForceProject","lockedMessageSubject","showIssueStreamLink","showProjectSettingsLink","renderError","orgId","slugs","data-test-id","projects","initiallyLoaded","fetchError","renderContent","Component","childContextTypes","SentryTypes","Group","PropTypes","object","withApi","OrganizationGroupDetails","startMetricCollection","analytics","group_id","parseInt","org_id","startType","isLightweightOrganization","metric","mark","name","start_type","selection","key","withOrganization","withGlobalSelection"],"mappings":"4FAEA,iEA2Be,SAASA,EAAcC,EAAyBC,GAA0B,QAGnFC,EACAC,EAHGC,EAAsCH,EAAtCG,OAAQC,EAA8BJ,EAA9BI,OAAQC,EAAsBL,EAAtBK,SAAUC,EAAYN,EAAZM,SAC3BC,EAAQJ,EAAOK,KAAI,qBAAEC,MAAkB,MAK3B,iBAAPV,GACTG,EAAaC,EAAOO,QAAQX,GAAM,EAClCE,EAAgBU,IAAcJ,EAAMK,MAAM,EAAGV,IAAa,SAAAO,GAAI,MAAgB,MAAZA,EAAK,OAEvER,EAAgBU,IAAcJ,GAAO,SAAAE,GAAI,MAAgB,MAAZA,EAAK,MAGpD,IAAII,EAAYN,EAAMK,MAAMX,EAAeC,QAEnB,IAAbI,IACTO,EAAYA,EAAUD,MAAM,EAAGN,IAGjC,IAAMQ,EAAM,UAAGT,aAAH,EAAGA,EAAUS,cAAb,QAAuB,GAC7BC,EAAI,UAAGV,aAAH,EAAGA,EAAUU,YAAb,QAAqB,GAEzBC,EAAY,GAAH,OAAMH,EAAUI,KAAK,KAArB,OACC,iBAAPlB,EAAkB,GAAKA,GADjB,OAEZe,GAFY,OAEHC,GAEZ,OAAOG,YAAoBF,EAAWZ,K,8ZCxD3Be,EACM,kB,sgCC8CbC,G,sLAMJC,MAAQ,EAAKC,a,EAyCbC,iBAAmB,WACjB,EAAKC,SAAS,EAAKF,cACnB,EAAKG,a,EAoGPC,SAAWC,IAAWC,QAAO,SAAAC,GAAO,OAAI,EAAKC,cAAcD,UAAUE,G,wDA5InE,MAAO,CACLC,MAAOC,KAAKZ,MAAMW,MAClB3B,SAAU4B,KAAKC,MAAM7B,Y,0CAKvB4B,KAAKR,c,yCAGYU,EAAkBC,GAAkB,QACjDD,EAAUE,yBAA2BJ,KAAKC,MAAMG,wBAClDJ,KAAKR,eAIHW,aAAD,EAACA,EAAWJ,QAASC,KAAKZ,MAAMW,QAChC,UAAAG,EAAU/B,cAAV,eAAkBkC,YAAlB,UAA8BL,KAAKC,MAAM9B,cAAzC,aAA8B,EAAmBkC,UAAWL,KAAKZ,MAAMW,QAExEC,KAAKM,SAASN,KAAKZ,MAAMW,S,6CAK3BL,IAAWa,QACXC,YAAeR,KAAKP,Y,kDAsBPM,G,kGACqCC,KAAKC,MAAhD9B,E,EAAAA,OAAQsC,E,EAAAA,aAAcC,E,EAAAA,IAAKC,E,EAAAA,aAC5BC,EAAUD,EAAaE,KACvBC,EAAUf,EAAMgB,GAChBC,EAAWjB,EAAMkB,QAAQJ,KACzBR,GAAUlC,aAAA,EAAAA,EAAQkC,UAAW,S,kBAGba,YAClBR,EACAE,EACAI,EACAF,EACAT,EACAI,G,OANIU,E,OAQNnB,KAAKT,SAAS,CAAC4B,QAAOC,SAAS,EAAOC,OAAO,EAAOC,UAAW,O,kDAG/DC,IAAA,MACAvB,KAAKT,SAAS,CAAC8B,OAAO,EAAMC,UAAW,KAAMF,SAAS,I,6PAKJpB,KAAKC,MAAlDQ,E,EAAAA,aAAcC,E,EAAAA,I,EAAKN,uB,0EAQLM,EAAIc,eAAexB,KAAKyB,qBAAsB,CAC/DC,MAAO,EAAF,GAECjB,EAAe,CAACkB,YAAalB,GAAgB,M,UAH/CmB,E,OAQF5B,KAAKC,MAAM9B,OAAO2C,UAAYc,EAAKb,G,0BACFf,KAAKC,MAAjC/B,E,EAAAA,OAAQC,E,EAAAA,OAAQC,E,EAAAA,SACvByD,iBAA2BC,KACzBjE,YAAc,GAAI,CAChBK,SACAE,WACAD,OAAQ,EAAF,KAAMA,GAAN,IAAc2C,QAASc,EAAKb,Q,4BAKlCE,EAAUW,EAAKX,eASqBnB,KAFlCiC,EADD,KAC2B/B,KAAKC,MAAM7B,WAErBsD,MAAMT,cACUnB,IAApCiC,EAAoBL,MAAMM,QAK1BD,EAAoBL,MAAMT,QAAUA,EAAQF,WAEvCgB,EAAoBL,MAAMM,MACjCH,iBAA2BI,QAAQF,IAfnCR,KAAiB,WACfA,IAAwB,IAAIW,MAAM,yBAiBtClC,KAAKT,SAAS,CAAC0B,YAEfvB,IAAWyC,gBAAgB,CAACP,I,kDAExBN,EAAmB,K,uCACf,KAAKc,O,OACN,M,gCACHd,EAAYpC,E,6BAKhBc,KAAKT,SAAS,CACZ8B,OAAO,EACPC,YACAF,SAAS,I,2IAODxB,GACZ,IAAMmB,EAAKf,KAAKC,MAAM9B,OAAO2C,QAC7B,GAAIlB,EAAQyC,IAAItB,GAAK,CACnB,IAAMhB,EAAQL,IAAW4C,IAAIvB,GAC7B,GAAIhB,EAAO,CAGT,GAAKA,EAAoCwC,MAEvC,YADAvC,KAAKR,YAGPQ,KAAKT,SAAS,CACZQ,c,iCAMG,IACFY,EAAgBX,KAAKC,MAArBU,aACAZ,EAASC,KAAKZ,MAAdW,MAGP,IAAKA,EACH,MAHmB,SAHZ,IASFyC,EAASC,YAAS1C,EAAOY,GAAzB6B,MACDE,EAAUC,YAAW5C,GAE3B,OAAIyC,GAASE,EACX,UAAUF,EAAV,aAAoBE,GAGfF,GAASE,GAbK,W,oCAiBrB,IAAK1C,KAAKZ,MAAMiC,MACd,OAAO,KAGT,OAAQrB,KAAKZ,MAAMkC,WACjB,KAAKpC,EACH,OACE,YAAC,IAAD,CAAcwD,QAASE,YAAE,mDAE7B,QACE,OAAO,YAAC,IAAD,CAAcC,QAAS7C,KAAKV,sB,oCAI3B2B,GAAwB,MACmBjB,KAAKC,MAArD6C,EAD6B,EAC7BA,SAAUrC,EADmB,EACnBA,aAAcE,EADK,EACLA,aAAczC,EADT,EACSA,OADT,EAIDA,EAAOA,EAAO6E,OAAS,GAAG9C,MAAtD+C,EAJ6B,EAI7BA,WAAYC,EAJiB,EAIjBA,aAMblD,EAAQC,KAAKZ,MAAMW,MACnBoB,EAAQnB,KAAKZ,MAAM+B,MAEnB+B,EAAUD,EAAY,yBACNtC,EAAaE,KADP,mBACsBd,EAAMgB,GAD5B,mBACyCI,EAAMJ,GAD/C,8BAENJ,EAAaE,KAFP,mBAEsBd,EAAMgB,GAF5B,KAIxBoC,EAAkC,CACpC1C,eACAV,QACAkB,WAWF,OARI+B,IAAeI,IAAIC,UACrBF,EAAa,EAAH,KAAOA,GAAP,IAAmBhC,WAG3B6B,IAAeI,IAAIE,OACrBH,EAAa,EAAH,KAAOA,GAAP,IAAmBhC,QAAO+B,aAIpC,YAAC,IAAMK,SAAP,KACE,YAAC,IAAD,CACEtC,QAASA,EACTlB,MAAOA,EACPiD,WAAYA,EACZE,QAASA,IAEVM,IAAMC,eAAeX,GAClBU,IAAME,aAAaZ,EAAUK,GAC7BL,K,+BAKD,WACAnC,EAAgBX,KAAKC,MAArBU,aADA,EAEkCX,KAAKZ,MAAvCiC,EAFA,EAEAA,MAAOtB,EAFP,EAEOA,MAAOkB,EAFd,EAEcA,QAEf0C,EAAUtC,EACVuC,EALC,EAEuBxC,UAGCrB,IAAU4D,EAEzC,OACE,YAAC,IAAD,CAAenB,MAAOxC,KAAKyC,YACzB,YAAC,IAAD,CACEoB,kBAAgB,EAChBC,aAAc7C,EACd8C,kBAAkB,EAClBC,oBAAkB,EAClBC,qBAAsBrB,YAAE,SACxBsB,qBAAmB,EACnBC,yBAAuB,GAEvB,YAAC,IAAD,KACGP,EACC,YAAC,UAAD,MACED,EACF3D,KAAKoE,cAEL,YAAC,IAAD,CACEC,MAAO1D,EAAaE,KACpByD,MAAO,CAACrD,EAASJ,MACjB0D,eAAa,6BAEZ,gBAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,gBAAiBC,EAA7B,EAA6BA,WAA7B,OACCD,EACEC,EACE,YAAC,IAAD,CAAchC,QAASE,YAAE,yCAEzB,EAAK+B,cAAcH,EAAS,IAG9B,YAAC,UAAD,c,mCAxPhB,MAAO,CACLzE,MAAO,KACPqB,SAAS,EACTC,OAAO,EACPC,UAAW,KACXL,QAAS,Q,2CAUX,wBAAkBjB,KAAKC,MAAM9B,OAAO2C,QAApC,S,GArDuB0C,IAAMoB,WAA3BzF,G,2BAAAA,GACG0F,kBAAoB,CACzB9E,MAAO+E,IAAYC,MACnB3G,SAAU4G,IAAUC,QAuSTC,mBAAQ3D,IAAoBpC,K,6aCxUrCgG,G,iCACJ,WAAYlF,GAAO,0BACjB,cAAMA,IAGDmF,wBAJY,E,wDAQjBC,YAAU,oBAAqB,CAC7BC,SAAUC,SAASvF,KAAKC,MAAM9B,OAAO2C,QAAS,IAC9C0E,OAAQD,SAASvF,KAAKC,MAAMU,aAAaI,GAAI,Q,8CAQ/C,IAAM0E,EAAYC,YAA0B1F,KAAKC,MAAMU,cACnD,aACA,aACJgF,IAAOC,KAAK,CAACC,KAAM,2BAA4BjE,KAAM,CAACkE,WAAYL,O,+BAG3D,MACuBzF,KAAKC,MAA5B8F,EADA,EACAA,UAAc9F,EADd,qBAGP,OACE,YAAC,GAAD,KACE+F,IAAG,UAAKhG,KAAKC,MAAM9B,OAAO2C,QAAvB,iBAAuCiF,EAAUtF,aAAazB,KAAK,MACtEyB,aAAcsF,EAAUtF,cACpBR,Q,GAhC2BuD,IAAMoB,WAAvCO,G,uCAsCSc,sBAAiBC,YAAoBf","file":"GroupDetails.js","sourcesContent":["import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","export const ERROR_TYPES = {\n  GROUP_NOT_FOUND: 'GROUP_NOT_FOUND',\n} as const;\n","import DocumentTitle from 'react-document-title';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport * as ReactRouter from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {Client} from 'app/api';\nimport {Group, Organization, Project, Event, AvatarProject} from 'app/types';\nimport {PageContent} from 'app/styles/organization';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport {t} from 'app/locale';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport GroupStore from 'app/stores/groupStore';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Projects from 'app/utils/projects';\nimport SentryTypes from 'app/sentryTypes';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withApi from 'app/utils/withApi';\nimport {getMessage, getTitle} from 'app/utils/events';\n\nimport {ERROR_TYPES} from './constants';\nimport {fetchGroupEventAndMarkSeen} from './utils';\nimport GroupHeader, {TAB} from './header';\n\ntype Error = typeof ERROR_TYPES[keyof typeof ERROR_TYPES] | null;\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  environments: string[];\n  children: React.ReactNode;\n  isGlobalSelectionReady: boolean;\n} & ReactRouter.RouteComponentProps<\n  {orgId: string; groupId: string; eventId?: string},\n  {}\n>;\n\ntype State = {\n  group: Group | null;\n  loading: boolean;\n  error: boolean;\n  errorType: Error;\n  project: null | (Pick<Project, 'id' | 'slug'> & Partial<Pick<Project, 'platform'>>);\n  event?: Event;\n};\n\nclass GroupDetails extends React.Component<Props, State> {\n  static childContextTypes = {\n    group: SentryTypes.Group,\n    location: PropTypes.object,\n  };\n\n  state = this.initialState;\n\n  getChildContext() {\n    return {\n      group: this.state.group,\n      location: this.props.location,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (prevProps.isGlobalSelectionReady !== this.props.isGlobalSelectionReady) {\n      this.fetchData();\n    }\n\n    if (\n      (!prevState?.group && this.state.group) ||\n      (prevProps.params?.eventId !== this.props.params?.eventId && this.state.group)\n    ) {\n      this.getEvent(this.state.group);\n    }\n  }\n\n  componentWillUnmount() {\n    GroupStore.reset();\n    callIfFunction(this.listener);\n  }\n\n  get initialState(): State {\n    return {\n      group: null,\n      loading: true,\n      error: false,\n      errorType: null,\n      project: null,\n    };\n  }\n\n  remountComponent = () => {\n    this.setState(this.initialState);\n    this.fetchData();\n  };\n\n  get groupDetailsEndpoint() {\n    return `/issues/${this.props.params.groupId}/`;\n  }\n\n  async getEvent(group: Group) {\n    const {params, environments, api, organization} = this.props;\n    const orgSlug = organization.slug;\n    const groupId = group.id;\n    const projSlug = group.project.slug;\n    const eventId = params?.eventId || 'latest';\n\n    try {\n      const event = await fetchGroupEventAndMarkSeen(\n        api,\n        orgSlug,\n        projSlug,\n        groupId,\n        eventId,\n        environments\n      );\n      this.setState({event, loading: false, error: false, errorType: null});\n    } catch (err) {\n      // This is an expected error, capture to Sentry so that it is not considered as an unhandled error\n      Sentry.captureException(err);\n      this.setState({error: true, errorType: null, loading: false});\n    }\n  }\n\n  async fetchData() {\n    const {environments, api, isGlobalSelectionReady} = this.props;\n\n    // Need to wait for global selection store to be ready before making request\n    if (!isGlobalSelectionReady) {\n      return;\n    }\n\n    try {\n      const data = await api.requestPromise(this.groupDetailsEndpoint, {\n        query: {\n          // Note, we do not want to include the environment key at all if there are no environments\n          ...(environments ? {environment: environments} : {}),\n        },\n      });\n\n      // TODO(billy): See if this is even in use and if not, can we just rip this out?\n      if (this.props.params.groupId !== data.id) {\n        const {routes, params, location} = this.props;\n        ReactRouter.browserHistory.push(\n          recreateRoute('', {\n            routes,\n            location,\n            params: {...params, groupId: data.id},\n          })\n        );\n        return;\n      }\n      const project = data.project;\n\n      if (!project) {\n        Sentry.withScope(() => {\n          Sentry.captureException(new Error('Project not found'));\n        });\n      } else {\n        const locationWithProject = {...this.props.location};\n        if (\n          locationWithProject.query.project === undefined &&\n          locationWithProject.query._allp === undefined\n        ) {\n          //We use _allp as a temporary measure to know they came from the issue list page with no project selected (all projects included in filter).\n          //If it is not defined, we add the locked project id to the URL (this is because if someone navigates directly to an issue on single-project priveleges, then goes back - they were getting assigned to the first project).\n          //If it is defined, we do not so that our back button will bring us to the issue list page with no project selected instead of the locked project.\n          locationWithProject.query.project = project.id;\n        }\n        delete locationWithProject.query._allp; //We delete _allp from the URL to keep the hack a bit cleaner, but this is not an ideal solution and will ultimately be replaced with something smarter.\n        ReactRouter.browserHistory.replace(locationWithProject);\n      }\n\n      this.setState({project});\n\n      GroupStore.loadInitialData([data]);\n    } catch (err) {\n      let errorType: Error = null;\n      switch (err?.status) {\n        case 404:\n          errorType = ERROR_TYPES.GROUP_NOT_FOUND;\n          break;\n        default:\n      }\n\n      this.setState({\n        error: true,\n        errorType,\n        loading: false,\n      });\n    }\n  }\n\n  listener = GroupStore.listen(itemIds => this.onGroupChange(itemIds), undefined);\n\n  onGroupChange(itemIds: Set<string>) {\n    const id = this.props.params.groupId;\n    if (itemIds.has(id)) {\n      const group = GroupStore.get(id);\n      if (group) {\n        // TODO(ts) This needs a better approach. issueActions is splicing attributes onto\n        // group objects to cheat here.\n        if ((group as Group & {stale?: boolean}).stale) {\n          this.fetchData();\n          return;\n        }\n        this.setState({\n          group,\n        });\n      }\n    }\n  }\n\n  getTitle() {\n    const {organization} = this.props;\n    const {group} = this.state;\n    const defaultTitle = 'Sentry';\n\n    if (!group) {\n      return defaultTitle;\n    }\n\n    const {title} = getTitle(group, organization);\n    const message = getMessage(group);\n\n    if (title && message) {\n      return `${title}: ${message}`;\n    }\n\n    return title || message || defaultTitle;\n  }\n\n  renderError() {\n    if (!this.state.error) {\n      return null;\n    }\n\n    switch (this.state.errorType) {\n      case ERROR_TYPES.GROUP_NOT_FOUND:\n        return (\n          <LoadingError message={t('The issue you were looking for was not found.')} />\n        );\n      default:\n        return <LoadingError onRetry={this.remountComponent} />;\n    }\n  }\n\n  renderContent(project: AvatarProject) {\n    const {children, environments, organization, routes} = this.props;\n\n    // all the routes under /organizations/:orgId/issues/:groupId have a defined props\n    const {currentTab, isEventRoute} = routes[routes.length - 1].props as {\n      currentTab: keyof typeof TAB;\n      isEventRoute: boolean;\n    };\n\n    // At this point group and event have to be defined\n    const group = this.state.group!;\n    const event = this.state.event!;\n\n    const baseUrl = isEventRoute\n      ? `/organizations/${organization.slug}/issues/${group.id}/events/${event.id}/`\n      : `/organizations/${organization.slug}/issues/${group.id}/`;\n\n    let childProps: Record<string, any> = {\n      environments,\n      group,\n      project,\n    };\n\n    if (currentTab === TAB.DETAILS) {\n      childProps = {...childProps, event};\n    }\n\n    if (currentTab === TAB.TAGS) {\n      childProps = {...childProps, event, baseUrl};\n    }\n\n    return (\n      <React.Fragment>\n        <GroupHeader\n          project={project}\n          group={group}\n          currentTab={currentTab}\n          baseUrl={baseUrl}\n        />\n        {React.isValidElement(children)\n          ? React.cloneElement(children, childProps)\n          : children}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n    const {error, group, project, loading} = this.state;\n\n    const isError = error;\n    const isLoading = loading || (!group && !isError);\n\n    return (\n      <DocumentTitle title={this.getTitle()}>\n        <GlobalSelectionHeader\n          skipLoadLastUsed\n          forceProject={project}\n          showDateSelector={false}\n          shouldForceProject\n          lockedMessageSubject={t('issue')}\n          showIssueStreamLink\n          showProjectSettingsLink\n        >\n          <PageContent>\n            {isLoading ? (\n              <LoadingIndicator />\n            ) : isError ? (\n              this.renderError()\n            ) : (\n              <Projects\n                orgId={organization.slug}\n                slugs={[project!.slug]}\n                data-test-id=\"group-projects-container\"\n              >\n                {({projects, initiallyLoaded, fetchError}) =>\n                  initiallyLoaded ? (\n                    fetchError ? (\n                      <LoadingError message={t('Error loading the specified project')} />\n                    ) : (\n                      this.renderContent(projects[0])\n                    )\n                  ) : (\n                    <LoadingIndicator />\n                  )\n                }\n              </Projects>\n            )}\n          </PageContent>\n        </GlobalSelectionHeader>\n      </DocumentTitle>\n    );\n  }\n}\n\nexport default withApi(Sentry.withProfiler(GroupDetails));\n","import * as ReactRouter from 'react-router';\nimport React from 'react';\n\nimport {analytics, metric} from 'app/utils/analytics';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization, {isLightweightOrganization} from 'app/utils/withOrganization';\nimport {GlobalSelection, Organization} from 'app/types';\n\nimport GroupDetails from './groupDetails';\n\ntype Props = {\n  selection: GlobalSelection;\n  isGlobalSelectionReady: boolean;\n  organization: Organization;\n  children: React.ReactNode;\n} & ReactRouter.RouteComponentProps<{orgId: string; groupId: string}, {}>;\n\nclass OrganizationGroupDetails extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n\n    // Setup in the constructor as render() may be expensive\n    this.startMetricCollection();\n  }\n\n  componentDidMount() {\n    analytics('issue_page.viewed', {\n      group_id: parseInt(this.props.params.groupId, 10),\n      org_id: parseInt(this.props.organization.id, 10),\n    });\n  }\n\n  /**\n   * See \"page-issue-list-start\" for explanation on hot/cold-starts\n   */\n  startMetricCollection() {\n    const startType = isLightweightOrganization(this.props.organization)\n      ? 'cold-start'\n      : 'warm-start';\n    metric.mark({name: 'page-issue-details-start', data: {start_type: startType}});\n  }\n\n  render() {\n    const {selection, ...props} = this.props;\n\n    return (\n      <GroupDetails\n        key={`${this.props.params.groupId}-envs:${selection.environments.join(',')}`}\n        environments={selection.environments}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default withOrganization(withGlobalSelection(OrganizationGroupDetails));\n"],"sourceRoot":""}