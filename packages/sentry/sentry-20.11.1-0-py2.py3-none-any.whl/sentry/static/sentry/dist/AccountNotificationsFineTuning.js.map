{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/data/forms/accountNotificationSettings.tsx","webpack:///./app/views/settings/account/accountNotificationFineTuning.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","FormPanel","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","id","sanitizeQuerySelector","undefined","map","field","defaultValue","fieldWithoutDefaultValue","disabledReason","key","name","highlighted","JsonForm","state","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","forms","features","location","formGroup","i","Fragment","renderForm","contextTypes","PropTypes","object","route","subscribeByDefault","type","label","t","help","tct","locationPath","workflowNotifications","choices","weeklyReports","deployNotifications","personalActivityNotifications","selfAssignOnResolve","formGroups","ACCOUNT_NOTIFICATION_FIELDS","alerts","description","defaultFieldName","workflow","deploy","reports","email","PanelBodyLineItem","PanelBody","theme","innerBorder","isGroupedByProject","indexOf","AccountNotificationsByProject","projects","projectsByOrg","reduce","acc","project","orgSlug","organization","slug","hasOwnProperty","push","groupByOrganization","fieldConfig","Object","values","org","getFieldData","projectFields","deprecatedSelectControl","AccountNotificationsByOrganization","organizations","orgFields","AccountNotificationsByOrganizationContainer","withOrganizations","AccountNotificationFineTuning","fineTuneType","params","endpoints","emails","isVerified","sort","a","b","isPrimary","isProject","getEndpoints","stateKey","url","hasProjects","getEmailChoices","saveOnBlur","apiMethod","apiEndpoint","initialData","notifications","hasButtons","Heading","renderSearchInput","placeholder","fineTuneData","pageLinks","projectsPageLinks"],"mappings":"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","file":"AccountNotificationsFineTuning.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport {Scope} from 'app/types';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import {Box} from 'reflexbox';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport scrollToElement from 'scroll-to-element';\nimport {Location} from 'history';\nimport * as Sentry from '@sentry/react';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport {Field, FieldObject, JsonFormObject} from './type';\nimport FieldFromConfig from './fieldFromConfig';\nimport FormPanel from './formPanel';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static propTypes = {\n    /**\n     * Fields that are grouped by \"section\"\n     */\n    forms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        fields: PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n        ),\n      })\n    ),\n\n    /**\n     * If `forms` is not defined, `title` + `fields` must be required.\n     * Allows more fine grain control of title/fields\n     */\n    fields: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n    ),\n    /**\n     * Panel title if `forms` is not defined\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    access: PropTypes.object,\n    features: PropTypes.object,\n    renderFooter: PropTypes.func,\n    /**\n     * Renders inside of PanelBody\n     */\n    renderHeader: PropTypes.func,\n    /**\n     * Disables the entire form\n     */\n    disabled: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import {t, tct} from 'app/locale';\nimport {Field, JsonFormObject} from 'app/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/notifications/';\n\nexport const fields: {[key: string]: Field} = {\n  subscribeByDefault: {\n    name: 'subscribeByDefault',\n    type: 'boolean',\n    label: t('Send Me Alerts'),\n    // TODO(billy): Make this a real link\n    help: tct(\n      'Alerts are defined in [locationPath]. Enable this to receive alerts sent to your teams. You will always receive alerts configured to be sent directly to you.',\n      {\n        locationPath: '[Project] » Project Settings » Alerts',\n      }\n    ),\n  },\n  workflowNotifications: {\n    name: 'workflowNotifications',\n    type: 'radio',\n    label: t('Send Me Workflow Notifications'),\n    choices: [\n      [0, t('Always')],\n      [1, t('Only On Issues I Subscribe To')],\n      [2, t('Never')],\n    ],\n    help: t('E.g. changes in issue assignment, resolution status, and comments.'),\n  },\n  weeklyReports: {\n    // Form is not visible because currently not implemented\n    name: 'weeklyReports',\n    type: 'boolean',\n    label: t('Send Me Weekly Reports'),\n    help: t(\"Reports contain a summary of what's happened within your organization.\"),\n    disabled: true,\n  },\n  deployNotifications: {\n    name: 'deployNotifications',\n    type: 'radio',\n    label: t('Send Me Deploy Notifications'),\n    choices: [\n      [2, t('Always')],\n      [3, t('Only On Deploys With My Commits')],\n      [4, t('Never')],\n    ],\n    help: t('Deploy emails include release, environment and commit overviews.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'boolean',\n    label: t('Notify Me About My Own Activity'),\n    help: t('Enable this to receive notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'boolean',\n    label: t(\"Claim Unassigned Issues I've Resolved\"),\n    help: t(\"You'll receive notifications about any changes that happen afterwards.\"),\n  },\n};\n\nconst formGroups: JsonFormObject[] = [\n  {\n    title: t('Alerts'),\n    fields: [fields.subscribeByDefault],\n  },\n\n  {\n    title: t('Workflow Notifications'),\n    fields: [fields.workflowNotifications],\n  },\n\n  {\n    title: t('Email Routing'),\n    fields: [],\n  },\n\n  {\n    title: t('Weekly Reports'),\n    fields: [],\n  },\n\n  {\n    title: t('Deploy Notifications'),\n    fields: [fields.deployNotifications],\n  },\n\n  {\n    title: t('My Activity'),\n    fields: [fields.personalActivityNotifications, fields.selfAssignOnResolve],\n  },\n];\n\nexport default formGroups;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {fields} from 'app/data/forms/accountNotificationSettings';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport Pagination from 'app/components/pagination';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport withOrganizations from 'app/utils/withOrganizations';\n\nconst ACCOUNT_NOTIFICATION_FIELDS = {\n  alerts: {\n    title: 'Project Alerts',\n    description: t('Control alerts that you receive per project.'),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [1, t('On')],\n      [0, t('Off')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'subscribeByDefault',\n  },\n  workflow: {\n    title: 'Workflow Notifications',\n    description: t(\n      'Control workflow notifications, e.g. changes in issue assignment, resolution status, and comments.'\n    ),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [0, t('Always')],\n      [1, t('Only on issues I subscribe to')],\n      [2, t('Never')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'workflowNotifications',\n  },\n  deploy: {\n    title: t('Deploy Notifications'),\n    description: t(\n      'Control deploy notifications that include release, environment, and commit overviews.'\n    ),\n    type: 'select',\n    choices: [\n      [-1, t('Default')],\n      [2, t('Always')],\n      [3, t('Only on deploys with my commits')],\n      [4, t('Never')],\n    ],\n    defaultValue: -1,\n    defaultFieldName: 'deployNotifications',\n  },\n  reports: {\n    title: t('Weekly Reports'),\n    description: t(\n      \"Reports contain a summary of what's happened within the organization.\"\n    ),\n    type: 'select',\n    // API only saves organizations that have this disabled, so we should default to \"On\"\n    defaultValue: 1,\n    choices: [\n      [1, t('On')],\n      [0, t('Off')],\n    ],\n    defaultFieldName: 'weeklyReports',\n  },\n\n  email: {\n    title: t('Email Routing'),\n    description: t(\n      'On a per project basis, route emails to an alternative email address.'\n    ),\n    type: 'select',\n    // No choices here because it's going to have dynamic content\n    // Component will create choices\n  },\n};\n\nconst PanelBodyLineItem = styled(PanelBody)`\n  font-size: 1.4rem;\n  border-bottom: 1px solid ${p => p.theme.innerBorder};\n`;\n\n// Which fine tuning parts are grouped by project\nconst isGroupedByProject = type => ['alerts', 'workflow', 'email'].indexOf(type) > -1;\n\nfunction groupByOrganization(projects) {\n  return projects.reduce((acc, project) => {\n    const orgSlug = project.organization.slug;\n    if (acc.hasOwnProperty(orgSlug)) {\n      acc[orgSlug].projects.push(project);\n    } else {\n      acc[orgSlug] = {\n        organization: project.organization,\n        projects: [project],\n      };\n    }\n    return acc;\n  }, {});\n}\n\nclass AccountNotificationsByProject extends React.Component {\n  static propTypes = {\n    projects: PropTypes.array,\n    field: PropTypes.object,\n  };\n\n  getFieldData() {\n    const {projects, field} = this.props;\n    const projectsByOrg = groupByOrganization(projects);\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {title, description, ...fieldConfig} = field;\n\n    // Display as select box in this view regardless of the type specified in the config\n    return Object.values(projectsByOrg).map(org => ({\n      name: org.organization.name,\n      projects: org.projects.map(project => ({\n        ...fieldConfig,\n        // `name` key refers to field name\n        // we use project.id because slugs are not unique across orgs\n        name: project.id,\n        label: project.slug,\n      })),\n    }));\n  }\n\n  render() {\n    const data = this.getFieldData();\n\n    return data.map(({name, projects: projectFields}) => (\n      <div key={name}>\n        <PanelHeader>{name}</PanelHeader>\n        {projectFields.map(field => (\n          <PanelBodyLineItem key={field.name}>\n            <SelectField\n              deprecatedSelectControl\n              defaultValue={field.defaultValue}\n              name={field.name}\n              choices={field.choices}\n              label={field.label}\n            />\n          </PanelBodyLineItem>\n        ))}\n      </div>\n    ));\n  }\n}\n\nclass AccountNotificationsByOrganization extends React.Component {\n  static propTypes = {\n    organizations: PropTypes.array,\n    field: PropTypes.object,\n  };\n\n  getFieldData() {\n    const {field, organizations} = this.props;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {title, description, ...fieldConfig} = field;\n\n    // Display as select box in this view regardless of the type specified in the config\n    return organizations.map(org => ({\n      ...fieldConfig,\n      // `name` key refers to field name\n      // we use org.id to remain consistent project.id use (which is required because slugs are not unique across orgs)\n      name: org.id,\n      label: org.slug,\n    }));\n  }\n\n  render() {\n    const orgFields = this.getFieldData();\n\n    return (\n      <React.Fragment>\n        {orgFields.map(field => (\n          <PanelBodyLineItem key={field.name}>\n            <SelectField\n              deprecatedSelectControl\n              defaultValue={field.defaultValue}\n              name={field.name}\n              choices={field.choices}\n              label={field.label}\n            />\n          </PanelBodyLineItem>\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n\nconst AccountNotificationsByOrganizationContainer = withOrganizations(\n  AccountNotificationsByOrganization\n);\n\nexport default class AccountNotificationFineTuning extends AsyncView {\n  getEndpoints() {\n    const {fineTuneType} = this.props.params;\n    const endpoints = [\n      ['notifications', '/users/me/notifications/'],\n      ['fineTuneData', `/users/me/notifications/${fineTuneType}/`],\n    ];\n\n    if (isGroupedByProject(fineTuneType)) {\n      endpoints.push(['projects', '/projects/']);\n    }\n\n    endpoints.push(['emails', '/users/me/emails/']);\n    if (fineTuneType === 'email') {\n      endpoints.push(['emails', '/users/me/emails/']);\n    }\n\n    return endpoints;\n  }\n\n  // Return a sorted list of user's verified emails\n  getEmailChoices() {\n    const {emails} = this.state;\n    if (!emails) {\n      return [];\n    }\n\n    return emails\n      .filter(({isVerified}) => isVerified)\n      .sort((a, b) => {\n        // Sort by primary -> email\n        if (a.isPrimary) {\n          return -1;\n        } else if (b.isPrimary) {\n          return 1;\n        }\n\n        return a.email < b.email ? -1 : 1;\n      });\n  }\n\n  renderBody() {\n    const {fineTuneType} = this.props.params;\n    const isProject = isGroupedByProject(fineTuneType);\n    const field = ACCOUNT_NOTIFICATION_FIELDS[fineTuneType];\n    const {title, description} = field;\n    const [stateKey, url] = isProject ? this.getEndpoints()[2] : [];\n    const hasProjects = this.state.projects && !!this.state.projects.length;\n\n    if (fineTuneType === 'email') {\n      // Fetch verified email addresses\n      field.choices = this.getEmailChoices().map(({email}) => [email, email]);\n    }\n\n    return (\n      <div>\n        <SettingsPageHeader title={title} />\n        {description && <TextBlock>{description}</TextBlock>}\n\n        {field &&\n          field.defaultFieldName &&\n          // not implemented yet\n          field.defaultFieldName !== 'weeklyReports' && (\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint=\"/users/me/notifications/\"\n              initialData={this.state.notifications}\n            >\n              <JsonForm\n                title={`Default ${title}`}\n                fields={[fields[field.defaultFieldName]]}\n              />\n            </Form>\n          )}\n        <Panel>\n          <PanelBody>\n            <PanelHeader hasButtons={isProject}>\n              <Heading>{isProject ? t('Projects') : t('Organizations')}</Heading>\n              <div>\n                {isProject &&\n                  this.renderSearchInput({\n                    placeholder: t('Search Projects'),\n                    url,\n                    stateKey,\n                  })}\n              </div>\n            </PanelHeader>\n\n            <Form\n              saveOnBlur\n              apiMethod=\"PUT\"\n              apiEndpoint={`/users/me/notifications/${this.props.params.fineTuneType}/`}\n              initialData={this.state.fineTuneData}\n            >\n              {isProject && hasProjects && (\n                <AccountNotificationsByProject\n                  projects={this.state.projects}\n                  field={field}\n                />\n              )}\n\n              {isProject && !hasProjects && (\n                <EmptyMessage>{t('No projects found')}</EmptyMessage>\n              )}\n\n              {!isProject && (\n                <AccountNotificationsByOrganizationContainer field={field} />\n              )}\n            </Form>\n          </PanelBody>\n        </Panel>\n\n        {this.state.projects && (\n          <Pagination pageLinks={this.state.projectsPageLinks} {...this.props} />\n        )}\n      </div>\n    );\n  }\n}\n\nconst Heading = styled('div')`\n  flex: 1;\n`;\n"],"sourceRoot":""}