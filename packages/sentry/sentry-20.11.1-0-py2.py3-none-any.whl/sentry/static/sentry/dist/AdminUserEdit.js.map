{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/formPanel.tsx","webpack:///./app/views/settings/components/forms/jsonForm.tsx","webpack:///./app/views/admin/adminUserEdit.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","FormPanel","props","fields","access","disabled","additionalFieldProps","renderFooter","renderHeader","otherProps","id","sanitizeQuerySelector","undefined","map","field","defaultValue","fieldWithoutDefaultValue","disabledReason","key","name","highlighted","React","Component","JsonForm","state","getLocation","context","hash","scrollToHash","nextProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","fieldsWithVisibleProp","filter","defined","visible","length","every","formPanelProps","shouldDisplayForm","forms","features","location","formGroup","i","Fragment","renderForm","contextTypes","PropTypes","object","defaultProps","userEditForm","type","required","label","t","help","REMOVE_BUTTON_LABEL","disable","delete","RemoveUserModal","deleteType","onRemove","closeModal","user","tct","email","value","onChange","choices","ModalFooter","priority","onClick","AdminUserEdit","removeUser","actionTypes","deleteUser","deactivateUser","formModel","FormModel","userEndpoint","api","requestPromise","method","data","hardDelete","organizations","addSuccessMessage","browserHistory","replace","isActive","response","setInitialData","model","initialData","apiMethod","apiEndpoint","requireChanges","onSubmitError","addErrorMessage","onSubmitSuccess","extraButton","openModal","opts","style","marginLeft","space","params","p","theme","border"],"mappings":"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","file":"AdminUserEdit.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import React from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\nimport {Scope} from 'app/types';\n\nimport {FieldObject, JsonFormObject} from './type';\n\ntype Props = {\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n\n  access?: Set<Scope>;\n  features?: Record<string, any>;\n\n  additionalFieldProps: {[key: string]: any};\n\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n};\n\nexport default class FormPanel extends React.Component<Props> {\n  render() {\n    const {\n      title,\n      fields,\n      access,\n      disabled,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      ...otherProps\n    } = this.props;\n\n    return (\n      <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n        {title && <PanelHeader>{title}</PanelHeader>}\n        <PanelBody>\n          {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n          {fields.map(field => {\n            if (typeof field === 'function') {\n              return field();\n            }\n\n            const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n            // Allow the form panel disabled prop to override the fields\n            // disabled prop, with fallback to the fields disabled state.\n            if (disabled === true) {\n              fieldWithoutDefaultValue.disabled = true;\n              fieldWithoutDefaultValue.disabledReason = undefined;\n            }\n\n            return (\n              <FieldFromConfig\n                access={access}\n                disabled={disabled}\n                key={field.name}\n                {...otherProps}\n                {...additionalFieldProps}\n                field={fieldWithoutDefaultValue}\n                highlighted={this.props.highlighted === `#${field.name}`}\n              />\n            );\n          })}\n          {typeof renderFooter === 'function' && renderFooter({title, fields})}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import {Box} from 'reflexbox';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport scrollToElement from 'scroll-to-element';\nimport {Location} from 'history';\nimport * as Sentry from '@sentry/react';\n\nimport {defined} from 'app/utils';\nimport {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';\n\nimport {Field, FieldObject, JsonFormObject} from './type';\nimport FieldFromConfig from './fieldFromConfig';\nimport FormPanel from './formPanel';\n\ntype DefaultProps = {\n  additionalFieldProps: {[key: string]: any};\n};\n\ntype Props = {\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n  location?: Location;\n} & DefaultProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype Context = {\n  location?: Location;\n};\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends React.Component<Props, State> {\n  static propTypes = {\n    /**\n     * Fields that are grouped by \"section\"\n     */\n    forms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        fields: PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n        ),\n      })\n    ),\n\n    /**\n     * If `forms` is not defined, `title` + `fields` must be required.\n     * Allows more fine grain control of title/fields\n     */\n    fields: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])\n    ),\n    /**\n     * Panel title if `forms` is not defined\n     */\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    access: PropTypes.object,\n    features: PropTypes.object,\n    renderFooter: PropTypes.func,\n    /**\n     * Renders inside of PanelBody\n     */\n    renderHeader: PropTypes.func,\n    /**\n     * Disables the entire form\n     */\n    disabled: PropTypes.bool,\n  };\n\n  static contextTypes = {\n    location: PropTypes.object,\n  };\n\n  static defaultProps: DefaultProps = {\n    additionalFieldProps: {},\n  };\n\n  state: State = {\n    highlighted: getLocation(this.props, this.context).hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (\n      getLocation(this.props, this.context).hash !==\n      getLocation(nextProps, this.context).hash\n    ) {\n      const hash = getLocation(nextProps, this.context).hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    const hash = toHash || getLocation(this.props, this.context).hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n    };\n\n    return (\n      <Box {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <React.Fragment key={i}>\n              {this.renderForm({formPanelProps, ...formGroup})}\n            </React.Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </Box>\n    );\n  }\n}\n\nexport default JsonForm;\n\nfunction getLocation(props: Props, context: Context): Location | {hash?: string} {\n  return props.location || context.location || {};\n}\n","import {browserHistory} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {openModal} from 'app/actionCreators/modal';\nimport {t, tct} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport Form from 'app/views/settings/components/forms/form';\nimport FormModel from 'app/views/settings/components/forms/model';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport RadioGroup from 'app/views/settings/components/forms/controls/radioGroup';\nimport SentryTypes from 'app/sentryTypes';\nimport space from 'app/styles/space';\n\nconst userEditForm = {\n  title: 'User details',\n  fields: [\n    {\n      name: 'name',\n      type: 'string',\n      required: true,\n      label: t('Name'),\n    },\n    {\n      name: 'username',\n      type: 'string',\n      required: true,\n      label: t('Username'),\n      help: t('The username is the unique id of the user in the system'),\n    },\n    {\n      name: 'email',\n      type: 'string',\n      required: true,\n      label: t('Email'),\n      help: t('The users primary email address'),\n    },\n    {\n      name: 'isActive',\n      type: 'boolean',\n      required: true,\n      label: t('Active'),\n      help: t(\n        'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.'\n      ),\n    },\n    {\n      name: 'isStaff',\n      type: 'boolean',\n      required: true,\n      label: t('Admin'),\n      help: t('Designates whether this user can perform administrative functions.'),\n    },\n    {\n      name: 'isSuperuser',\n      type: 'boolean',\n      required: true,\n      label: t('Superuser'),\n      help: t(\n        'Designates whether this user has all permissions without explicitly assigning them.'\n      ),\n    },\n  ],\n};\n\nconst REMOVE_BUTTON_LABEL = {\n  disable: t('Disable User'),\n  delete: t('Permanently Delete User'),\n};\n\nclass RemoveUserModal extends React.Component {\n  static propTypes = {\n    user: SentryTypes.User,\n    onRemove: PropTypes.func,\n    closeModal: PropTypes.func,\n  };\n\n  state = {\n    deleteType: 'disable',\n  };\n\n  onRemove = () => {\n    this.props.onRemove(this.state.deleteType);\n    this.props.closeModal();\n  };\n\n  render() {\n    const {user} = this.props;\n    const {deleteType} = this.state;\n\n    return (\n      <React.Fragment>\n        <p>{tct('Removing user [user]', {user: <strong>{user.email}</strong>})}</p>\n        <RadioGroup\n          value={deleteType}\n          onChange={type => this.setState({deleteType: type})}\n          choices={[\n            ['disable', t('Disable the account.')],\n            ['delete', t('Permanently remove the user and their data.')],\n          ]}\n        />\n        <ModalFooter>\n          <Button priority=\"danger\" onClick={this.onRemove}>\n            {REMOVE_BUTTON_LABEL[deleteType]}\n          </Button>\n          <Button onClick={this.props.closeModal}>{t('Nevermind')}</Button>\n        </ModalFooter>\n      </React.Fragment>\n    );\n  }\n}\n\nclass AdminUserEdit extends AsyncView {\n  get userEndpoint() {\n    const {params} = this.props;\n    return `/users/${params.id}/`;\n  }\n\n  getEndpoints() {\n    return [['user', this.userEndpoint]];\n  }\n\n  async deleteUser() {\n    await this.api.requestPromise(this.userEndpoint, {\n      method: 'DELETE',\n      data: {hardDelete: true, organizations: []},\n    });\n\n    addSuccessMessage(t(\"%s's account has been deleted.\", this.state.user.email));\n    browserHistory.replace('/manage/users/');\n  }\n\n  async deactivateUser() {\n    const response = await this.api.requestPromise(this.userEndpoint, {\n      method: 'PUT',\n      data: {isActive: false},\n    });\n\n    this.setState({user: response});\n    this.formModel.setInitialData(response);\n    addSuccessMessage(t(\"%s's account has been deactivated.\", response.email));\n  }\n\n  removeUser = actionTypes =>\n    actionTypes === 'delete' ? this.deleteUser() : this.deactivateUser();\n\n  formModel = new FormModel();\n\n  renderBody() {\n    const {user} = this.state;\n    const openDeleteModal = () =>\n      openModal(opts => (\n        <RemoveUserModal user={user} onRemove={this.removeUser} {...opts} />\n      ));\n\n    return (\n      <React.Fragment>\n        <h3>{t('Users')}</h3>\n        <p>{t('Editing user: %s', user.email)}</p>\n        <Form\n          model={this.formModel}\n          initialData={user}\n          apiMethod=\"PUT\"\n          apiEndpoint={this.userEndpoint}\n          requireChanges\n          onSubmitError={addErrorMessage}\n          onSubmitSuccess={data => {\n            this.setState({user: data});\n            addSuccessMessage('User account updated.');\n          }}\n          extraButton={\n            <Button\n              type=\"button\"\n              onClick={openDeleteModal}\n              style={{marginLeft: space(1)}}\n              priority=\"danger\"\n            >\n              {t('Remove User')}\n            </Button>\n          }\n        >\n          <JsonForm forms={[userEditForm]} />\n        </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nconst ModalFooter = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n  justify-content: end;\n  padding: 20px 30px;\n  margin: 20px -30px -30px;\n  border-top: 1px solid ${p => p.theme.border};\n`;\n\nexport default AdminUserEdit;\n"],"sourceRoot":""}