{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/components/issues/snoozeAction.tsx","webpack:///./app/components/issues/compactIssue.jsx","webpack:///./app/views/userFeedback/utils.tsx","webpack:///./app/views/userFeedback/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SnoozeTimes","SnoozeAction","state","isModalOpen","toggleModal","props","disabled","setState","closeModal","onSnooze","duration","Fragment","tooltip","className","onClick","t","show","animation","onHide","bsSize","bind","THIRTY_MINUTES","TWO_HOURS","TWENTY_FOUR_HOURS","undefined","type","React","Component","CompactIssueHeader","data","organization","projectId","eventId","basePath","slug","issueLink","id","commentColor","subscriptionDetails","reason","IssueHeaderMetaWrapper","StyledErrorLevel","size","level","IconLink","to","status","isBookmarked","isSolid","project","numComments","color","getMessage","CompactIssue","createReactClass","displayName","mixins","Reflux","listenTo","GroupStore","getInitialState","issue","get","componentWillReceiveProps","nextProps","onGroupChange","itemIds","has","ignoreDuration","onUpdate","addLoadingMessage","api","bulkUpdate","orgId","complete","clearIndicators","render","hasSeen","statsPeriod","toggleSelect","flexDirection","style","paddingTop","paddingBottom","showActions","topLevelClasses","caret","groupId","children","withApi","withOrganization","ErrorLevel","space","Link","getQuery","search","query","qs","pick","Object","values","URL_PARAM","OrganizationUserFeedback","location","params","data-test-id","reportList","map","item","key","eventID","StyledEventUserFeedback","report","issueId","projectIds","renderBody","loading","length","renderResults","renderEmpty","pathname","reportListPageLinks","unresolvedQuery","omit","allIssuesQuery","Header","renderStreamBody","pageLinks","Array","isArray","withProfiler","EventUserFeedback"],"mappings":"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","file":"UserFeedback.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Modal from 'react-bootstrap/lib/Modal';\n\nimport {t} from 'app/locale';\n\nenum SnoozeTimes {\n  // all values in minutes\n  THIRTY_MINUTES = 30,\n  TWO_HOURS = 60 * 2,\n  TWENTY_FOUR_HOURS = 60 * 24,\n}\n\ntype SnoozeActionProps = {\n  disabled: boolean;\n  tooltip: string;\n  onSnooze: (duration: SnoozeTimes) => {};\n  className?: string;\n};\n\nclass SnoozeAction extends React.Component<SnoozeActionProps> {\n  static propTypes = {\n    disabled: PropTypes.bool,\n    onSnooze: PropTypes.func.isRequired,\n    tooltip: PropTypes.string,\n  };\n\n  state = {\n    isModalOpen: false,\n  };\n\n  toggleModal = () => {\n    if (this.props.disabled) {\n      return;\n    }\n    this.setState({\n      isModalOpen: !this.state.isModalOpen,\n    });\n  };\n\n  closeModal = () => {\n    this.setState({isModalOpen: false});\n  };\n\n  onSnooze = (duration: SnoozeTimes) => {\n    this.props.onSnooze(duration);\n    this.closeModal();\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <a\n          title={this.props.tooltip}\n          className={this.props.className}\n          onClick={this.toggleModal}\n        >\n          <span>{t('zZz')}</span>\n        </a>\n        <Modal\n          show={this.state.isModalOpen}\n          title={t('Please confirm')}\n          animation={false}\n          onHide={this.closeModal}\n          bsSize=\"sm\"\n        >\n          <div className=\"modal-body\">\n            <h5>{t('How long should we ignore this issue?')}</h5>\n            <ul className=\"nav nav-stacked nav-pills\">\n              <li>\n                <a onClick={this.onSnooze.bind(this, SnoozeTimes.THIRTY_MINUTES)}>\n                  {t('30 minutes')}\n                </a>\n              </li>\n              <li>\n                <a onClick={this.onSnooze.bind(this, SnoozeTimes.TWO_HOURS)}>\n                  {t('2 hours')}\n                </a>\n              </li>\n              <li>\n                <a onClick={this.onSnooze.bind(this, SnoozeTimes.TWENTY_FOUR_HOURS)}>\n                  {t('24 hours')}\n                </a>\n              </li>\n              {/* override click event object w/ undefined to indicate \"no duration\" */}\n              <li>\n                <a onClick={this.onSnooze.bind(this, undefined)}>{t('Forever')}</a>\n              </li>\n            </ul>\n          </div>\n          <div className=\"modal-footer\">\n            <button type=\"button\" className=\"btn btn-default\" onClick={this.closeModal}>\n              {t('Cancel')}\n            </button>\n          </div>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SnoozeAction;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\nimport styled from '@emotion/styled';\n\nimport {PanelItem} from 'app/components/panels';\nimport {addLoadingMessage, clearIndicators} from 'app/actionCreators/indicator';\nimport {IconChat, IconCheckmark, IconEllipsis, IconMute, IconStar} from 'app/icons';\nimport {t} from 'app/locale';\nimport DropdownLink from 'app/components/dropdownLink';\nimport ErrorLevel from 'app/components/events/errorLevel';\nimport GroupChart from 'app/components/stream/groupChart';\nimport GroupStore from 'app/stores/groupStore';\nimport Link from 'app/components/links/link';\nimport SentryTypes from 'app/sentryTypes';\nimport SnoozeAction from 'app/components/issues/snoozeAction';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport withOrganization from 'app/utils/withOrganization';\nimport {getMessage} from 'app/utils/events';\nimport EventOrGroupTitle from 'app/components/eventOrGroupTitle';\n\nclass CompactIssueHeader extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization.isRequired,\n    projectId: PropTypes.string,\n    eventId: PropTypes.string,\n    data: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {data, organization, projectId, eventId} = this.props;\n\n    const basePath = `/organizations/${organization.slug}/issues/`;\n\n    const issueLink = eventId\n      ? `/organizations/${organization.slug}/projects/${projectId}/events/${eventId}/`\n      : `${basePath}${data.id}/`;\n\n    const commentColor =\n      data.subscriptionDetails && data.subscriptionDetails.reason === 'mentioned'\n        ? 'green300'\n        : 'currentColor';\n\n    return (\n      <React.Fragment>\n        <IssueHeaderMetaWrapper>\n          <StyledErrorLevel size=\"12px\" level={data.level} title={data.level} />\n          <h3 className=\"truncate\">\n            <IconLink to={issueLink || ''}>\n              {data.status === 'ignored' && <IconMute size=\"xs\" />}\n              {data.isBookmarked && <IconStar isSolid size=\"xs\" />}\n              <EventOrGroupTitle data={data} />\n            </IconLink>\n          </h3>\n        </IssueHeaderMetaWrapper>\n        <div className=\"event-extra\">\n          <span className=\"project-name\">\n            <strong>{data.project.slug}</strong>\n          </span>\n          {data.numComments !== 0 && (\n            <span>\n              <IconLink to={`${basePath}${data.id}/activity/`} className=\"comments\">\n                <IconChat size=\"xs\" color={commentColor} />\n                <span className=\"tag-count\">{data.numComments}</span>\n              </IconLink>\n            </span>\n          )}\n          <span className=\"culprit\">{getMessage(data)}</span>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst CompactIssue = createReactClass({\n  displayName: 'CompactIssue',\n\n  propTypes: {\n    api: PropTypes.object,\n    data: PropTypes.object,\n    id: PropTypes.string,\n    eventId: PropTypes.string,\n    statsPeriod: PropTypes.string,\n    showActions: PropTypes.bool,\n    organization: SentryTypes.Organization.isRequired,\n  },\n\n  mixins: [Reflux.listenTo(GroupStore, 'onGroupChange')],\n\n  getInitialState() {\n    return {\n      issue: this.props.data || GroupStore.get(this.props.id),\n    };\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.id !== this.props.id) {\n      this.setState({\n        issue: GroupStore.get(this.props.id),\n      });\n    }\n  },\n\n  onGroupChange(itemIds) {\n    if (!itemIds.has(this.props.id)) {\n      return;\n    }\n    const id = this.props.id;\n    const issue = GroupStore.get(id);\n    this.setState({\n      issue,\n    });\n  },\n\n  onSnooze(duration) {\n    const data = {\n      status: 'ignored',\n    };\n\n    if (duration) {\n      data.ignoreDuration = duration;\n    }\n\n    this.onUpdate(data);\n  },\n\n  onUpdate(data) {\n    const issue = this.state.issue;\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.props.api.bulkUpdate(\n      {\n        orgId: this.props.organization.slug,\n        projectId: issue.project.slug,\n        itemIds: [issue.id],\n        data,\n      },\n      {\n        complete: () => {\n          clearIndicators();\n        },\n      }\n    );\n  },\n\n  render() {\n    const issue = this.state.issue;\n    const {id, organization} = this.props;\n\n    let className = 'issue';\n    if (issue.isBookmarked) {\n      className += ' isBookmarked';\n    }\n    if (issue.hasSeen) {\n      className += ' hasSeen';\n    }\n    if (issue.status === 'resolved') {\n      className += ' isResolved';\n    }\n    if (issue.status === 'ignored') {\n      className += ' isIgnored';\n    }\n\n    if (this.props.statsPeriod) {\n      className += ' with-graph';\n    }\n\n    return (\n      <PanelItem\n        className={className}\n        onClick={this.toggleSelect}\n        flexDirection=\"column\"\n        style={{paddingTop: '12px', paddingBottom: '6px'}}\n      >\n        <CompactIssueHeader\n          data={issue}\n          organization={organization}\n          projectId={issue.project.slug}\n          eventId={this.props.eventId}\n        />\n        {this.props.statsPeriod && (\n          <div className=\"event-graph\">\n            <GroupChart\n              id={id}\n              statsPeriod={this.props.statsPeriod}\n              data={this.props.data}\n            />\n          </div>\n        )}\n        {this.props.showActions && (\n          <div className=\"more-menu-container align-right\">\n            <DropdownLink\n              topLevelClasses=\"more-menu\"\n              className=\"more-menu-toggle\"\n              caret={false}\n              title={<IconEllipsis size=\"xs\" />}\n            >\n              <li>\n                <IconLink\n                  onClick={this.onUpdate.bind(this, {\n                    status: issue.status !== 'resolved' ? 'resolved' : 'unresolved',\n                  })}\n                >\n                  <IconCheckmark size=\"xs\" />\n                </IconLink>\n              </li>\n              <li>\n                <IconLink\n                  onClick={this.onUpdate.bind(this, {isBookmarked: !issue.isBookmarked})}\n                >\n                  <IconStar isSolid size=\"xs\" />\n                </IconLink>\n              </li>\n              <li>\n                <SnoozeAction\n                  orgId={organization.slug}\n                  groupId={id}\n                  onSnooze={this.onSnooze}\n                />\n              </li>\n            </DropdownLink>\n          </div>\n        )}\n        {this.props.children}\n      </PanelItem>\n    );\n  },\n});\n\nexport {CompactIssue};\nexport default withApi(withOrganization(CompactIssue));\n\nconst IssueHeaderMetaWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledErrorLevel = styled(ErrorLevel)`\n  display: block;\n  margin-right: ${space(1)};\n`;\n\nconst IconLink = styled(Link)`\n  & > svg {\n    margin-right: ${space(0.5)};\n  }\n`;\n","import pick from 'lodash/pick';\nimport * as qs from 'query-string';\n\nimport {URL_PARAM} from 'app/constants/globalSelectionHeader';\n\nconst DEFAULT_STATUS = 'unresolved';\n\n/**\n * Get query for API given the current location.search string\n */\nexport function getQuery(search: string) {\n  const query = qs.parse(search);\n\n  const status = typeof query.status !== 'undefined' ? query.status : DEFAULT_STATUS;\n\n  const queryParams = {\n    status,\n    ...pick(query, ['cursor', ...Object.values(URL_PARAM)]),\n  };\n\n  return queryParams;\n}\n","import {Link} from 'react-router';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\nimport omit from 'lodash/omit';\nimport styled from '@emotion/styled';\nimport {withProfiler} from '@sentry/react';\n\nimport {Organization, UserReport} from 'app/types';\nimport {PageContent} from 'app/styles/organization';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport CompactIssue from 'app/components/issues/compactIssue';\nimport EventUserFeedback from 'app/components/events/userFeedback';\nimport GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';\nimport LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport PageHeading from 'app/components/pageHeading';\nimport Pagination from 'app/components/pagination';\nimport space from 'app/styles/space';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport {getQuery} from './utils';\nimport UserFeedbackEmpty from './userFeedbackEmpty';\n\ntype State = AsyncView['state'] & {\n  reportList: UserReport[];\n};\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n};\n\nclass OrganizationUserFeedback extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {\n      organization,\n      location: {search},\n    } = this.props;\n\n    return [\n      [\n        'reportList',\n        `/organizations/${organization.slug}/user-feedback/`,\n        {\n          query: getQuery(search),\n        },\n      ],\n    ];\n  }\n\n  getTitle() {\n    return `${t('User Feedback')} - ${this.props.organization.slug}`;\n  }\n\n  get projectIds() {\n    const {project} = this.props.location.query;\n\n    return Array.isArray(project)\n      ? project\n      : typeof project === 'string'\n      ? [project]\n      : [];\n  }\n\n  renderResults() {\n    const {orgId} = this.props.params;\n\n    return (\n      <div data-test-id=\"user-feedback-list\">\n        {this.state.reportList.map(item => {\n          const issue = item.issue;\n          return (\n            <CompactIssue key={item.id} id={issue.id} data={issue} eventId={item.eventID}>\n              <StyledEventUserFeedback report={item} orgId={orgId} issueId={issue.id} />\n            </CompactIssue>\n          );\n        })}\n      </div>\n    );\n  }\n\n  renderEmpty() {\n    return <UserFeedbackEmpty projectIds={this.projectIds} />;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderStreamBody() {\n    const {loading, reportList} = this.state;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!reportList.length) {\n      return this.renderEmpty();\n    }\n\n    return this.renderResults();\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const {location} = this.props;\n    const {pathname, search, query} = location;\n    const {status} = getQuery(search);\n    const {reportListPageLinks} = this.state;\n\n    const unresolvedQuery = omit(query, 'status');\n    const allIssuesQuery = {...query, status: ''};\n\n    return (\n      <GlobalSelectionHeader>\n        <PageContent>\n          <LightWeightNoProjectMessage organization={organization}>\n            <div data-test-id=\"user-feedback\">\n              <Header>\n                <PageHeading>{t('User Feedback')}</PageHeading>\n                <div className=\"btn-group\">\n                  <Link\n                    to={{pathname, query: unresolvedQuery}}\n                    className={\n                      'btn btn-sm btn-default' +\n                      (status === 'unresolved' ? ' active' : '')\n                    }\n                  >\n                    {t('Unresolved')}\n                  </Link>\n                  <Link\n                    to={{pathname, query: allIssuesQuery}}\n                    className={\n                      'btn btn-sm btn-default' + (status === '' ? ' active' : '')\n                    }\n                  >\n                    {t('All Issues')}\n                  </Link>\n                </div>\n              </Header>\n              <Panel>\n                <PanelBody className=\"issue-list\">{this.renderStreamBody()}</PanelBody>\n              </Panel>\n              <Pagination pageLinks={reportListPageLinks} />\n            </div>\n          </LightWeightNoProjectMessage>\n        </PageContent>\n      </GlobalSelectionHeader>\n    );\n  }\n}\n\nexport default withOrganization(withProfiler(OrganizationUserFeedback));\n\nconst Header = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledEventUserFeedback = styled(EventUserFeedback)`\n  margin: ${space(2)} 0 0;\n`;\n"],"sourceRoot":""}