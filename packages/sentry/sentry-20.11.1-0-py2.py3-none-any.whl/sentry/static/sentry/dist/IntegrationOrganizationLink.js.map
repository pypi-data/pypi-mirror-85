{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/integrationOrganizationLink.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","IntegrationOrganizationLink","trackIntegrationEvent","options","startSession","state","organization","provider","integration_type","integration","key","already_installed","view","getOrgBySlug","orgSlug","organizations","find","org","slug","onSelectOrg","a","value","setState","selectedOrgSlug","reloading","undefined","Promise","all","api","requestPromise","integrationSlug","providers","length","Error","trackOpened","addErrorMessage","t","hasAccess","access","includes","customOption","orgProps","Option","avatarSize","displayName","name","avatarProps","consistentWidth","customValueContainer","containerProps","valueList","getValue","ValueContainer","eventKey","eventName","onClick","featuresComponents","metadata","features","map","f","featureGate","description","FeatureListItem","dangerouslySetInnerHTML","__html","singleLineRenderer","IntegrationDirectoryFeatures","getIntegrationFeatureGate","disabled","ButtonWrapper","priority","props","params","installationId","renderAddButton","query","queryParams","trackInstallationStart","window","location","assign","urlEncode","FeatureList","Fragment","type","icon","size","tct","InstallLink","href","className","renderAddButtonContainer","label","integation","inline","stacked","required","onChange","placeholder","components","renderBottom"],"mappings":"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","file":"IntegrationOrganizationLink.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport {urlEncode} from '@sentry/utils';\nimport {components} from 'react-select';\n\nimport {Organization, IntegrationProvider} from 'app/types';\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {t, tct} from 'app/locale';\nimport {\n  trackIntegrationEvent,\n  getIntegrationFeatureGate,\n  SingleIntegrationEvent,\n} from 'app/utils/integrationUtil';\nimport {singleLineRenderer} from 'app/utils/marked';\nimport Alert from 'app/components/alert';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport Field from 'app/views/settings/components/forms/field';\nimport NarrowLayout from 'app/components/narrowLayout';\nimport SelectControl from 'app/components/forms/selectControl';\nimport IdBadge from 'app/components/idBadge';\nimport {IconFlag} from 'app/icons';\nimport LoadingIndicator from 'app/components/loadingIndicator';\n\n//installationId present for Github flow\ntype Props = RouteComponentProps<{integrationSlug: string; installationId?: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  selectedOrgSlug?: string;\n  organization?: Organization;\n  provider?: IntegrationProvider;\n};\n\nexport default class IntegrationOrganizationLink extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['organizations', '/organizations/']];\n  }\n\n  getTitle() {\n    return t('Choose Installation Organization');\n  }\n\n  trackIntegrationEvent = (\n    options: Pick<SingleIntegrationEvent, 'eventKey' | 'eventName'>,\n    startSession?: boolean\n  ) => {\n    const {organization, provider} = this.state;\n    //should have these set but need to make TS happy\n    if (!organization || !provider) {\n      return;\n    }\n\n    trackIntegrationEvent(\n      {\n        ...options,\n        integration_type: 'first_party',\n        integration: provider.key,\n        //We actually don't know if it's installed but neither does the user in the view and multiple installs is possible\n        already_installed: false,\n        view: 'external_install',\n      },\n      organization,\n      {startSession: !!startSession}\n    );\n  };\n\n  trackOpened() {\n    this.trackIntegrationEvent(\n      {\n        eventKey: 'integrations.integration_viewed',\n        eventName: 'Integrations: Integration Viewed',\n      },\n      true\n    );\n  }\n\n  trackInstallationStart() {\n    this.trackIntegrationEvent({\n      eventKey: 'integrations.installation_start',\n      eventName: 'Integrations: Installation Start',\n    });\n  }\n\n  get integrationSlug() {\n    return this.props.params.integrationSlug;\n  }\n\n  get queryParams() {\n    return this.props.location.query;\n  }\n\n  getOrgBySlug = (orgSlug: string): Organization | undefined => {\n    return this.state.organizations.find((org: Organization) => org.slug === orgSlug);\n  };\n\n  onLoadAllEndpointsSuccess() {\n    //auto select the org if there is only one\n    const {organizations} = this.state;\n    if (organizations.length === 1) {\n      this.onSelectOrg({value: organizations[0].slug});\n    }\n  }\n\n  onSelectOrg = async ({value: orgSlug}: {value: string}) => {\n    this.setState({selectedOrgSlug: orgSlug, reloading: true, organization: undefined});\n\n    try {\n      const [organization, {providers}]: [\n        Organization,\n        {providers: IntegrationProvider[]}\n      ] = await Promise.all([\n        this.api.requestPromise(`/organizations/${orgSlug}/`),\n        this.api.requestPromise(\n          `/organizations/${orgSlug}/config/integrations/?provider_key=${this.integrationSlug}`\n        ),\n      ]);\n      // should never happen with a valid provider\n      if (providers.length === 0) {\n        throw new Error('Invalid provider');\n      }\n      this.setState(\n        {organization, reloading: false, provider: providers[0]},\n        this.trackOpened\n      );\n    } catch (_err) {\n      addErrorMessage(t('Failed to retrieve organization or integration details'));\n      this.setState({reloading: false});\n    }\n  };\n\n  hasAccess = () => {\n    const {organization} = this.state;\n    return organization?.access.includes('org:integrations');\n  };\n\n  renderAddButton(onClick: React.ComponentProps<typeof Button>['onClick']) {\n    const {organization, provider} = this.state;\n    // should never happen but we need this check for TS\n    if (!provider || !organization) {\n      return null;\n    }\n    const {features} = provider.metadata;\n\n    // Prepare the features list\n    const featuresComponents = features.map(f => ({\n      featureGate: f.featureGate,\n      description: (\n        <FeatureListItem\n          dangerouslySetInnerHTML={{__html: singleLineRenderer(f.description)}}\n        />\n      ),\n    }));\n\n    const {IntegrationDirectoryFeatures} = getIntegrationFeatureGate();\n\n    return (\n      <IntegrationDirectoryFeatures\n        organization={organization}\n        features={featuresComponents}\n      >\n        {({disabled}) => (\n          <ButtonWrapper>\n            <Button\n              priority=\"primary\"\n              disabled={!this.hasAccess() || disabled}\n              onClick={onClick}\n            >\n              {t('Install %s', provider.name)}\n            </Button>\n          </ButtonWrapper>\n        )}\n      </IntegrationDirectoryFeatures>\n    );\n  }\n\n  renderAddButtonContainer() {\n    // TOOD: Implement for Github\n    if (this.props.params.installationId) {\n      throw new Error('Not implemented yet');\n    }\n    return this.renderAddButton(() => {\n      // add the selected org to the query parameters and then redirect back to configure\n      const {selectedOrgSlug} = this.state;\n      const query = {orgSlug: selectedOrgSlug, ...this.queryParams};\n      this.trackInstallationStart();\n      window.location.assign(\n        `/extensions/${this.integrationSlug}/configure/?${urlEncode(query)}`\n      );\n    });\n  }\n\n  customOption = orgProps => {\n    const organization = this.getOrgBySlug(orgProps.value);\n    if (!organization) {\n      return null;\n    }\n    return (\n      <components.Option {...orgProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.Option>\n    );\n  };\n\n  customValueContainer = containerProps => {\n    const valueList = containerProps.getValue();\n    //if no value set, we want to return the default component that is rendered\n    if (valueList.length === 0) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    const orgSlug = valueList[0].value;\n    const organization = this.getOrgBySlug(orgSlug);\n    if (!organization) {\n      return <components.ValueContainer {...containerProps} />;\n    }\n    return (\n      <components.ValueContainer {...containerProps}>\n        <IdBadge\n          organization={organization}\n          avatarSize={20}\n          displayName={organization.name}\n          avatarProps={{consistentWidth: true}}\n        />\n      </components.ValueContainer>\n    );\n  };\n\n  renderBottom() {\n    const {organization, selectedOrgSlug, provider, reloading} = this.state;\n    const {FeatureList} = getIntegrationFeatureGate();\n    if (reloading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <React.Fragment>\n        {selectedOrgSlug && organization && !this.hasAccess() && (\n          <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n            <p>\n              {tct(\n                `You do not have permission to install integrations in\n                [organization]. Ask an organization owner or manager to\n                visit this page to finish installing this integration.`,\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <InstallLink>{window.location.href}</InstallLink>\n          </Alert>\n        )}\n\n        {provider && organization && this.hasAccess() && FeatureList && (\n          <React.Fragment>\n            <p>\n              {tct(\n                'The following features will be available for [organization] when installed.',\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <FeatureList\n              organization={organization}\n              features={provider.metadata.features}\n              provider={provider}\n            />\n          </React.Fragment>\n        )}\n\n        <div className=\"form-actions\">{this.renderAddButtonContainer()}</div>\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {selectedOrgSlug} = this.state;\n    const options = this.state.organizations.map((org: Organization) => ({\n      value: org.slug,\n      label: org.name,\n    }));\n\n    return (\n      <NarrowLayout>\n        <h3>{t('Finish integration installation')}</h3>\n        <p>\n          {tct(\n            `Please pick a specific [organization:organization] to link with\n            your integration installation of [integation].`,\n            {\n              organization: <strong />,\n              integation: <strong>{this.integrationSlug}</strong>,\n            }\n          )}\n        </p>\n\n        <Field label={t('Organization')} inline={false} stacked required>\n          <SelectControl\n            onChange={this.onSelectOrg}\n            value={selectedOrgSlug}\n            placeholder={t('Select an organization')}\n            options={options}\n            components={{\n              Option: this.customOption,\n              ValueContainer: this.customValueContainer,\n            }}\n          />\n        </Field>\n        {this.renderBottom()}\n      </NarrowLayout>\n    );\n  }\n}\n\nconst InstallLink = styled('pre')`\n  margin-bottom: 0;\n  background: #fbe3e1;\n`;\n\nconst FeatureListItem = styled('span')`\n  line-height: 24px;\n`;\n\nconst ButtonWrapper = styled('div')`\n  margin-left: auto;\n  align-self: center;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n"],"sourceRoot":""}