{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/forms/textCopyInput.jsx","webpack:///./app/views/settings/components/forms/textField.tsx","webpack:///./app/views/settings/components/forms/numberField.tsx","webpack:///./app/views/monitors/monitorModel.jsx","webpack:///./app/views/monitors/monitorForm.jsx","webpack:///./app/views/monitors/edit.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","Wrapper","StyledInput","inputStyles","p","theme","backgroundSecondary","rtl","OverflowContainer","StyledCopyButton","Button","TextCopyInput","props","handleCopyClick","e","textRef","current","onCopy","handleSelectText","children","stopPropagation","node","ReactDOM","findDOMNode","setSelectionRange","value","length","selectText","React","createRef","style","inputValue","readOnly","ref","onClick","hideUnsupported","type","size","Component","defaultProps","TextField","NumberField","MonitorModel","Object","entries","fields","toJSON","reduce","data","k","v","indexOf","config","Array","isArray","schedule","parseInt","substr","id","getValue","FormModel","SCHEDULE_TYPES","MONITOR_TYPES","INTERVALS","MonitorForm","args","form","rv","schedule_type","checkin_margin","max_runtime","monitor","selectedProjectId","selection","projects","selectedProject","organization","find","access","hasAccess","allowUndo","requireChanges","apiEndpoint","apiMethod","model","initialData","name","project","slug","formDataFromConfig","onSubmitSuccess","t","label","className","disabled","choices","filter","isMember","map","required","placeholder","Fragment","help","tct","link","href","deprecatedSelectControl","withGlobalSelection","withOrganization","EditMonitor","onUpdate","setState","state","browserHistory","push","params","orgId","monitorId"],"mappings":"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","file":"MonitorEdit.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from '@emotion/styled';\n\nimport {inputStyles} from 'app/styles/input';\nimport {selectText} from 'app/utils/selectText';\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport {IconCopy} from 'app/icons';\n\nconst Wrapper = styled('div')`\n  display: flex;\n`;\n\nconst StyledInput = styled('input')`\n  ${inputStyles};\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-right-width: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  direction: ${p => (p.rtl ? 'rtl' : 'ltr')};\n\n  &:hover,\n  &:focus {\n    background-color: ${p => p.theme.backgroundSecondary};\n    border-right-width: 0;\n  }\n`;\n\nconst OverflowContainer = styled('div')`\n  flex-grow: 1;\n  border: none;\n`;\n\nconst StyledCopyButton = styled(Button)`\n  flex-shrink: 1;\n  border-radius: 0 0.25em 0.25em 0;\n  box-shadow: none;\n`;\n\nclass TextCopyInput extends React.Component {\n  static propTypes = {\n    /**\n     * Text to copy\n     */\n    children: PropTypes.string.isRequired,\n    /**\n     * CSS style object\n     */\n    style: PropTypes.object,\n    onCopy: PropTypes.func,\n    /**\n     * Always show the ending of a long overflowing text in input\n     */\n    rtl: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    onCopy: () => {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.textRef = React.createRef();\n  }\n\n  // Select text when copy button is clicked\n  handleCopyClick = e => {\n    if (!this.textRef.current) {\n      return;\n    }\n\n    const {onCopy} = this.props;\n\n    this.handleSelectText();\n\n    onCopy(this.props.children, e);\n\n    e.stopPropagation();\n  };\n\n  handleSelectText = () => {\n    const {rtl} = this.props;\n\n    if (!this.textRef.current) {\n      return;\n    }\n\n    // We use findDOMNode here because `this.textRef` is not a dom node,\n    // it's a ref to AutoSelectText\n    const node = ReactDOM.findDOMNode(this.textRef.current); // eslint-disable-line react/no-find-dom-node\n\n    if (rtl) {\n      // we don't want to select the first character - \\u202A, nor the last - \\u202C\n      node.setSelectionRange(1, node.value.length - 1);\n    } else {\n      selectText(node);\n    }\n  };\n\n  render() {\n    const {style, children, rtl} = this.props;\n\n    /**\n     * We are using direction: rtl; to always show the ending of a long overflowing text in input.\n     *\n     * This however means that the trailing characters with BiDi class O.N. ('Other Neutrals') goes to the other side.\n     * Hello! becomes !Hello and vice versa. This is a problem for us when we want to show path in this component, because\n     * /user/local/bin becomes user/local/bin/. Wrapping in unicode characters for left-to-righ embedding solves this,\n     * however we need to be aware of them when selecting the text - we are solving that by offseting the selectionRange.\n     */\n    const inputValue = rtl ? '\\u202A' + children + '\\u202C' : children;\n\n    return (\n      <Wrapper>\n        <OverflowContainer>\n          <StyledInput\n            readOnly\n            ref={this.textRef}\n            style={style}\n            value={inputValue}\n            onClick={this.handleSelectText}\n            rtl={rtl}\n          />\n        </OverflowContainer>\n        <Clipboard hideUnsupported onClick={this.handleCopyClick} value={children}>\n          <StyledCopyButton type=\"button\" size=\"xsmall\" onClick={this.handleCopyClick}>\n            <IconCopy />\n          </StyledCopyButton>\n        </Clipboard>\n      </Wrapper>\n    );\n  }\n}\n\nexport default TextCopyInput;\n","import React from 'react';\n\nimport InputField from 'app/views/settings/components/forms/inputField';\n\ntype Props = InputField['props'];\n\nexport default function TextField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"text\" />;\n}\n\nTextField.propTypes = {...InputField.propTypes};\n","import React from 'react';\n\nimport InputField from './inputField';\n\ntype Props = InputField['props'];\n\nexport default function NumberField(props: Omit<Props, 'type'>) {\n  return <InputField {...props} type=\"number\" />;\n}\n","import FormModel from 'app/views/settings/components/forms/model';\n\nexport default class MonitorModel extends FormModel {\n  getTransformedData() {\n    return Object.entries(this.fields.toJSON()).reduce((data, [k, v]) => {\n      if (k.indexOf('config.') === 0) {\n        if (!data.config) {\n          data.config = {};\n        }\n        if (k === 'config.schedule.frequency' || k === 'config.schedule.interval') {\n          if (!Array.isArray(data.config.schedule)) {\n            data.config.schedule = [null, null];\n          }\n        }\n\n        if (k === 'config.schedule.frequency') {\n          data.config.schedule[0] = parseInt(v, 10);\n        } else if (k === 'config.schedule.interval') {\n          data.config.schedule[1] = v;\n        } else {\n          data.config[k.substr(7)] = v;\n        }\n      } else {\n        data[k] = v;\n      }\n      return data;\n    }, {});\n  }\n\n  getTransformedValue(id) {\n    if (id.indexOf('config') === 0) {\n      return this.getValue(id);\n    }\n    return super.getTransformedValue(id);\n  }\n}\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Observer} from 'mobx-react';\n\nimport Access from 'app/components/acl/access';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport NumberField from 'app/views/settings/components/forms/numberField';\nimport SelectField from 'app/views/settings/components/forms/selectField';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport TextField from 'app/views/settings/components/forms/textField';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport SentryTypes from 'app/sentryTypes';\nimport {t, tct} from 'app/locale';\nimport withGlobalSelection from 'app/utils/withGlobalSelection';\nimport withOrganization from 'app/utils/withOrganization';\n\nimport MonitorModel from './monitorModel';\n\nconst SCHEDULE_TYPES = [\n  ['crontab', 'Crontab'],\n  ['interval', 'Interval'],\n];\n\nconst MONITOR_TYPES = [['cron_job', 'Cron Job']];\n\nconst INTERVALS = [\n  ['minute', 'minute(s)'],\n  ['hour', 'hour(s)'],\n  ['day', 'day(s)'],\n  ['week', 'week(s)'],\n  ['month', 'month(s)'],\n  ['year', 'year(s)'],\n];\n\nclass MonitorForm extends Component {\n  static propTypes = {\n    monitor: SentryTypes.Monitor,\n    organization: SentryTypes.Organization.isRequired,\n    selection: SentryTypes.GlobalSelection,\n    apiEndpoint: PropTypes.string.isRequired,\n    apiMethod: PropTypes.string.isRequired,\n    onSubmitSuccess: PropTypes.func.isRequired,\n  };\n\n  constructor(...args) {\n    super(...args);\n    this.form = new MonitorModel();\n  }\n\n  formDataFromConfig(type, config) {\n    const rv = {};\n    switch (type) {\n      case 'cron_job':\n        rv['config.schedule_type'] = config.schedule_type;\n        rv['config.checkin_margin'] = config.checkin_margin;\n        rv['config.max_runtime'] = config.max_runtime;\n\n        switch (config.schedule_type) {\n          case 'interval':\n            rv['config.schedule.frequency'] = config.schedule[0];\n            rv['config.schedule.interval'] = config.schedule[1];\n            break;\n          case 'crontab':\n          default:\n            rv['config.schedule'] = config.schedule;\n        }\n        break;\n      default:\n    }\n    return rv;\n  }\n\n  render() {\n    const {monitor} = this.props;\n    const selectedProjectId = this.props.selection.projects[0];\n    const selectedProject = selectedProjectId\n      ? this.props.organization.projects.find(p => p.id === selectedProjectId + '')\n      : null;\n    return (\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <Form\n            allowUndo\n            requireChanges\n            apiEndpoint={this.props.apiEndpoint}\n            apiMethod={this.props.apiMethod}\n            model={this.form}\n            initialData={\n              monitor\n                ? {\n                    name: monitor.name,\n                    type: monitor.type,\n                    project: monitor.project.slug,\n                    ...this.formDataFromConfig(monitor.type, monitor.config),\n                  }\n                : {\n                    project: selectedProject ? selectedProject.slug : null,\n                  }\n            }\n            onSubmitSuccess={this.props.onSubmitSuccess}\n          >\n            <Panel>\n              <PanelHeader>{t('Details')}</PanelHeader>\n\n              <PanelBody>\n                {monitor && (\n                  <Field label={t('ID')}>\n                    <div className=\"controls\">\n                      <TextCopyInput>{monitor.id}</TextCopyInput>\n                    </div>\n                  </Field>\n                )}\n                <SelectField\n                  name=\"project\"\n                  label={t('Project')}\n                  disabled={!hasAccess}\n                  choices={this.props.organization.projects\n                    .filter(p => p.isMember)\n                    .map(p => [p.slug, p.slug])}\n                  required\n                />\n                <TextField\n                  name=\"name\"\n                  placeholder={t('My Cron Job')}\n                  label={t('Name')}\n                  disabled={!hasAccess}\n                  required\n                />\n              </PanelBody>\n            </Panel>\n            <Panel>\n              <PanelHeader>{t('Config')}</PanelHeader>\n\n              <PanelBody>\n                <SelectField\n                  name=\"type\"\n                  label={t('Type')}\n                  disabled={!hasAccess}\n                  choices={MONITOR_TYPES}\n                  required\n                />\n                <Observer>\n                  {() => {\n                    switch (this.form.getValue('type')) {\n                      case 'cron_job':\n                        return (\n                          <React.Fragment>\n                            <NumberField\n                              name=\"config.max_runtime\"\n                              label={t('Max Runtime')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The maximum runtime (in minutes) a check-in is allowed before it's marked as a failure.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                            <SelectField\n                              name=\"config.schedule_type\"\n                              label={t('Schedule Type')}\n                              disabled={!hasAccess}\n                              choices={SCHEDULE_TYPES}\n                              required\n                            />\n                          </React.Fragment>\n                        );\n                      default:\n                        return null;\n                    }\n                  }}\n                </Observer>\n                <Observer>\n                  {() => {\n                    switch (this.form.getValue('config.schedule_type')) {\n                      case 'crontab':\n                        return (\n                          <React.Fragment>\n                            <TextField\n                              name=\"config.schedule\"\n                              label={t('Schedule')}\n                              disabled={!hasAccess}\n                              placeholder=\"*/5 * * * *\"\n                              required\n                              help={tct(\n                                'Changes to the schedule will apply on the next check-in. See [link:Wikipedia] for crontab syntax.',\n                                {\n                                  link: <a href=\"https://en.wikipedia.org/wiki/Cron\" />,\n                                }\n                              )}\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </React.Fragment>\n                        );\n                      case 'interval':\n                        return (\n                          <React.Fragment>\n                            <NumberField\n                              name=\"config.schedule.frequency\"\n                              label={t('Frequency')}\n                              disabled={!hasAccess}\n                              placeholder=\"e.g. 1\"\n                              required\n                            />\n                            <SelectField\n                              deprecatedSelectControl\n                              name=\"config.schedule.interval\"\n                              label={t('Interval')}\n                              disabled={!hasAccess}\n                              choices={INTERVALS}\n                              required\n                            />\n                            <NumberField\n                              name=\"config.checkin_margin\"\n                              label={t('Check-in Margin')}\n                              disabled={!hasAccess}\n                              help={t(\n                                \"The margin (in minutes) a check-in is allowed to exceed it's scheduled window before being treated as missed.\"\n                              )}\n                              placeholder=\"e.g. 30\"\n                            />\n                          </React.Fragment>\n                        );\n                      default:\n                        return null;\n                    }\n                  }}\n                </Observer>\n              </PanelBody>\n            </Panel>\n          </Form>\n        )}\n      </Access>\n    );\n  }\n}\n\nexport default withGlobalSelection(withOrganization(MonitorForm));\n","import React from 'react';\nimport {browserHistory} from 'react-router';\n\nimport AsyncView from 'app/views/asyncView';\n\nimport MonitorForm from './monitorForm';\n\nexport default class EditMonitor extends AsyncView {\n  getEndpoints() {\n    const {params} = this.props;\n    return [['monitor', `/monitors/${params.monitorId}/`]];\n  }\n\n  onUpdate = data => {\n    this.setState({\n      monitor: {\n        ...this.state.monitor,\n        ...data,\n      },\n    });\n  };\n\n  onSubmitSuccess = data => {\n    browserHistory.push(`/organizations/${this.props.params.orgId}/monitors/${data.id}/`);\n  };\n\n  getTitle() {\n    if (this.state.monitor) {\n      return `${this.state.monitor.name} - Monitors - ${this.props.params.orgId}`;\n    }\n    return `Monitors - ${this.props.params.orgId}`;\n  }\n\n  renderBody() {\n    const {monitor} = this.state;\n    return (\n      <React.Fragment>\n        <h1>Edit Monitor</h1>\n\n        <MonitorForm\n          monitor={monitor}\n          apiMethod=\"PUT\"\n          apiEndpoint={`/monitors/${monitor.id}/`}\n          onSubmitSuccess={this.onSubmitSuccess}\n        />\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}