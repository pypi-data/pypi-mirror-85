{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/components/internalStatChart.jsx","webpack:///./app/views/admin/adminQueue.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","InternalStatChart","state","error","loading","data","fetchData","_nextProps","nextState","prevProps","since","props","stat","resolution","setState","api","request","method","key","success","label","height","onRetry","series","seriesName","map","name","value","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","React","Component","defaultProps","withApi","AdminQueue","changeTask","activeTask","timeWindow","Date","getTime","taskName","seconds","Error","taskList","className","r","onClick","changeWindow","withPadding","deprecatedSelectControl","onChange","allowClear","choices","concat","t"],"mappings":"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","file":"AdminQueue.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport MiniBarChart from 'app/components/charts/miniBarChart';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport withApi from 'app/utils/withApi';\n\nclass InternalStatChart extends React.Component {\n  static propTypes = {\n    api: PropTypes.object.isRequired,\n    since: PropTypes.number.isRequired,\n    resolution: PropTypes.string.isRequired,\n    stat: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    height: PropTypes.number,\n  };\n\n  static defaultProps = {\n    height: 150,\n  };\n\n  state = {\n    error: false,\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  shouldComponentUpdate(_nextProps, nextState) {\n    return this.state.loading !== nextState.loading;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.since !== this.props.since ||\n      prevProps.stat !== this.props.stat ||\n      prevProps.resolution !== this.props.resolution\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    this.setState({loading: true});\n    this.props.api.request('/internal/stats/', {\n      method: 'GET',\n      data: {\n        since: this.props.since,\n        resolution: this.props.resolution,\n        key: this.props.stat,\n      },\n      success: data =>\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n        }),\n      error: () => this.setState({error: true}),\n    });\n  }\n\n  render() {\n    const {loading, error, data} = this.state;\n    const {label, height} = this.props;\n    if (loading) {\n      return <LoadingIndicator />;\n    } else if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const series = {\n      seriesName: label,\n      data: data.map(([timestamp, value]) => ({\n        name: timestamp * 1000,\n        value,\n      })),\n    };\n    return (\n      <MiniBarChart\n        height={height}\n        series={[series]}\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(InternalStatChart);\n","import React from 'react';\n\nimport AsyncView from 'app/views/asyncView';\nimport {Panel, PanelHeader, PanelBody} from 'app/components/panels';\nimport InternalStatChart from 'app/components/internalStatChart';\nimport {SelectField} from 'app/components/forms';\n\nexport default class AdminQueue extends AsyncView {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      timeWindow: '1w',\n      since: new Date().getTime() / 1000 - 3600 * 24 * 7,\n      resolution: '1h',\n      taskName: null,\n    };\n  }\n\n  getEndpoints() {\n    return [['taskList', '/internal/queue/tasks/']];\n  }\n\n  changeWindow(timeWindow) {\n    let seconds;\n    if (timeWindow === '1h') {\n      seconds = 3600;\n    } else if (timeWindow === '1d') {\n      seconds = 3600 * 24;\n    } else if (timeWindow === '1w') {\n      seconds = 3600 * 24 * 7;\n    } else {\n      throw new Error('Invalid time window');\n    }\n    this.setState({\n      since: new Date().getTime() / 1000 - seconds,\n      timeWindow,\n    });\n  }\n\n  changeTask = value => {\n    this.setState({activeTask: value});\n  };\n\n  renderBody() {\n    const {activeTask, taskList} = this.state;\n\n    return (\n      <div>\n        <div className=\"btn-group pull-right\">\n          {['1h', '1d', '1w'].map(r => (\n            <a\n              className={`btn btn-sm ${\n                r === this.state.timeWindow ? 'btn-primary' : 'btn-default'\n              }`}\n              onClick={() => this.changeWindow(r)}\n              key={r}\n            >\n              {r}\n            </a>\n          ))}\n        </div>\n\n        <h3 className=\"no-border\">Queue Overview</h3>\n\n        <Panel>\n          <PanelHeader>Global Throughput</PanelHeader>\n          <PanelBody withPadding>\n            <InternalStatChart\n              since={this.state.since}\n              resolution={this.state.resolution}\n              stat=\"jobs.all.started\"\n              label=\"jobs started\"\n            />\n          </PanelBody>\n        </Panel>\n\n        <h3 className=\"no-border\">Task Details</h3>\n\n        <div>\n          <div className=\"m-b-1\">\n            <label>Show details for task:</label>\n            <SelectField\n              deprecatedSelectControl\n              name=\"task\"\n              onChange={this.changeTask}\n              value={activeTask}\n              allowClear\n              choices={[''].concat(...taskList).map(t => [t, t])}\n            />\n          </div>\n          {activeTask ? (\n            <div>\n              <Panel key={`jobs.started.${activeTask}`}>\n                <PanelHeader>\n                  Jobs Started <small>{activeTask}</small>\n                </PanelHeader>\n                <PanelBody withPadding>\n                  <InternalStatChart\n                    since={this.state.since}\n                    resolution={this.state.resolution}\n                    stat={`jobs.started.${activeTask}`}\n                    label=\"jobs\"\n                    height={100}\n                  />\n                </PanelBody>\n              </Panel>\n              <Panel key={`jobs.finished.${activeTask}`}>\n                <PanelHeader>\n                  Jobs Finished <small>{activeTask}</small>\n                </PanelHeader>\n                <PanelBody withPadding>\n                  <InternalStatChart\n                    since={this.state.since}\n                    resolution={this.state.resolution}\n                    stat={`jobs.finished.${activeTask}`}\n                    label=\"jobs\"\n                    height={100}\n                  />\n                </PanelBody>\n              </Panel>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}