{"version":3,"sources":["webpack:///./app/components/searchBar.tsx","webpack:///./app/components/fileSize.tsx","webpack:///./app/components/deviceName.tsx","webpack:///./app/components/acl/role.tsx","webpack:///./app/utils/attachmentUrl.tsx","webpack:///./app/components/eventsTable/eventsTableRow.jsx","webpack:///./app/components/eventsTable/eventsTable.jsx","webpack:///./app/views/organizationGroupDetails/groupEvents.jsx"],"names":["SearchBar","state","query","props","defaultQuery","dropdownVisible","searchInputRef","React","createRef","blur","current","onSubmit","evt","preventDefault","onSearch","clearSearch","setState","callIfFunction","onChange","onQueryFocus","onQueryBlur","onQueryChange","value","target","nextProps","this","className","width","classNames","Input","type","placeholder","name","ref","autoComplete","onBlur","StyledIconSearch","size","color","SearchClearButton","priority","onClick","icon","label","t","PureComponent","defaultProps","p","undefined","IconSearch","Button","theme","fontSizeLarge","gray200","gray300","FileSize","bytes","getDynamicText","formatBytes","fixed","deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","loadDeviceListModule","a","DeviceName","_isMounted","then","children","deviceName","data-test-id","Component","Role","user","ConfigStore","get","organization","role","availableRoles","currentRole","isSuperuser","Array","isArray","roleIds","map","r","id","includes","requiredIndex","indexOf","hasRole","isRenderFunc","withOrganization","AttachmentUrl","attachment","eventId","projectId","slug","attachmentsRole","getDownloadUrl","EventsTableRow","event","crashFile","crashFileType","url","href","orgId","groupId","tagList","hasUser","tagMap","tags","forEach","tag","key","link","to","date","dateCreated","title","substr","renderCrashFileLink","gravatar","email","EventsTable","events","find","GroupEvents","handleSearch","targetQueryParams","location","params","browserHistory","push","pathname","fetchData","loading","error","pick","limit","api","request","method","success","data","_","jqXHR","eventList","pageLinks","getResponseHeader","err","parseApiError","queryParams","search","group","filter","project","message","onRetry","length","renderResults","renderNoQueryResults","renderEmpty","style","marginBottom","renderBody","withApi"],"mappings":"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","file":"GroupEvents.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\n\nimport {t} from 'app/locale';\nimport {IconClose} from 'app/icons/iconClose';\nimport {callIfFunction} from 'app/utils/callIfFunction';\nimport Button from 'app/components/button';\nimport {IconSearch} from 'app/icons';\n\ntype DefaultProps = {\n  query: string;\n  defaultQuery: string;\n  onSearch: (query: string) => void;\n};\n\ntype Props = DefaultProps & {\n  placeholder?: string;\n  className?: string;\n  onChange?: (query: string) => void;\n  width?: string;\n};\n\ntype State = {\n  query: string;\n  dropdownVisible: boolean;\n};\n\nclass SearchBar extends React.PureComponent<Props, State> {\n  static defaultProps: DefaultProps = {\n    query: '',\n    defaultQuery: '',\n    onSearch: function () {},\n  };\n\n  state = {\n    query: this.props.query || this.props.defaultQuery,\n    dropdownVisible: false,\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.query !== this.props.query) {\n      this.setState({\n        query: nextProps.query,\n      });\n    }\n  }\n\n  searchInputRef = React.createRef<HTMLInputElement>();\n\n  blur = () => {\n    if (this.searchInputRef.current) {\n      this.searchInputRef.current.blur();\n    }\n  };\n\n  onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    this.blur();\n    this.props.onSearch(this.state.query);\n  };\n\n  clearSearch = () => {\n    this.setState({query: this.props.defaultQuery}, () => {\n      this.props.onSearch(this.state.query);\n      callIfFunction(this.props.onChange, this.state.query);\n    });\n  };\n\n  onQueryFocus = () => {\n    this.setState({\n      dropdownVisible: true,\n    });\n  };\n\n  onQueryBlur = () => {\n    this.setState({dropdownVisible: false});\n  };\n\n  onQueryChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {value} = evt.target;\n\n    this.setState({query: value});\n    callIfFunction(this.props.onChange, value);\n  };\n\n  render() {\n    const {className, width} = this.props;\n\n    return (\n      <div className={classNames('search', className)}>\n        <form className=\"form-horizontal\" onSubmit={this.onSubmit}>\n          <div>\n            <Input\n              type=\"text\"\n              className=\"search-input form-control\"\n              placeholder={this.props.placeholder}\n              name=\"query\"\n              ref={this.searchInputRef}\n              autoComplete=\"off\"\n              value={this.state.query}\n              onBlur={this.onQueryBlur}\n              onChange={this.onQueryChange}\n              width={width}\n            />\n            <StyledIconSearch className=\"search-input-icon\" size=\"sm\" color=\"gray300\" />\n            {this.state.query !== this.props.defaultQuery && (\n              <SearchClearButton\n                type=\"button\"\n                className=\"search-clear-form\"\n                priority=\"link\"\n                onClick={this.clearSearch}\n                size=\"xsmall\"\n                icon={<IconClose />}\n                label={t('Clear')}\n              />\n            )}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst Input = styled('input')`\n  width: ${p => (p.width ? p.width : undefined)};\n`;\n\nconst StyledIconSearch = styled(IconSearch)`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  left: 14px;\n`;\n\nconst SearchClearButton = styled(Button)`\n  position: absolute;\n  top: 50%;\n  height: 16px;\n  transform: translateY(-50%);\n  right: 10px;\n  font-size: ${p => p.theme.fontSizeLarge};\n  color: ${p => p.theme.gray200};\n\n  &:hover {\n    color: ${p => p.theme.gray300};\n  }\n`;\n\nexport default SearchBar;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {formatBytes} from 'app/utils';\nimport getDynamicText from 'app/utils/getDynamicText';\n\ntype Props = {\n  className?: string;\n  bytes: number;\n};\n\nfunction FileSize(props: Props) {\n  const {className, bytes} = props;\n\n  return (\n    <span className={className}>\n      {getDynamicText({value: formatBytes(bytes), fixed: 'xx KB'})}\n    </span>\n  );\n}\n\nFileSize.propTypes = {\n  className: PropTypes.string,\n  bytes: PropTypes.number.isRequired,\n};\n\nexport default FileSize;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {IOSDeviceList} from 'app/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model.split(' ').splice(1).join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import(/* webpackChunkName: \"iOSDeviceList\" */ 'ios-device-list');\n}\n\ntype Props = {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  static propTypes = {\n    value: PropTypes.string,\n    children: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted?: boolean;\n\n  render() {\n    const {value, children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // value can be undefined, need to return null or else react throws\n    if (!value) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return value;\n    }\n\n    const deviceName = deviceNameMapper(value, iOSDeviceList);\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {children ? children(deviceName) : deviceName}\n      </span>\n    );\n  }\n}\n","import React from 'react';\n\nimport {Organization} from 'app/types';\nimport ConfigStore from 'app/stores/configStore';\nimport withOrganization from 'app/utils/withOrganization';\nimport {isRenderFunc} from 'app/utils/isRenderFunc';\n\ntype RoleRenderProps = {\n  hasRole: boolean;\n};\n\ntype ChildrenRenderFn = (props: RoleRenderProps) => React.ReactNode;\n\ntype Props = {\n  /**\n   * Minimum required role\n   */\n  role: string;\n  /**\n   * Current Organization\n   */\n  organization: Organization;\n  /**\n   * If children is a function then will be treated as a render prop and\n   * passed RoleRenderProps.\n   *\n   * The other interface is more simple, only show `children` if user has\n   * the minimum required role.\n   */\n  children: React.ReactNode | ChildrenRenderFn;\n};\n\nclass Role extends React.Component<Props> {\n  hasRole() {\n    const user = ConfigStore.get('user');\n    const {organization, role} = this.props;\n    const {availableRoles} = organization;\n    const currentRole = organization.role ?? '';\n\n    if (!user) {\n      return false;\n    }\n\n    if (user.isSuperuser) {\n      return true;\n    }\n\n    if (!Array.isArray(availableRoles)) {\n      return false;\n    }\n\n    const roleIds = availableRoles.map(r => r.id);\n\n    if (!roleIds.includes(role) || !roleIds.includes(currentRole)) {\n      return false;\n    }\n\n    const requiredIndex = roleIds.indexOf(role);\n    const currentIndex = roleIds.indexOf(currentRole);\n    return currentIndex >= requiredIndex;\n  }\n\n  render() {\n    const {children} = this.props;\n    const hasRole = this.hasRole();\n\n    if (isRenderFunc<ChildrenRenderFn>(children)) {\n      return children({hasRole});\n    }\n\n    return hasRole && children ? children : null;\n  }\n}\n\nexport default withOrganization(Role);\n","import React from 'react';\n\nimport {Organization, EventAttachment} from 'app/types';\nimport withOrganization from 'app/utils/withOrganization';\nimport Role from 'app/components/acl/role';\n\ntype Props = {\n  organization: Organization;\n  projectId: string;\n  eventId: string;\n  attachment: EventAttachment;\n  children: (downloadUrl: string | null) => React.ReactNode;\n};\n\nclass AttachmentUrl extends React.PureComponent<Props> {\n  getDownloadUrl() {\n    const {attachment, organization, eventId, projectId} = this.props;\n    return `/api/0/projects/${organization.slug}/${projectId}/events/${eventId}/attachments/${attachment.id}/`;\n  }\n\n  render() {\n    const {children, organization} = this.props;\n    return (\n      <Role role={organization.attachmentsRole}>\n        {({hasRole}) => children(hasRole ? this.getDownloadUrl() : null)}\n      </Role>\n    );\n  }\n}\n\nexport default withOrganization(AttachmentUrl);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport AttachmentUrl from 'app/utils/attachmentUrl';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport DateTime from 'app/components/dateTime';\nimport DeviceName from 'app/components/deviceName';\nimport FileSize from 'app/components/fileSize';\nimport GlobalSelectionLink from 'app/components/globalSelectionLink';\nimport SentryTypes from 'app/sentryTypes';\nimport withOrganization from 'app/utils/withOrganization';\n\nclass EventsTableRow extends React.Component {\n  static propTypes = {\n    hasUser: PropTypes.bool,\n    orgId: PropTypes.string.isRequired,\n    groupId: PropTypes.string.isRequired,\n    projectId: PropTypes.string,\n    event: SentryTypes.Event.isRequired,\n    tagList: PropTypes.arrayOf(SentryTypes.Tag),\n  };\n\n  renderCrashFileLink() {\n    const {event, projectId} = this.props;\n    if (!event.crashFile) {\n      return null;\n    }\n\n    const crashFileType =\n      event.crashFile.type === 'event.minidump' ? 'Minidump' : 'Crash file';\n\n    return (\n      <AttachmentUrl\n        projectId={projectId}\n        eventId={event.id}\n        attachment={event.crashFile}\n      >\n        {url =>\n          url && (\n            <small>\n              {crashFileType}: <a href={`${url}?download=1`}>{event.crashFile.name}</a> (\n              <FileSize bytes={event.crashFile.size} />)\n            </small>\n          )\n        }\n      </AttachmentUrl>\n    );\n  }\n\n  render() {\n    const {className, event, orgId, groupId, tagList, hasUser} = this.props;\n    const tagMap = {};\n    event.tags.forEach(tag => {\n      tagMap[tag.key] = tag.value;\n    });\n    const link = `/organizations/${orgId}/issues/${groupId}/events/${event.id}/`;\n\n    return (\n      <tr key={event.id} className={className}>\n        <td>\n          <h5>\n            <GlobalSelectionLink to={link}>\n              <DateTime date={event.dateCreated} />\n            </GlobalSelectionLink>\n            <small>{event.title.substr(0, 100)}</small>\n            {this.renderCrashFileLink()}\n          </h5>\n        </td>\n\n        {hasUser && (\n          <td className=\"event-user table-user-info\">\n            {event.user ? (\n              <div>\n                <UserAvatar\n                  user={event.user}\n                  size={24}\n                  className=\"avatar\"\n                  gravatar={false}\n                />\n                {event.user.email}\n              </div>\n            ) : (\n              <span>—</span>\n            )}\n          </td>\n        )}\n\n        {tagList.map(tag => (\n          <td key={tag.key}>\n            <div>\n              {tag.key === 'device' ? (\n                <DeviceName value={tagMap[tag.key]} />\n              ) : (\n                tagMap[tag.key]\n              )}\n            </div>\n          </td>\n        ))}\n      </tr>\n    );\n  }\n}\n\nexport {EventsTableRow};\nexport default withOrganization(EventsTableRow);\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport CustomPropTypes from 'app/sentryTypes';\nimport EventsTableRow from 'app/components/eventsTable/eventsTableRow';\n\nclass EventsTable extends React.Component {\n  static propTypes = {\n    events: PropTypes.arrayOf(CustomPropTypes.Event),\n    tagList: PropTypes.arrayOf(CustomPropTypes.Tag),\n    orgId: PropTypes.string.isRequired,\n    projectId: PropTypes.string.isRequired,\n    groupId: PropTypes.string.isRequired,\n  };\n\n  render() {\n    const {events, tagList, orgId, projectId, groupId} = this.props;\n\n    const hasUser = !!events.find(event => event.user);\n\n    return (\n      <table className=\"table events-table\">\n        <thead>\n          <tr>\n            <th>{t('ID')}</th>\n            {hasUser && <th>{t('User')}</th>}\n\n            {tagList.map(tag => (\n              <th key={tag.key}>{tag.name}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {events.map(event => (\n            <EventsTableRow\n              key={event.id}\n              event={event}\n              orgId={orgId}\n              projectId={projectId}\n              groupId={groupId}\n              tagList={tagList}\n              hasUser={hasUser}\n            />\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default EventsTable;\n","import PropTypes from 'prop-types';\nimport {browserHistory} from 'react-router';\nimport React from 'react';\nimport pick from 'lodash/pick';\n\nimport SentryTypes from 'app/sentryTypes';\nimport {Panel, PanelBody} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport EmptyStateWarning from 'app/components/emptyStateWarning';\nimport EventsTable from 'app/components/eventsTable/eventsTable';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport Pagination from 'app/components/pagination';\nimport SearchBar from 'app/components/searchBar';\nimport parseApiError from 'app/utils/parseApiError';\n\nclass GroupEvents extends React.Component {\n  static propTypes = {\n    api: PropTypes.object,\n    group: SentryTypes.Group.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const queryParams = this.props.location.query;\n    this.state = {\n      eventList: [],\n      loading: true,\n      error: false,\n      pageLinks: '',\n      query: queryParams.query || '',\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.location.search !== nextProps.location.search) {\n      const queryParams = nextProps.location.query;\n\n      this.setState(\n        {\n          query: queryParams.query,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  handleSearch = query => {\n    const targetQueryParams = {...this.props.location.query};\n    targetQueryParams.query = query;\n    const {groupId, orgId} = this.props.params;\n\n    browserHistory.push({\n      pathname: `/organizations/${orgId}/issues/${groupId}/events/`,\n      query: targetQueryParams,\n    });\n  };\n\n  fetchData = () => {\n    this.setState({\n      loading: true,\n      error: false,\n    });\n\n    const query = {\n      ...pick(this.props.location.query, ['cursor', 'environment']),\n      limit: 50,\n      query: this.state.query,\n    };\n\n    this.props.api.request(`/issues/${this.props.params.groupId}/events/`, {\n      query,\n      method: 'GET',\n      success: (data, _, jqXHR) => {\n        this.setState({\n          eventList: data,\n          error: false,\n          loading: false,\n          pageLinks: jqXHR.getResponseHeader('Link'),\n        });\n      },\n      error: err => {\n        this.setState({\n          error: parseApiError(err),\n          loading: false,\n        });\n      },\n    });\n  };\n\n  renderNoQueryResults() {\n    return (\n      <EmptyStateWarning>\n        <p>{t('Sorry, no events match your search query.')}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <EmptyStateWarning>\n        <p>{t(\"There don't seem to be any events yet.\")}</p>\n      </EmptyStateWarning>\n    );\n  }\n\n  renderResults() {\n    const {group, params} = this.props;\n    const tagList = group.tags.filter(tag => tag.key !== 'user') || [];\n\n    return (\n      <EventsTable\n        tagList={tagList}\n        events={this.state.eventList}\n        orgId={params.orgId}\n        projectId={group.project.slug}\n        groupId={params.groupId}\n      />\n    );\n  }\n\n  renderBody() {\n    let body;\n\n    if (this.state.loading) {\n      body = <LoadingIndicator />;\n    } else if (this.state.error) {\n      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;\n    } else if (this.state.eventList.length > 0) {\n      body = this.renderResults();\n    } else if (this.state.query && this.state.query !== '') {\n      body = this.renderNoQueryResults();\n    } else {\n      body = this.renderEmpty();\n    }\n\n    return body;\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{marginBottom: 20}}>\n          <SearchBar\n            defaultQuery=\"\"\n            placeholder={t('search event id, message, or tags')}\n            query={this.state.query}\n            onSearch={this.handleSearch}\n          />\n        </div>\n        <Panel className=\"event-list\">\n          <PanelBody>{this.renderBody()}</PanelBody>\n        </Panel>\n        <Pagination pageLinks={this.state.pageLinks} />\n      </div>\n    );\n  }\n}\n\nexport {GroupEvents};\n\nexport default withApi(GroupEvents);\n"],"sourceRoot":""}