{"version":3,"sources":["webpack:///./app/components/asyncComponentSearchInput.tsx","webpack:///./app/views/permissionDenied.tsx","webpack:///./app/components/asyncComponent.tsx"],"names":["AsyncComponentSearchInput","state","query","busy","immediateQuery","searchQuery","a","props","location","api","setState","requestPromise","url","includeAllArgs","method","data","jqXHR","onSuccess","onError","debounce","debounceWait","handleChange","handleInputChange","evt","target","value","handleSearch","updateRoute","onSearchSubmit","preventDefault","router","push","pathname","this","placeholder","children","className","defaultSearchBar","Form","onSubmit","onChange","StyledLoadingIndicator","size","hideMessage","mini","undefined","React","Component","defaultProps","t","LoadingIndicator","ReactRouter","PermissionDenied","routes","context","organization","project","route","getRouteStringFromRoutes","Sentry","scope","setFingerprint","setExtra","features","access","Error","title","message","tct","link","href","contextTypes","PropTypes","object","withRouter","wrapErrorHandling","component","fn","error","console","setTimeout","AsyncComponent","reloadOnVisible","shouldReloadOnVisible","shouldReload","shouldRenderBadRequests","Client","_measurement","markShouldMeasure","remainingRequests","hasMeasured","finished","remountComponent","reloadData","getDefaultState","fetchData","visibilityReloader","loading","document","hidden","extraState","endpoints","getEndpoints","length","clear","forEach","stateKey","endpoint","params","options","locationQuery","paginate","cursor","request","success","_","handleRequestSuccess","allowError","handleError","bind","render","metric","mark","name","addEventListener","_newProps","_newContext","prevProps","prevContext","isRouterInContext","isLocationInProps","currentLocation","prevLocation","routeString","measure","start","isEqual","search","removeEventListener","reloading","errors","_resp","_args","initialRequest","prevState","getResponseHeader","onLoadAllEndpointsSuccess","onRequestSuccess","args","responseText","category","level","onRequestError","warn","getEndpoint","getEndpointParams","firstEndpoint","stateKeyOrDefault","urlOrDefault","renderError","disableLog","disableReport","unauthorizedErrors","Object","values","find","resp","status","permissionErrors","shouldLogSentry","badRequests","filter","responseJSON","detail","map","join","disableLogSentry","renderBody","renderLoading","renderComponent"],"mappings":"i8CA6DMA,E,kLAMJC,MAAe,CACbC,MAAO,GACPC,MAAM,G,EAGRC,e,+BAAiB,WAAOC,GAAP,2BAAAC,EAAA,+DACS,EAAKC,MAAtBC,EADQ,EACRA,SAAUC,EADF,EACEA,IACjB,EAAKC,SAAS,CAACP,MAAM,IAFN,kBAKiBM,EAAIE,eAAJ,UAAsB,EAAKJ,MAAMK,KAAO,CACpEC,gBAAgB,EAChBC,OAAQ,MACRZ,MAAO,EAAF,KAAMM,EAASN,OAAf,IAAsBA,MAAOG,MARvB,2BAKNU,EALM,KAKEC,EALF,KAWT,EAAKf,MAAMC,QAAUG,GACvB,EAAKE,MAAMU,UAAUF,EAAMC,GAZhB,kDAeb,EAAKT,MAAMW,UAfE,QAkBf,EAAKR,SAAS,CAACP,MAAM,IAlBN,0D,wDAqBjBD,MAAQiB,IAAS,EAAKf,eAAgB,EAAKG,MAAMa,c,EAEjDC,aAAe,SAACnB,GACd,EAAKA,MAAMA,GACX,EAAKQ,SAAS,CAACR,W,EAGjBoB,kBAAoB,SAACC,GAAD,OAClB,EAAKF,aAAaE,EAAIC,OAAOC,Q,EAK/BC,aAAe,SAACH,GAA0C,MAClB,EAAKhB,MAApCoB,EADiD,EACjDA,YAAaC,EADoC,EACpCA,eAIpB,GAHAL,EAAIM,iBAGAF,EAAa,OACY,EAAKpB,MAAzBuB,EADQ,EACRA,OAAQtB,EADA,EACAA,SACfsB,EAAOC,KAAK,CACVC,SAAUxB,EAASwB,SACnB9B,MAAO,CACLA,MAAO,EAAKD,MAAMC,SAKM,mBAAnB0B,GAGXA,EAAe,EAAK3B,MAAMC,MAAOqB,I,+CAG1B,MACoCU,KAAK1B,MAAzC2B,EADA,EACAA,YAAaC,EADb,EACaA,SAAUC,EADvB,EACuBA,UADvB,EAEeH,KAAKhC,MAApBE,EAFA,EAEAA,KAAMD,EAFN,EAEMA,MAEPmC,EACJ,YAACC,EAAD,CAAMC,SAAUN,KAAKP,cACnB,YAAC,IAAD,CACED,MAAOvB,EACPsC,SAAUP,KAAKX,kBACfc,UAAWA,EACXF,YAAaA,IAEd/B,GAAQ,YAACsC,EAAD,CAAwBC,KAAM,GAAIC,aAAW,EAACC,MAAI,KAI/D,YAAoBC,IAAbV,EACHE,EACAF,EAAS,CAACE,mBAAkBlC,OAAMsB,MAAOvB,EAAOmB,aAAcY,KAAKZ,mB,GApFnCyB,IAAMC,WAAxC/C,E,wCAAAA,EACGgD,aAA6B,CAClCd,YAAae,YAAE,aACf7B,aAAc,KAqFlB,IAAMqB,EAAyB,YAAOS,UAAP,kDAAH,6FAOtBZ,EAAO,YAAO,OAAP,gCAAH,6CAIKa,eAAuBnD,G,geCpJtC,IAIMoD,G,iJAMgB,IACXC,EAAUpB,KAAK1B,MAAf8C,OADW,EAEcpB,KAAKqB,QAA9BC,EAFW,EAEXA,aAAcC,EAFH,EAEGA,QAEfC,EAAQC,aAAyBL,GACvCM,KAAiB,SAAAC,GACfA,EAAMC,eAAe,CAhBR,oBAgBqBJ,IAClCG,EAAME,SAAS,QAASL,GACxBG,EAAME,SAAS,cAAgBP,GAAgBA,EAAaQ,UAAa,IACzEH,EAAME,SAAS,YAAcP,GAAgBA,EAAaS,QAAW,IACrEJ,EAAME,SAAS,kBAAoBN,GAAWA,EAAQO,UAAa,IACnEJ,IAAwB,IAAIM,MAAJ,UArBX,qBAqBW,OAA0BR,EAAQ,MAAH,OAASA,GAAU,W,+BAK5E,OACE,YAAC,IAAD,CAAeS,MAAOjB,YAAE,sBACtB,YAAC,KAAD,KACE,YAAC,IAAD,CACEkB,QAASC,YAAI,gJAGX,CACEC,KAAM,YAAC,KAAD,CAAcC,KAAK,uD,GA9BVxB,IAAMC,WAA/BK,G,+BAAAA,GACGmB,aAAe,CACpBhB,aAAciB,IAAUC,OACxBjB,QAASgB,IAAUC,QAqCRC,4BAAWtB,I,igCCd1B,SAASuB,GACPC,EACAC,GAEA,OAAO,WACL,IACE,OAAOA,EAAE,WAAF,aACP,MAAOC,GAOP,OALAC,QAAQD,MAAMA,GACdE,YAAW,WACT,MAAMF,KAERF,EAAUlE,SAAS,CAACoE,UACb,O,IAKQG,G,iCAoCnB,WAAY1E,EAAU+C,GAAc,0BAClC,cAAM/C,EAAO+C,IAnBf4B,iBAAkB,EAkBkB,EAXpCC,uBAAwB,EAWY,EALpCC,cAAe,EAKqB,EAFpCC,yBAA0B,EAEU,EAiFpC5E,IAAc,IAAI6E,IAjFkB,EAkF5BC,kBAlF4B,IAuGpCC,kBAAoB,WAGkC,6DAAP,GAF7CC,EAEoD,EAFpDA,kBACAX,EACoD,EADpDA,MAEK,EAAKS,aAAaG,cACrB,EAAKH,aAAaI,SAAiC,IAAtBF,EAC7B,EAAKF,aAAaT,MAAQA,GAAS,EAAKS,aAAaT,QA7GrB,EAiHpCc,iBAAmB,WACb,EAAKR,aACP,EAAKS,aAEL,EAAKnF,SAAS,EAAKoF,kBAAmB,EAAKC,YArHX,EAyHpCC,mBAAqB,kBACnB,EAAKb,wBACJ,EAAKlF,MAAMgG,UACXC,SAASC,QACV,EAAKN,cA7H6B,EAmIpCE,UAAY,SAACK,GACX,IAAMC,EAAY,EAAKC,eAElBD,EAAUE,QAMf,EAAK9F,IAAI+F,QAET,EAAK9F,SAAL,IACEuF,SAAS,EACTnB,OAAO,EACPW,kBAAmBY,EAAUE,QAC1BH,IAGLC,EAAUI,SAAQ,YAA2C,eAAzCC,EAAyC,KAA/BC,EAA+B,KAArBC,EAAqB,KAAbC,EAAa,KAC3DA,EAAUA,GAAW,GAGrB,IAAMC,EAAiB,EAAKvG,MAAMC,UAAY,EAAKD,MAAMC,SAASN,OAAU,GACxEA,EAAS0G,GAAUA,EAAO1G,OAAU,IAGpC2G,EAAQE,UAAYD,EAAcE,UACpC9G,EAAQ,SAAI4G,GAAkB5G,IAGhC,EAAKO,IAAIwG,QAAQN,EAAjB,OACE7F,OAAQ,OACL8F,GAFL,IAGE1G,QACAgH,QAAS,SAACnG,EAAMoG,EAAGnG,GACjB,EAAKoG,qBAAqB,CAACV,WAAU3F,OAAMC,UAAQ,IAErD8D,MAAO,SAAAA,GAGD+B,EAAQQ,YAAcR,EAAQQ,WAAWvC,KAC3CA,EAAQ,MAEV,EAAKwC,YAAYxC,EAAO,CAAC4B,EAAUC,EAAUC,EAAQC,YAvCzD,EAAKnG,SAAS,CAACuF,SAAS,EAAOnB,OAAO,KApIxC,EAAKiB,UAAYpB,GAAkB,OAAM,EAAKoB,UAAUwB,KAAf,SACzC,EAAKC,OAAS7C,GAAkB,OAAM,EAAK6C,OAAOD,KAAZ,SAEtC,EAAKtH,MAAQ,EAAK6F,kBAElB,EAAKP,aAAe,CAClBG,aAAa,GAEXnF,EAAM8C,QAAU9C,EAAM8C,QACxBoE,KAAOC,KAAK,CAACC,KAAM,mBAAF,OAAqBjE,aAAyBnD,EAAM8C,WAZrC,E,gEAiBlCpB,KAAKxB,IAAM,IAAI6E,IACfrD,KAAK8D,YAED9D,KAAKiD,iBACPgB,SAAS0B,iBAAiB,mBAAoB3F,KAAK+D,sB,uDAKtB6B,EAAcC,M,yCAE5BC,EAAcC,GAC/B,IAAMC,IAAsBD,EAAYlG,OAClCoG,OAA2CrF,IAAvBkF,EAAUvH,SAE9B2H,EAAkBD,EACpBjG,KAAK1B,MAAMC,SACXyH,EACAhG,KAAKqB,QAAQxB,OAAOtB,SACpB,KACE4H,EAAeF,EACjBH,EAAUvH,SACVyH,EACAD,EAAYlG,OAAOtB,SACnB,KAEJ,GAAM2H,GAAmBC,EAAzB,CAMA,IACGnG,KAAKsD,aAAaG,aACnBzD,KAAKsD,aAAaI,UAClB1D,KAAK1B,MAAM8C,OACX,CACA,IAAMgF,EAAc3E,aAAyBzB,KAAK1B,MAAM8C,QACxDoE,KAAOa,QAAQ,CACbX,KAAM,gCACNY,MAAO,mBAAF,OAAqBF,GAC1BtH,KAAM,CACJ0C,MAAO4E,EACPvD,MAAO7C,KAAKsD,aAAaT,SAG7B7C,KAAKsD,aAAaG,aAAc,EAK/B8C,IAAQvG,KAAK1B,MAAMqG,OAAQmB,EAAUnB,SACtCuB,EAAgBM,SAAWL,EAAaK,QACxCN,EAAgBlI,QAAUmI,EAAanI,OAEvCgC,KAAK2D,sB,6CAKP3D,KAAKxB,IAAI+F,QACTN,SAASwC,oBAAoB,mBAAoBzG,KAAK+D,sB,wCAQtD,IAAMK,EAAYpE,KAAKqE,eACjBrG,EAAQ,CAEZgG,SAAS,EAET0C,WAAW,EAEX7D,OAAO,EACP8D,OAAQ,IAKV,OAHAvC,EAAUI,SAAQ,YAA2B,eAAzBC,EAAyB,UAC3CzG,EAAMyG,GAAY,QAEbzG,I,mCA6BPgC,KAAK8D,UAAU,CAAC4C,WAAW,M,uCAoDZE,M,qCAIFA,EAAOC,M,kGAQwBC,GAA0B,WAAlDrC,EAAkD,EAAlDA,SAAU3F,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MACpCiB,KAAKvB,UACH,SAAAsI,GAAa,MACL/I,GAAK,WACRyG,EAAW3F,GADH,gBAGL2F,EAHK,aAGiB1F,GAASA,EAAMiI,kBAAkB,SAHlD,GAaX,OAPIF,IACF9I,EAAMwF,kBAAoBuD,EAAUvD,kBAAqB,EACzDxF,EAAMgG,QAAU+C,EAAUvD,kBAAqB,EAC/CxF,EAAM0I,UAAYK,EAAUL,WAAa1I,EAAMgG,QAC/C,EAAKT,kBAAkB,CAACC,kBAAmBxF,EAAMwF,qBAG5CxF,KAET,WAEuC,IAAjC,EAAKA,MAAMwF,mBAA4B,EAAKxF,MAAM6E,OACpD,EAAKoE,+BAIXjH,KAAKkH,iBAAiB,CAACzC,WAAU3F,OAAMC,Y,kCAG7B8D,EAAOsE,GAAM,WAChB1C,EADgB,IACJ0C,EADI,MAEnBtE,GAASA,EAAMuE,cACjB1F,IAAqB,CACnBQ,QAASW,EAAMuE,aACfC,SAAU,MACVC,MAAO5F,IAAgBM,QAG3BhC,KAAKvB,UAAS,SAAAsI,GAAa,MACnB/C,EAAU+C,EAAUvD,kBAAqB,EACzCxF,GAA0B,WAC7ByG,EAAW,MADkB,wBAGzBsC,EAAUJ,QAHe,UAI3BlC,EAAW5B,KAJgB,cAMvBkE,EAAUlE,SAAWA,GANE,0BAOXkE,EAAUvD,kBAAqB,GAPpB,gBAQ9BQ,GAR8B,kBASnB+C,EAAUL,WAAa1C,GATJ,GAahC,OAFA,EAAKT,kBAAkB,CAACC,kBAAmBxF,EAAMwF,kBAAmBX,OAAO,IAEpE7E,KAETgC,KAAKuH,eAAe1E,EAAOsE,K,0CAS3B,OADArE,QAAQ0E,KAAK,mCACN,K,oCASP,OADA1E,QAAQ0E,KAAK,6BACN,O,qCAWP,IAAM9C,EAAW1E,KAAKyH,cACtB,OAAK/C,EAGE,CAAC,CAAC,OAAQA,EAAU1E,KAAK0H,sBAFvB,K,2CAKyD,WAAjDjD,EAAiD,EAAjDA,SAAU9F,EAAuC,EAAvCA,IAAQL,EAA+B,4BAC1C0B,KAAKqE,gBAAkB,CAAC,MAAzCsD,EAD2D,YAE5DC,EAAoBnD,GAAakD,GAAiBA,EAAc,GAChEE,EAAelJ,GAAQgJ,GAAiBA,EAAc,GAC5D,OACE,YAAC,EAAD,KACEhJ,IAAKkJ,GACDvJ,EAFN,CAGEE,IAAKwB,KAAKxB,IACVQ,UAAW,SAACF,EAAMC,GAChB,EAAKoG,qBAAqB,CAACV,SAAUmD,EAAmB9I,OAAMC,WAEhEE,QAAS,WACP,EAAK6I,YAAY,IAAI9F,MAAM,+C,sCAOjC,OAAO,YAAC,UAAD,Q,kCAGGa,GAA2E,IAA5DkF,EAA4D,wDAAxCC,EAAwC,wDAC9ErB,EAAU3G,KAAKhC,MAAf2I,OAGDsB,EAAqBC,OAAOC,OAAOxB,GAAQyB,MAC/C,SAAAC,GAAI,OAAIA,GAAwB,MAAhBA,EAAKC,UAIjBC,EAAmBL,OAAOC,OAAOxB,GAAQyB,MAC7C,SAAAC,GAAI,OAAIA,GAAwB,MAAhBA,EAAKC,UAKjBE,IACFN,OAAOC,OAAOxB,GAAQyB,MAAK,SAAAC,GAAI,OAAIA,GAAwB,IAAhBA,EAAKC,WAAiBP,EAErE,GAAIE,EACF,OACE,YAAC,IAAD,CAAc/F,QAASlB,YAAE,qDAI7B,GAAIuH,EACF,OAAO,YAAC,GAAD,MAGT,GAAIvI,KAAKoD,wBAAyB,CAChC,IAAMqF,EAAcP,OAAOC,OAAOxB,GAC/B+B,QACC,SAAAL,GAAI,OACFA,GAAwB,MAAhBA,EAAKC,QAAkBD,EAAKM,cAAgBN,EAAKM,aAAaC,UAEzEC,KAAI,SAAAR,GAAI,OAAIA,EAAKM,aAAaC,UAEjC,GAAIH,EAAYnE,OACd,OAAO,YAAC,IAAD,CAAcpC,QAASuG,EAAYK,KAAK,QAInD,OACE,YAAC,KAAD,CACEjG,MAAOA,EACPkG,kBAAmBP,EACnBR,cAAeA,M,wCAMnB,OAAOhI,KAAKhC,MAAMgG,SAAahE,KAAKmD,cAAiBnD,KAAKhC,MAAM0I,UAE5D1G,KAAKhC,MAAM6E,MACX7C,KAAK8H,YAAY,IAAI9F,MAAM,0CAC3BhC,KAAKgJ,aAHLhJ,KAAKiJ,kB,mCAWT,MAAM,IAAIjH,MAAM,qB,+BAIhB,OAAOhC,KAAKkJ,sB,GArZNrI,IAAMC,WAHKkC,G,6BAAAA,GASZV,aAAe,CACpBzC,OAAQ0C,IAAUC","file":"AcceptOrganizationInvite~AcceptProjectTransfer~AccountAuthorizations~AccountClose~AccountDetails~Acc~0a44308f.js","sourcesContent":["import * as ReactRouter from 'react-router';\nimport debounce from 'lodash/debounce';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport Input from 'app/views/settings/components/forms/controls/input';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport {Client} from 'app/api';\n\ntype RenderProps = {\n  defaultSearchBar: React.ReactNode;\n  busy: boolean;\n  handleChange: (value: string) => void;\n  value: string;\n};\n\ntype DefaultProps = {\n  /**\n   * Placeholder text in the search input\n   */\n  placeholder: string;\n  /**\n   * Time in milliseconds to wait before firing off the request\n   */\n  debounceWait?: number; // optional, otherwise src/sentry/static/sentry/app/views/settings/organizationMembers/organizationMembersList.tsx L:191 is not happy\n};\n\ntype Props = ReactRouter.WithRouterProps &\n  DefaultProps & {\n    api: Client;\n    className?: string;\n    /**\n     * URL to make the search request to\n     */\n    url: string;\n    /**\n     * Updates URL with search query in the URL param: `query`\n     */\n    updateRoute?: boolean;\n\n    onSearchSubmit?: (query: string, event: React.FormEvent) => void;\n    onSuccess: (data: object, jqXHR: JQueryXHR | undefined) => void;\n    onError: () => void;\n\n    /**\n     * A render-prop child may be passed to handle custom rendering of the input.\n     */\n    children?: (otps: RenderProps) => React.ReactNode;\n  };\n\ntype State = {\n  query: string;\n  busy: boolean;\n};\n\n/**\n * This is a search input that can be easily used in AsyncComponent/Views.\n *\n * It probably doesn't make too much sense outside of an AsyncComponent atm.\n */\nclass AsyncComponentSearchInput extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    placeholder: t('Search...'),\n    debounceWait: 200,\n  };\n\n  state: State = {\n    query: '',\n    busy: false,\n  };\n\n  immediateQuery = async (searchQuery: string) => {\n    const {location, api} = this.props;\n    this.setState({busy: true});\n\n    try {\n      const [data, , jqXHR] = await api.requestPromise(`${this.props.url}`, {\n        includeAllArgs: true,\n        method: 'GET',\n        query: {...location.query, query: searchQuery},\n      });\n      // only update data if the request's query matches the current query\n      if (this.state.query === searchQuery) {\n        this.props.onSuccess(data, jqXHR);\n      }\n    } catch {\n      this.props.onError();\n    }\n\n    this.setState({busy: false});\n  };\n\n  query = debounce(this.immediateQuery, this.props.debounceWait);\n\n  handleChange = (query: string) => {\n    this.query(query);\n    this.setState({query});\n  };\n\n  handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>) =>\n    this.handleChange(evt.target.value);\n\n  /**\n   * This is called when \"Enter\" (more specifically a form \"submit\" event) is pressed.\n   */\n  handleSearch = (evt: React.FormEvent<HTMLFormElement>) => {\n    const {updateRoute, onSearchSubmit} = this.props;\n    evt.preventDefault();\n\n    // Update the URL to reflect search term.\n    if (updateRoute) {\n      const {router, location} = this.props;\n      router.push({\n        pathname: location.pathname,\n        query: {\n          query: this.state.query,\n        },\n      });\n    }\n\n    if (typeof onSearchSubmit !== 'function') {\n      return;\n    }\n    onSearchSubmit(this.state.query, evt);\n  };\n\n  render() {\n    const {placeholder, children, className} = this.props;\n    const {busy, query} = this.state;\n\n    const defaultSearchBar = (\n      <Form onSubmit={this.handleSearch}>\n        <Input\n          value={query}\n          onChange={this.handleInputChange}\n          className={className}\n          placeholder={placeholder}\n        />\n        {busy && <StyledLoadingIndicator size={18} hideMessage mini />}\n      </Form>\n    );\n\n    return children === undefined\n      ? defaultSearchBar\n      : children({defaultSearchBar, busy, value: query, handleChange: this.handleChange});\n  }\n}\n\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\n  position: absolute;\n  right: 25px;\n  top: 50%;\n  transform: translateY(-13px);\n`;\n\nconst Form = styled('form')`\n  position: relative;\n`;\n\nexport default ReactRouter.withRouter(AsyncComponentSearchInput);\n","import {withRouter, WithRouterProps} from 'react-router';\nimport DocumentTitle from 'react-document-title';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport {t, tct} from 'app/locale';\nimport ExternalLink from 'app/components/links/externalLink';\nimport {PageContent} from 'app/styles/organization';\nimport LoadingError from 'app/components/loadingError';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\n\nconst ERROR_NAME = 'Permission Denied';\n\ntype Props = WithRouterProps;\n\nclass PermissionDenied extends React.Component<Props> {\n  static contextTypes = {\n    organization: PropTypes.object,\n    project: PropTypes.object,\n  };\n\n  componentDidMount() {\n    const {routes} = this.props;\n    const {organization, project} = this.context;\n\n    const route = getRouteStringFromRoutes(routes);\n    Sentry.withScope(scope => {\n      scope.setFingerprint([ERROR_NAME, route]);\n      scope.setExtra('route', route);\n      scope.setExtra('orgFeatures', (organization && organization.features) || []);\n      scope.setExtra('orgAccess', (organization && organization.access) || []);\n      scope.setExtra('projectFeatures', (project && project.features) || []);\n      Sentry.captureException(new Error(`${ERROR_NAME}${route ? ` : ${route}` : ''}`));\n    });\n  }\n\n  render() {\n    return (\n      <DocumentTitle title={t('Permission Denied')}>\n        <PageContent>\n          <LoadingError\n            message={tct(\n              `Your role does not have the necessary permissions to access this\n               resource, please read more about [link:organizational roles]`,\n              {\n                link: <ExternalLink href=\"https://docs.sentry.io/learn/membership/\" />,\n              }\n            )}\n          />\n        </PageContent>\n      </DocumentTitle>\n    );\n  }\n}\n\nexport default withRouter(PermissionDenied);\n","import isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {RouteComponentProps} from 'react-router/lib/Router';\nimport {WithRouterProps} from 'react-router/lib/withRouter';\nimport * as Sentry from '@sentry/react';\n\nimport {Client} from 'app/api';\nimport {t} from 'app/locale';\nimport AsyncComponentSearchInput from 'app/components/asyncComponentSearchInput';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport PermissionDenied from 'app/views/permissionDenied';\nimport RouteError from 'app/views/routeError';\nimport {metric} from 'app/utils/analytics';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\n\ntype AsyncComponentProps = Partial<RouteComponentProps<{}, {}>>;\n\ntype AsyncComponentState = {\n  loading: boolean;\n  reloading: boolean;\n  error: boolean;\n  errors: object;\n  remainingRequests?: number;\n  [key: string]: any;\n};\n\ntype SearchInputProps = React.ComponentProps<typeof AsyncComponentSearchInput>;\n\ntype RenderSearchInputArgs = Omit<\n  SearchInputProps,\n  'api' | 'onSuccess' | 'onError' | 'url' | keyof WithRouterProps\n> & {\n  stateKey?: string;\n  url?: SearchInputProps['url'];\n};\n\n/**\n * Wraps methods on the AsyncComponent to catch errors and set the `error`\n * state on error.\n */\nfunction wrapErrorHandling<T extends any[], U>(\n  component: AsyncComponent,\n  fn: (...args: T) => U\n) {\n  return (...args: T): U | null => {\n    try {\n      return fn(...args);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error);\n      setTimeout(() => {\n        throw error;\n      });\n      component.setState({error});\n      return null;\n    }\n  };\n}\n\nexport default class AsyncComponent<\n  P extends AsyncComponentProps = AsyncComponentProps,\n  S extends AsyncComponentState = AsyncComponentState\n> extends React.Component<P, S> {\n  static propTypes: any = {\n    location: PropTypes.object,\n    router: PropTypes.object,\n  };\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  // Override this flag to have the component reload it's state when the window\n  // becomes visible again. This will set the loading and reloading state, but\n  // will not render a loading state during reloading.\n  //\n  // eslint-disable-next-line react/sort-comp\n  reloadOnVisible = false;\n\n  // When enabling reloadOnVisible, this flag may be used to turn on and off\n  // the reloading. This is useful if your component only needs to reload when\n  // becoming visible during certain states.\n  //\n  // eslint-disable-next-line react/sort-comp\n  shouldReloadOnVisible = false;\n\n  // This affects how the component behaves when `remountComponent` is called\n  // By default, the component gets put back into a \"loading\" state when re-fetching data.\n  // If this is true, then when we fetch data, the original ready component remains mounted\n  // and it will need to handle any additional \"reloading\" states\n  shouldReload = false;\n\n  // should `renderError` render the `detail` attribute of a 400 error\n  shouldRenderBadRequests = false;\n\n  constructor(props: P, context: any) {\n    super(props, context);\n\n    this.fetchData = wrapErrorHandling(this, this.fetchData.bind(this));\n    this.render = wrapErrorHandling(this, this.render.bind(this));\n\n    this.state = this.getDefaultState() as Readonly<S>;\n\n    this._measurement = {\n      hasMeasured: false,\n    };\n    if (props.routes && props.routes) {\n      metric.mark({name: `async-component-${getRouteStringFromRoutes(props.routes)}`});\n    }\n  }\n\n  UNSAFE_componentWillMount() {\n    this.api = new Client();\n    this.fetchData();\n\n    if (this.reloadOnVisible) {\n      document.addEventListener('visibilitychange', this.visibilityReloader);\n    }\n  }\n\n  // Compatibility shim for child classes that call super on this hook.\n  UNSAFE_componentWillReceiveProps(_newProps: P, _newContext: any) {}\n\n  componentDidUpdate(prevProps: P, prevContext: any) {\n    const isRouterInContext = !!prevContext.router;\n    const isLocationInProps = prevProps.location !== undefined;\n\n    const currentLocation = isLocationInProps\n      ? this.props.location\n      : isRouterInContext\n      ? this.context.router.location\n      : null;\n    const prevLocation = isLocationInProps\n      ? prevProps.location\n      : isRouterInContext\n      ? prevContext.router.location\n      : null;\n\n    if (!(currentLocation && prevLocation)) {\n      return;\n    }\n\n    // Take a measurement from when this component is initially created until it finishes it's first\n    // set of API requests\n    if (\n      !this._measurement.hasMeasured &&\n      this._measurement.finished &&\n      this.props.routes\n    ) {\n      const routeString = getRouteStringFromRoutes(this.props.routes);\n      metric.measure({\n        name: 'app.component.async-component',\n        start: `async-component-${routeString}`,\n        data: {\n          route: routeString,\n          error: this._measurement.error,\n        },\n      });\n      this._measurement.hasMeasured = true;\n    }\n\n    // Re-fetch data when router params change.\n    if (\n      !isEqual(this.props.params, prevProps.params) ||\n      currentLocation.search !== prevLocation.search ||\n      currentLocation.state !== prevLocation.state\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  componentWillUnmount() {\n    this.api.clear();\n    document.removeEventListener('visibilitychange', this.visibilityReloader);\n  }\n\n  api: Client = new Client();\n  private _measurement: any;\n\n  // XXX: cant call this getInitialState as React whines\n  getDefaultState(): AsyncComponentState {\n    const endpoints = this.getEndpoints();\n    const state = {\n      // has all data finished requesting?\n      loading: true,\n      // is the component reload\n      reloading: false,\n      // is there an error loading ANY data?\n      error: false,\n      errors: {},\n    };\n    endpoints.forEach(([stateKey, _endpoint]) => {\n      state[stateKey] = null;\n    });\n    return state;\n  }\n\n  // Check if we should measure render time for this component\n  markShouldMeasure = ({\n    remainingRequests,\n    error,\n  }: {remainingRequests?: number; error?: any} = {}) => {\n    if (!this._measurement.hasMeasured) {\n      this._measurement.finished = remainingRequests === 0;\n      this._measurement.error = error || this._measurement.error;\n    }\n  };\n\n  remountComponent = () => {\n    if (this.shouldReload) {\n      this.reloadData();\n    } else {\n      this.setState(this.getDefaultState(), this.fetchData);\n    }\n  };\n\n  visibilityReloader = () =>\n    this.shouldReloadOnVisible &&\n    !this.state.loading &&\n    !document.hidden &&\n    this.reloadData();\n\n  reloadData() {\n    this.fetchData({reloading: true});\n  }\n\n  fetchData = (extraState?: object) => {\n    const endpoints = this.getEndpoints();\n\n    if (!endpoints.length) {\n      this.setState({loading: false, error: false});\n      return;\n    }\n\n    // Cancel any in flight requests\n    this.api.clear();\n\n    this.setState({\n      loading: true,\n      error: false,\n      remainingRequests: endpoints.length,\n      ...extraState,\n    });\n\n    endpoints.forEach(([stateKey, endpoint, params, options]) => {\n      options = options || {};\n      // If you're using nested async components/views make sure to pass the\n      // props through so that the child component has access to props.location\n      const locationQuery = (this.props.location && this.props.location.query) || {};\n      let query = (params && params.query) || {};\n      // If paginate option then pass entire `query` object to API call\n      // It should only be expecting `query.cursor` for pagination\n      if (options.paginate || locationQuery.cursor) {\n        query = {...locationQuery, ...query};\n      }\n\n      this.api.request(endpoint, {\n        method: 'GET',\n        ...params,\n        query,\n        success: (data, _, jqXHR) => {\n          this.handleRequestSuccess({stateKey, data, jqXHR}, true);\n        },\n        error: error => {\n          // Allow endpoints to fail\n          // allowError can have side effects to handle the error\n          if (options.allowError && options.allowError(error)) {\n            error = null;\n          }\n          this.handleError(error, [stateKey, endpoint, params, options]);\n        },\n      });\n    });\n  };\n\n  onRequestSuccess(_resp /*{stateKey, data, jqXHR}*/) {\n    // Allow children to implement this\n  }\n\n  onRequestError(_resp, _args) {\n    // Allow children to implement this\n  }\n\n  onLoadAllEndpointsSuccess() {\n    // Allow children to implement this\n  }\n\n  handleRequestSuccess({stateKey, data, jqXHR}, initialRequest?: boolean) {\n    this.setState(\n      prevState => {\n        const state = {\n          [stateKey]: data,\n          // TODO(billy): This currently fails if this request is retried by SudoModal\n          [`${stateKey}PageLinks`]: jqXHR && jqXHR.getResponseHeader('Link'),\n        };\n\n        if (initialRequest) {\n          state.remainingRequests = prevState.remainingRequests! - 1;\n          state.loading = prevState.remainingRequests! > 1;\n          state.reloading = prevState.reloading && state.loading;\n          this.markShouldMeasure({remainingRequests: state.remainingRequests});\n        }\n\n        return state;\n      },\n      () => {\n        //if everything is loaded and we don't have an error, call the callback\n        if (this.state.remainingRequests === 0 && !this.state.error) {\n          this.onLoadAllEndpointsSuccess();\n        }\n      }\n    );\n    this.onRequestSuccess({stateKey, data, jqXHR});\n  }\n\n  handleError(error, args) {\n    const [stateKey] = args;\n    if (error && error.responseText) {\n      Sentry.addBreadcrumb({\n        message: error.responseText,\n        category: 'xhr',\n        level: Sentry.Severity.Error,\n      });\n    }\n    this.setState(prevState => {\n      const loading = prevState.remainingRequests! > 1;\n      const state: AsyncComponentState = {\n        [stateKey]: null,\n        errors: {\n          ...prevState.errors,\n          [stateKey]: error,\n        },\n        error: prevState.error || !!error,\n        remainingRequests: prevState.remainingRequests! - 1,\n        loading,\n        reloading: prevState.reloading && loading,\n      };\n      this.markShouldMeasure({remainingRequests: state.remainingRequests, error: true});\n\n      return state;\n    });\n    this.onRequestError(error, args);\n  }\n\n  /**\n   * @deprecated use getEndpoints\n   */\n  getEndpointParams() {\n    // eslint-disable-next-line no-console\n    console.warn('getEndpointParams is deprecated');\n    return {};\n  }\n\n  /**\n   * @deprecated use getEndpoints\n   */\n  getEndpoint() {\n    // eslint-disable-next-line no-console\n    console.warn('getEndpoint is deprecated');\n    return null;\n  }\n\n  /**\n   * Return a list of endpoint queries to make.\n   *\n   * return [\n   *   ['stateKeyName', '/endpoint/', {optional: 'query params'}, {options}]\n   * ]\n   */\n  getEndpoints(): Array<[string, string, any?, any?]> {\n    const endpoint = this.getEndpoint();\n    if (!endpoint) {\n      return [];\n    }\n    return [['data', endpoint, this.getEndpointParams()]];\n  }\n\n  renderSearchInput({stateKey, url, ...props}: RenderSearchInputArgs) {\n    const [firstEndpoint] = this.getEndpoints() || [null];\n    const stateKeyOrDefault = stateKey || (firstEndpoint && firstEndpoint[0]);\n    const urlOrDefault = url || (firstEndpoint && firstEndpoint[1]);\n    return (\n      <AsyncComponentSearchInput\n        url={urlOrDefault}\n        {...props}\n        api={this.api}\n        onSuccess={(data, jqXHR) => {\n          this.handleRequestSuccess({stateKey: stateKeyOrDefault, data, jqXHR});\n        }}\n        onError={() => {\n          this.renderError(new Error('Error with AsyncComponentSearchInput'));\n        }}\n      />\n    );\n  }\n\n  renderLoading(): React.ReactNode {\n    return <LoadingIndicator />;\n  }\n\n  renderError(error?: Error, disableLog = false, disableReport = false): React.ReactNode {\n    const {errors} = this.state;\n\n    // 401s are captured by SudoModal, but may be passed back to AsyncComponent if they close the modal without identifying\n    const unauthorizedErrors = Object.values(errors).find(\n      resp => resp && resp.status === 401\n    );\n\n    // Look through endpoint results to see if we had any 403s, means their role can not access resource\n    const permissionErrors = Object.values(errors).find(\n      resp => resp && resp.status === 403\n    );\n\n    // If all error responses have status code === 0, then show error message but don't\n    // log it to sentry\n    const shouldLogSentry =\n      !!Object.values(errors).find(resp => resp && resp.status !== 0) || disableLog;\n\n    if (unauthorizedErrors) {\n      return (\n        <LoadingError message={t('You are not authorized to access this resource.')} />\n      );\n    }\n\n    if (permissionErrors) {\n      return <PermissionDenied />;\n    }\n\n    if (this.shouldRenderBadRequests) {\n      const badRequests = Object.values(errors)\n        .filter(\n          resp =>\n            resp && resp.status === 400 && resp.responseJSON && resp.responseJSON.detail\n        )\n        .map(resp => resp.responseJSON.detail);\n\n      if (badRequests.length) {\n        return <LoadingError message={badRequests.join('\\n')} />;\n      }\n    }\n\n    return (\n      <RouteError\n        error={error}\n        disableLogSentry={!shouldLogSentry}\n        disableReport={disableReport}\n      />\n    );\n  }\n\n  renderComponent() {\n    return this.state.loading && (!this.shouldReload || !this.state.reloading)\n      ? this.renderLoading()\n      : this.state.error\n      ? this.renderError(new Error('Unable to load all required endpoints'))\n      : this.renderBody();\n  }\n\n  /**\n   * Renders once all endpoints have been loaded\n   */\n  renderBody(): React.ReactNode {\n    // Allow children to implement this\n    throw new Error('Not implemented');\n  }\n\n  render() {\n    return this.renderComponent();\n  }\n}\n"],"sourceRoot":""}