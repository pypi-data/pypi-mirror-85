{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/organizationIntegrations/addIntegration.tsx","webpack:///./app/views/integrationInstallation.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","AddIntegration","dialog","openDialog","urlParams","integrationId","props","trackIntegrationEvent","eventKey","eventName","integration","provider","key","integration_type","analyticsParams","organization","setupDialog","url","width","height","computeCenteredWindow","left","top","query","integration_id","account","installUrl","queryString","opts","window","open","focus","didReceiveMessage","message","origin","document","location","source","data","success","onInstall","addSuccessMessage","t","name","addErrorMessage","error","addEventListener","removeEventListener","close","screenLeft","undefined","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","children","React","Component","IntegrationInstallation","state","orgId","slug","router","push","id","onSelectOrg","value","setState","selectedOrg","reloading","api","request","trackOpened","providers","hasAccess","org","access","includes","already_installed","view","startSession","installationId","params","AddButton","p","priority","busy","addIntegration","disabled","onClick","installation_id","choices","organizations","map","FeatureList","getIntegrationFeatureGate","tct","type","icon","size","InstallLink","href","Fragment","features","metadata","label","inline","stacked","required","deprecatedSelectControl","onChange","placeholder","options","className","renderAddButton","find","providerId"],"mappings":"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","file":"ExtensionsIntegrationInstallation.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport * as queryString from 'query-string';\n\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'app/types';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport SentryTypes from 'app/sentryTypes';\nimport {trackIntegrationEvent} from 'app/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  provider: IntegrationProvider;\n  onInstall: (data: IntegrationWithConfig) => void;\n  integrationId?: string;\n  account?: string;\n  organization?: Organization; //for analytics\n  analyticsParams?: {\n    view: 'integrations_directory_integration_detail' | 'integrations_directory';\n    already_installed: boolean;\n  };\n};\n\nexport default class AddIntegration extends React.Component<Props> {\n  static propTypes = {\n    children: PropTypes.func.isRequired,\n    provider: PropTypes.object.isRequired,\n    onInstall: PropTypes.func.isRequired,\n    integrationId: PropTypes.string,\n    account: PropTypes.string,\n    organization: SentryTypes.Organization,\n  };\n\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog && this.dialog.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    //Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {integrationId} = this.props;\n    //if we have the integrationId, it's used for the re-auth flow\n    trackIntegrationEvent(\n      {\n        eventKey: integrationId\n          ? 'integrations.reauth_start'\n          : 'integrations.installation_start',\n        eventName: integrationId\n          ? 'Integrations: Reauth Start'\n          : 'Integrations: Installation Start',\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = this.props.provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    const query: {[key: string]: string} = {...urlParams};\n\n    if (integrationId) {\n      query.integration_id = integrationId;\n    }\n\n    if (this.props.account) {\n      query.account = this.props.account;\n    }\n\n    const installUrl = `${url}?${queryString.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {integrationId} = this.props;\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    this.props.onInstall(data);\n    trackIntegrationEvent(\n      {\n        eventKey: integrationId\n          ? 'integrations.reauth_complete'\n          : 'integrations.installation_complete',\n        eventName: integrationId\n          ? 'Integrations: Reauth Complete'\n          : 'Integrations: Installation Complete',\n        integration: this.props.provider.key,\n        integration_type: 'first_party',\n        ...this.props.analyticsParams,\n      },\n      this.props.organization\n    );\n    addSuccessMessage(t('%s added', this.props.provider.name));\n  };\n\n  render() {\n    return this.props.children(this.openDialog);\n  }\n}\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Organization, IntegrationProvider, Integration} from 'app/types';\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {t, tct} from 'app/locale';\nimport {\n  trackIntegrationEvent,\n  getIntegrationFeatureGate,\n} from 'app/utils/integrationUtil';\nimport AddIntegration from 'app/views/organizationIntegrations/addIntegration';\nimport Alert from 'app/components/alert';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport Field from 'app/views/settings/components/forms/field';\nimport {IconFlag} from 'app/icons';\nimport NarrowLayout from 'app/components/narrowLayout';\nimport SelectControl from 'app/components/forms/selectControl';\n\ntype Props = RouteComponentProps<{providerId: string; installationId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  selectedOrg: string | null;\n  organization: Organization | null;\n  providers: IntegrationProvider[];\n};\n\nexport default class IntegrationInstallation extends AsyncView<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      selectedOrg: null,\n      organization: null,\n      providers: [],\n    };\n  }\n\n  getEndpoints(): [string, string][] {\n    return [['organizations', '/organizations/']];\n  }\n\n  getTitle() {\n    return t('Choose Installation Organization');\n  }\n\n  trackOpened() {\n    const {organization} = this.state;\n    const provider = this.provider;\n    //should have these set but need to make TS happy\n    if (!organization || !provider) {\n      return;\n    }\n\n    //TODO: Probably don't need this event anymore\n    trackIntegrationEvent(\n      {\n        eventKey: 'integrations.install_modal_opened',\n        eventName: 'Integrations: Install Modal Opened',\n        integration_type: 'first_party',\n        integration: provider.key,\n        //We actually don't know if it's installed but neither does the user in the view and multiple installs is possible\n        already_installed: false,\n        view: 'external_install',\n      },\n      organization,\n      {startSession: true}\n    );\n  }\n\n  get provider(): IntegrationProvider | undefined {\n    return this.state.providers.find(p => p.key === this.props.params.providerId);\n  }\n\n  onInstall = (data: Integration) => {\n    const {organization} = this.state;\n    const orgId = organization && organization.slug;\n    this.props.router.push(\n      `/settings/${orgId}/integrations/${data.provider.key}/${data.id}`\n    );\n  };\n\n  onSelectOrg = ({value: orgId}: {value: string}) => {\n    this.setState({selectedOrg: orgId, reloading: true});\n    const reloading = false;\n\n    this.api.request(`/organizations/${orgId}/`, {\n      success: (organization: Organization) =>\n        this.setState({organization, reloading}, this.trackOpened),\n      error: () => {\n        this.setState({reloading});\n        addErrorMessage(t('Failed to retrieve organization details'));\n      },\n    });\n\n    this.api.request(`/organizations/${orgId}/config/integrations/`, {\n      success: (providers: {providers: IntegrationProvider[]}) =>\n        this.setState({providers: providers.providers, reloading}),\n      error: () => {\n        this.setState({reloading});\n        addErrorMessage(t('Failed to retrieve integration provider details'));\n      },\n    });\n  };\n\n  hasAccess = (org: Organization) => org.access.includes('org:integrations');\n\n  renderAddButton() {\n    const {organization, reloading} = this.state;\n    const {installationId} = this.props.params;\n\n    const AddButton = (p: React.ComponentProps<typeof Button>) => (\n      <Button priority=\"primary\" busy={reloading} {...p}>\n        Install Integration\n      </Button>\n    );\n\n    if (!this.provider) {\n      return <AddButton disabled />;\n    }\n\n    return (\n      <AddIntegration provider={this.provider} onInstall={this.onInstall}>\n        {addIntegration => (\n          <AddButton\n            disabled={!!organization && !this.hasAccess(organization)}\n            onClick={() => addIntegration({installation_id: installationId})}\n          />\n        )}\n      </AddIntegration>\n    );\n  }\n\n  renderBody() {\n    const {organization, selectedOrg} = this.state;\n    const choices = this.state.organizations.map((org: Organization) => [\n      org.slug,\n      org.slug,\n    ]);\n\n    const {FeatureList} = getIntegrationFeatureGate();\n\n    return (\n      <NarrowLayout>\n        <h3>{t('Finish integration installation')}</h3>\n        <p>\n          {tct(\n            `Please pick a specific [organization:organization] to link with\n            your integration installation.`,\n            {\n              organization: <strong />,\n            }\n          )}\n        </p>\n\n        {selectedOrg && organization && !this.hasAccess(organization) && (\n          <Alert type=\"error\" icon={<IconFlag size=\"md\" />}>\n            <p>\n              {tct(\n                `You do not have permission to install integrations in\n                  [organization]. Ask an organization owner or manager to\n                  visit this page to finish installing this integration.`,\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <InstallLink>{window.location.href}</InstallLink>\n          </Alert>\n        )}\n\n        {this.provider && organization && this.hasAccess(organization) && FeatureList && (\n          <React.Fragment>\n            <p>\n              {tct(\n                'The following features will be available for [organization] when installed.',\n                {organization: <strong>{organization.slug}</strong>}\n              )}\n            </p>\n            <FeatureList\n              organization={organization}\n              features={this.provider.metadata.features}\n              provider={this.provider}\n            />\n          </React.Fragment>\n        )}\n\n        <Field label={t('Organization')} inline={false} stacked required>\n          {() => (\n            <SelectControl\n              deprecatedSelectControl\n              onChange={this.onSelectOrg}\n              value={selectedOrg}\n              placeholder={t('Select an organization')}\n              options={choices.map(([value, label]) => ({value, label}))}\n            />\n          )}\n        </Field>\n\n        <div className=\"form-actions\">{this.renderAddButton()}</div>\n      </NarrowLayout>\n    );\n  }\n}\n\nconst InstallLink = styled('pre')`\n  margin-bottom: 0;\n  background: #fbe3e1;\n`;\n"],"sourceRoot":""}