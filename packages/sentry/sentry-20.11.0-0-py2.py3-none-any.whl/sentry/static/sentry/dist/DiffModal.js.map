{"version":3,"sources":["webpack:///./app/components/issueDiff/renderGroupingInfo.tsx","webpack:///./app/components/issueDiff/index.tsx","webpack:///./app/components/modals/diffModal.tsx","webpack:///./app/components/events/interfaces/frame/utils.tsx","webpack:///./app/components/events/interfaces/rawStacktraceContent.jsx","webpack:///./app/components/events/interfaces/types.ts","webpack:///./app/utils/getStacktraceBody.tsx"],"names":["renderGroupVariant","variant","title","t","type","hash","push","description","rv","join","component","renderComponent","contributes","name","id","hint","name_or_id","values","value","line","renderGroupingInfo","groupingInfo","Object","map","flat","IssueDiff","state","loading","groupingDiff","baseEvent","targetEvent","SplitDiffAsync","undefined","toggleDiffMode","setState","fetchData","fetchEventData","issueId","eventId","a","props","orgId","project","api","paramEventId","requestPromise","event","eventID","slug","getStacktraceBody","this","baseIssueId","targetIssueId","baseEventId","targetEventId","Promise","all","then","addErrorMessage","className","DiffComponent","showDiffToggle","features","includes","StyledIssueDiff","HeaderWrapper","merged","active","barId","size","onClick","i","key","base","target","React","Component","defaultProps","withApi","shouldForwardProp","p","isPropValid","theme","backgroundSecondary","space","background","DiffModal","Body","modalCss","trimPackage","pkg","pieces","split","test","length","replace","getPlatform","dataPlatform","platform","getFrameHint","frame","symbolicatorStatus","func","warningIcon","color","errorIcon","match","SymbolicatorStatus","MISSING_SYMBOL","UNKNOWN_IMAGE","MISSING","MALFORMED","getPythonFrame","result","defined","filename","module","lineNo","colNo","context","forEach","item","trim","ljust","str","len","Array","Math","max","getFrame","frameIdx","getJavaScriptFrame","getRubyFrame","idx","funcName","getPHPFrame","getJavaFrame","instructionAddr","symbolAddr","getNativeFrame","render","data","exception","frames","reverse","unshift","getJavaPreamble","getPreamble","entries","exc","find","msg","formatted","filter","stacktrace","rawStacktraceContent","reduce","acc","concat"],"mappings":"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","file":"DiffModal.js","sourcesContent":["import {t} from 'app/locale';\nimport {EventGroupComponent, EventGroupInfo, EventGroupVariant} from 'app/types';\n\nfunction renderGroupingInfo(groupingInfo: EventGroupInfo): string[] {\n  return Object.values(groupingInfo).map(renderGroupVariant).flat();\n}\n\nfunction renderGroupVariant(variant: EventGroupVariant): string[] {\n  const title = [t('Type: %s', variant.type)];\n\n  if (variant.hash) {\n    title.push(t('Hash: %s', variant.hash));\n  }\n\n  if (variant.description) {\n    title.push(t('Description: %s', variant.description));\n  }\n\n  const rv = [title.join('\\n')];\n\n  if (variant.component) {\n    rv.push(renderComponent(variant.component).join('\\n'));\n  }\n\n  return rv;\n}\n\nfunction renderComponent(component: EventGroupComponent): string[] {\n  if (!component.contributes) {\n    return [];\n  }\n\n  const {name, id, hint} = component;\n  const name_or_id = name || id;\n  const title = name_or_id && hint ? `${name_or_id} (${hint})` : name_or_id;\n  const rv = title ? [title] : [];\n\n  if (component.values) {\n    for (const value of component.values) {\n      if (typeof value === 'string') {\n        rv.push(`  ${value}`);\n        continue;\n      }\n\n      for (const line of renderComponent(value)) {\n        rv.push(`  ${line}`);\n      }\n    }\n  }\n\n  return rv;\n}\n\nexport default renderGroupingInfo;\n","import React from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'app/api';\nimport {addErrorMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport withApi from 'app/utils/withApi';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport getStacktraceBody from 'app/utils/getStacktraceBody';\nimport SplitDiff from 'app/components/splitDiff';\nimport ButtonBar from 'app/components/buttonBar';\nimport Button from 'app/components/button';\nimport space from 'app/styles/space';\nimport {Project} from 'app/types';\n\nimport renderGroupingInfo from './renderGroupingInfo';\n\nconst defaultProps = {\n  baseEventId: 'latest',\n  targetEventId: 'latest',\n};\n\ntype DefaultProps = typeof defaultProps;\n\ntype Props = {\n  api: Client;\n  baseIssueId: string;\n  targetIssueId: string;\n  orgId: string;\n  project: Project;\n  baseEventId?: string;\n  targetEventId?: string;\n  className?: string;\n};\n\ntype State = {\n  loading: boolean;\n  groupingDiff: boolean;\n  baseEvent: Array<string>;\n  targetEvent: Array<string>;\n  SplitDiffAsync?: typeof SplitDiff;\n};\n\nclass IssueDiff extends React.Component<Props, State> {\n  static defaultProps: DefaultProps = defaultProps;\n\n  state: State = {\n    loading: true,\n    groupingDiff: false,\n    baseEvent: [],\n    targetEvent: [],\n\n    // `SplitDiffAsync` is an async-loaded component\n    // This will eventually contain a reference to the exported component from `./splitDiff`\n    SplitDiffAsync: undefined,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    const {baseIssueId, targetIssueId, baseEventId, targetEventId} = this.props;\n\n    // Fetch component and event data\n    Promise.all([\n      import(/* webpackChunkName: \"splitDiff\" */ '../splitDiff'),\n      this.fetchEventData(baseIssueId, baseEventId ?? 'latest'),\n      this.fetchEventData(targetIssueId, targetEventId ?? 'latest'),\n    ])\n      .then(([{default: SplitDiffAsync}, baseEvent, targetEvent]) => {\n        this.setState({\n          SplitDiffAsync,\n          baseEvent,\n          targetEvent,\n          loading: false,\n        });\n      })\n      .catch(() => {\n        addErrorMessage(t('Error loading events'));\n      });\n  }\n\n  toggleDiffMode = () => {\n    this.setState(\n      state => ({groupingDiff: !state.groupingDiff, loading: true}),\n      this.fetchData\n    );\n  };\n\n  fetchEventData = async (issueId: string, eventId: string) => {\n    const {orgId, project, api} = this.props;\n    const {groupingDiff} = this.state;\n\n    let paramEventId = eventId;\n\n    if (eventId === 'latest') {\n      const event = await api.requestPromise(`/issues/${issueId}/events/latest/`);\n      paramEventId = event.eventID;\n    }\n\n    if (groupingDiff) {\n      const groupingInfo = await api.requestPromise(\n        `/projects/${orgId}/${project.slug}/events/${paramEventId}/grouping-info/`\n      );\n      return renderGroupingInfo(groupingInfo);\n    }\n\n    const event = await api.requestPromise(\n      `/projects/${orgId}/${project.slug}/events/${paramEventId}/`\n    );\n    return getStacktraceBody(event);\n  };\n\n  render() {\n    const {className, project} = this.props;\n    const {\n      SplitDiffAsync: DiffComponent,\n      loading,\n      groupingDiff,\n      baseEvent,\n      targetEvent,\n    } = this.state;\n\n    const showDiffToggle = project.features.includes('similarity-view-v2');\n\n    return (\n      <StyledIssueDiff className={className} loading={loading}>\n        {loading && <LoadingIndicator />}\n        {!loading && showDiffToggle && (\n          <HeaderWrapper>\n            <ButtonBar merged active={groupingDiff ? 'grouping' : 'event'}>\n              <Button barId=\"event\" size=\"small\" onClick={this.toggleDiffMode}>\n                {t('Diff stacktrace and message')}\n              </Button>\n              <Button barId=\"grouping\" size=\"small\" onClick={this.toggleDiffMode}>\n                {t('Diff grouping information')}\n              </Button>\n            </ButtonBar>\n          </HeaderWrapper>\n        )}\n        {!loading &&\n          DiffComponent &&\n          baseEvent.map((value, i) => (\n            <DiffComponent\n              key={i}\n              base={value}\n              target={targetEvent[i] ?? ''}\n              type=\"words\"\n            />\n          ))}\n      </StyledIssueDiff>\n    );\n  }\n}\n\nexport default withApi(IssueDiff);\n\n// required for tests which do not provide API as context\nexport {IssueDiff};\n\nconst StyledIssueDiff = styled('div', {\n  shouldForwardProp: p => isPropValid(p) && p !== 'loading',\n})<Pick<State, 'loading'>>`\n  background-color: ${p => p.theme.backgroundSecondary};\n  overflow: auto;\n  padding: ${space(1)};\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n\n  ${p =>\n    p.loading &&\n    `\n        background-color: ${p.theme.background};\n        justify-content: center;\n      `};\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  margin-bottom: ${space(2)};\n`;\n","import React from 'react';\nimport {css} from '@emotion/core';\n\nimport IssueDiff from 'app/components/issueDiff';\nimport {ModalRenderProps} from 'app/actionCreators/modal';\n\ntype Props = ModalRenderProps & React.ComponentProps<typeof IssueDiff>;\n\nconst DiffModal = ({className, Body, ...props}: Props) => (\n  <Body>\n    <IssueDiff className={className} {...props} />\n  </Body>\n);\n\nconst modalCss = css`\n  .modal-dialog {\n    display: flex;\n    margin: 0;\n    left: 10px;\n    right: 10px;\n    top: 10px;\n    bottom: 10px;\n    width: auto;\n  }\n  .modal-content {\n    display: flex;\n    flex: 1;\n  }\n  .modal-body {\n    display: flex;\n    overflow: hidden;\n    flex: 1;\n  }\n`;\n\nexport {modalCss};\n\nexport default DiffModal;\n","import React from 'react';\n\nimport {PlatformType, Frame} from 'app/types';\nimport {t} from 'app/locale';\nimport {IconQuestion, IconWarning} from 'app/icons';\nimport {SymbolicatorStatus} from 'app/components/events/interfaces/types';\n\nexport function trimPackage(pkg: string) {\n  const pieces = pkg.split(/^([a-z]:\\\\|\\\\\\\\)/i.test(pkg) ? '\\\\' : '/');\n  const filename = pieces[pieces.length - 1] || pieces[pieces.length - 2] || pkg;\n  return filename.replace(/\\.(dylib|so|a|dll|exe)$/, '');\n}\n\nexport function getPlatform(dataPlatform: PlatformType | null, platform: string) {\n  // prioritize the frame platform but fall back to the platform\n  // of the stacktrace / exception\n  return dataPlatform || platform;\n}\n\nexport function getFrameHint(frame: Frame) {\n  // returning [hintText, hintIcon]\n  const {symbolicatorStatus} = frame;\n  const func = frame.function || '<unknown>';\n  // Custom color used to match adjacent text.\n  const warningIcon = <IconQuestion size=\"xs\" color={'#2c45a8' as any} />;\n  const errorIcon = <IconWarning size=\"xs\" color=\"red300\" />;\n\n  if (func.match(/^@objc\\s/)) {\n    return [t('Objective-C -> Swift shim frame'), warningIcon];\n  }\n  if (func.match(/^__?hidden#\\d+/)) {\n    return [t('Hidden function from bitcode build'), errorIcon];\n  }\n  if (!symbolicatorStatus && func === '<unknown>') {\n    // Only render this if the event was not symbolicated.\n    return [t('No function name was supplied by the client SDK.'), warningIcon];\n  }\n\n  if (\n    func === '<unknown>' ||\n    (func === '<redacted>' && symbolicatorStatus === SymbolicatorStatus.MISSING_SYMBOL)\n  ) {\n    switch (symbolicatorStatus) {\n      case SymbolicatorStatus.MISSING_SYMBOL:\n        return [t('The symbol was not found within the debug file.'), warningIcon];\n      case SymbolicatorStatus.UNKNOWN_IMAGE:\n        return [t('No image is specified for the address of the frame.'), warningIcon];\n      case SymbolicatorStatus.MISSING:\n        return [\n          t('The debug file could not be retrieved from any of the sources.'),\n          errorIcon,\n        ];\n      case SymbolicatorStatus.MALFORMED:\n        return [t('The retrieved debug file could not be processed.'), errorIcon];\n      default:\n    }\n  }\n\n  if (func === '<redacted>') {\n    return [t('Unknown system frame. Usually from beta SDKs'), warningIcon];\n  }\n\n  return [null, null];\n}\n","import {defined, trim} from 'app/utils';\nimport {trimPackage} from 'app/components/events/interfaces/frame/utils';\n\nfunction getJavaScriptFrame(frame) {\n  let result = '';\n  if (defined(frame.function)) {\n    result += '  at ' + frame.function + '(';\n  } else {\n    result += '  at ? (';\n  }\n  if (defined(frame.filename)) {\n    result += frame.filename;\n  } else if (defined(frame.module)) {\n    result += frame.module;\n  }\n  if (defined(frame.lineNo) && frame.lineNo >= 0) {\n    result += ':' + frame.lineNo;\n  }\n  if (defined(frame.colNo) && frame.colNo >= 0) {\n    result += ':' + frame.colNo;\n  }\n  result += ')';\n  return result;\n}\n\nfunction getRubyFrame(frame) {\n  let result = '  from ';\n  if (defined(frame.filename)) {\n    result += frame.filename;\n  } else if (defined(frame.module)) {\n    result += '(' + frame.module + ')';\n  } else {\n    result += '?';\n  }\n  if (defined(frame.lineNo) && frame.lineNo >= 0) {\n    result += ':' + frame.lineNo;\n  }\n  if (defined(frame.colNo) && frame.colNo >= 0) {\n    result += ':' + frame.colNo;\n  }\n  if (defined(frame.function)) {\n    result += ':in `' + frame.function + \"'\";\n  }\n  return result;\n}\n\nexport function getPHPFrame(frame, idx) {\n  const funcName = frame.function === 'null' ? '{main}' : frame.function;\n  return `#${idx} ${frame.filename || frame.module}(${frame.lineNo}): ${funcName}`;\n}\n\nexport function getPythonFrame(frame) {\n  let result = '';\n  if (defined(frame.filename)) {\n    result += '  File \"' + frame.filename + '\"';\n  } else if (defined(frame.module)) {\n    result += '  Module \"' + frame.module + '\"';\n  } else {\n    result += '  ?';\n  }\n  if (defined(frame.lineNo) && frame.lineNo >= 0) {\n    result += ', line ' + frame.lineNo;\n  }\n  if (defined(frame.colNo) && frame.colNo >= 0) {\n    result += ', col ' + frame.colNo;\n  }\n  if (defined(frame.function)) {\n    result += ', in ' + frame.function;\n  }\n  if (defined(frame.context)) {\n    frame.context.forEach(item => {\n      if (item[0] === frame.lineNo) {\n        result += '\\n    ' + trim(item[1]);\n      }\n    });\n  }\n  return result;\n}\n\nexport function getJavaFrame(frame) {\n  let result = '    at';\n  if (defined(frame.module)) {\n    result += ' ' + frame.module + '.';\n  }\n  if (defined(frame.function)) {\n    result += frame.function;\n  }\n  if (defined(frame.filename)) {\n    result += '(' + frame.filename;\n    if (defined(frame.lineNo) && frame.lineNo >= 0) {\n      result += ':' + frame.lineNo;\n    }\n    result += ')';\n  }\n  return result;\n}\n\nfunction ljust(str, len) {\n  return str + Array(Math.max(0, len - str.length) + 1).join(' ');\n}\n\nexport function getNativeFrame(frame) {\n  let result = '  ';\n  if (defined(frame.package)) {\n    result += ljust(trimPackage(frame.package), 20);\n  }\n  if (defined(frame.instructionAddr)) {\n    result += ljust(frame.instructionAddr, 12);\n  }\n  result += ' ' + (frame.function || frame.symbolAddr);\n  if (defined(frame.filename)) {\n    result += ' (' + frame.filename;\n    if (defined(frame.lineNo) && frame.lineNo >= 0) {\n      result += ':' + frame.lineNo;\n    }\n    result += ')';\n  }\n  return result;\n}\n\nexport function getJavaPreamble(exception) {\n  let result = `${exception.type}: ${exception.value}`;\n  if (exception.module) {\n    result = `${exception.module}.${result}`;\n  }\n  return result;\n}\n\nfunction getPreamble(exception, platform) {\n  switch (platform) {\n    case 'java':\n      return getJavaPreamble(exception);\n    default:\n      return exception.type + ': ' + exception.value;\n  }\n}\n\nfunction getFrame(frame, frameIdx, platform) {\n  if (frame.platform) {\n    platform = frame.platform;\n  }\n  switch (platform) {\n    case 'javascript':\n      return getJavaScriptFrame(frame);\n    case 'ruby':\n      return getRubyFrame(frame);\n    case 'php':\n      return getPHPFrame(frame, frameIdx);\n    case 'python':\n      return getPythonFrame(frame);\n    case 'java':\n      return getJavaFrame(frame);\n    case 'objc':\n    // fallthrough\n    case 'cocoa':\n    // fallthrough\n    case 'native':\n      return getNativeFrame(frame);\n    default:\n      return getPythonFrame(frame);\n  }\n}\n\nexport default function render(data, platform, exception) {\n  const frames = [];\n\n  data.frames.forEach((frame, frameIdx) => {\n    frames.push(getFrame(frame, frameIdx, platform));\n  });\n\n  if (platform !== 'python') {\n    frames.reverse();\n  }\n\n  if (exception) {\n    frames.unshift(getPreamble(exception, platform));\n  }\n\n  return frames.join('\\n');\n}\n","export enum SymbolicatorStatus {\n  SYMBOLICATED = 'symbolicated',\n  MISSING_SYMBOL = 'missing_symbol',\n  UNKNOWN_IMAGE = 'unknown_image',\n  MISSING = 'missing',\n  MALFORMED = 'malformed',\n}\n","import rawStacktraceContent from 'app/components/events/interfaces/rawStacktraceContent';\nimport {Event} from 'app/types';\n\nexport default function getStacktraceBody(event: Event) {\n  if (!event || !event.entries) {\n    return [];\n  }\n\n  // TODO(billyvg): This only accounts for the first exception, will need navigation to be able to\n  // diff multiple exceptions\n  //\n  // See: https://github.com/getsentry/sentry/issues/6055\n  const exc = event.entries.find(({type}) => type === 'exception');\n\n  if (!exc) {\n    // Look for a message if not an exception\n    const msg = event.entries.find(({type}) => type === 'message');\n    if (!msg) {\n      return [];\n    }\n    return msg?.data?.formatted && [msg.data.formatted];\n  }\n\n  if (!exc.data) {\n    return [];\n  }\n\n  // TODO(ts): This should be verified when EntryData has the correct type\n  return exc.data.values\n    .filter(value => !!value.stacktrace)\n    .map(value => rawStacktraceContent(value.stacktrace, event.platform, value))\n    .reduce((acc, value) => acc.concat(value), []);\n}\n"],"sourceRoot":""}