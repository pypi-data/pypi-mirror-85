{"version":3,"sources":["webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/withTeams.tsx","webpack:///./app/actions/settingsBreadcrumbActions.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/crumb.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/divider.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/menuItem.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx","webpack:///./app/stores/settingsBreadcrumbStore.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx","webpack:///./app/views/settings/components/settingsBreadcrumb/index.jsx","webpack:///./app/views/settings/components/settingsLayout.tsx"],"names":["recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","withTeams","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","Reflux","listenTo","TeamStore","getInitialState","teams","getAll","onTeamUpdate","this","setState","render","props","state","createActions","Crumb","p","theme","subText","space","textColor","StyledDivider","gray200","isHover","StyledIconChevron","IconChevron","Divider","isLast","direction","size","React","Component","BreadcrumbDropdown","args","open","isOpen","close","handleStateChange","handleMouseEnterActor","leaving","clearTimeout","entering","setTimeout","enterDelay","handleMouseEnter","handleMouseLeave","handleClickActor","handleClose","hasMenu","route","name","items","onSelect","blendCorner","onOpen","onClose","menuProps","onMouseEnter","onMouseLeave","virtualizedHeight","getActorProps","actions","onClick","bind","defaultProps","MenuItem","children","StyledMenuItem","overflowEllipsis","findFirstRouteWithoutRouteParam","filter","find","includes","OrganizationCrumb","handleSelect","item","hasProjectParam","projectId","destination","browserHistory","push","orgId","value","organizations","organization","length","CrumbLink","slug","BadgeWrapper","avatarSize","org","label","withLatestContext","ProjectCrumb","latestOrganization","latestProject","project","projects","ProjectName","mini","avatarProps","consistentWidth","withProjects","storeConfig","pathMap","init","reset","SettingsBreadcrumbActions","mapTitle","onUpdateRouteMap","trimMappings","onTrimMappings","title","getRouteStringFromRoutes","trigger","routePath","fullPath","startsWith","createStore","TeamCrumb","team","teamId","teamItem","MENUS","Organization","Project","Team","SettingsBreadcrumb","prevProps","className","lastRouteIndex","r","lastIndexOf","Breadcrumbs","i","pathTitle","createMenu","Menu","CrumbPicker","key","contextTypes","SentryTypes","connect","SettingsBreadcrumbStore","Link","blue300","SettingsLayout","navVisible","navOffsetTop","unlisten","headerRef","createRef","listen","toggleNav","toggleBodyScrollLock","current","getBoundingClientRect","bottom","lock","bodyElement","document","getElementsByTagName","window","scrollTo","classList","router","renderNavigation","childProps","isValidElement","childRoutes","childRoute","shouldRenderNavigation","SettingsColumn","ref","HeaderContent","NavMenuToggle","priority","t","icon","aria-hidden","StyledSettingsBreadcrumb","MaxWidthContainer","SidebarWrapper","isVisible","offsetTop","NavMask","Content","Button","breakpoints","settings","containerWidth","sidebarWidth","background","border","slideInLeft","zIndex","settingsSidebarNav","dropShadowHeavy","settingsSidebarNavMask","fadeIn"],"mappings":"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","file":"AccountSettingsLayout~OrganizationSettingsLayout~ProjectSettingsLayout~SettingsIndex.js","sourcesContent":["import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\n\nimport {Team} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport TeamStore from 'app/stores/teamStore';\n\ntype InjectedTeamsProps = {\n  teams: Team[];\n};\n\ntype State = {\n  teams: Team[];\n};\n\n/**\n * Higher order component that uses TeamStore and provides a list of teams\n */\nconst withTeams = <P extends InjectedTeamsProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<Omit<P, keyof InjectedTeamsProps>, State>({\n    displayName: `withTeams(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate') as any],\n\n    getInitialState() {\n      return {\n        teams: TeamStore.getAll(),\n      };\n    },\n\n    onTeamUpdate() {\n      this.setState({\n        teams: TeamStore.getAll(),\n      });\n    },\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P)} teams={this.state.teams as Team[]} />\n      );\n    },\n  });\n\nexport default withTeams;\n","import Reflux from 'reflux';\n\nexport default Reflux.createActions(['mapTitle', 'trimMappings']);\n","import styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\n\nconst Crumb = styled('div')`\n  display: flex;\n  align-items: center;\n  position: relative;\n  font-size: 18px;\n  color: ${p => p.theme.subText};\n  padding-right: ${space(1)};\n  cursor: pointer;\n  white-space: nowrap;\n\n  > span {\n    transition: 0.1s all ease;\n  }\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default Crumb;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {IconChevron} from 'app/icons';\n\nconst StyledDivider = styled('span')`\n  display: inline-block;\n  margin-left: 6px;\n  color: ${p => p.theme.gray200};\n  position: relative;\n  top: -1px;\n\n  ${p =>\n    p.isHover\n      ? `\n    transform: rotate(90deg);\n    top: 0;\n    `\n      : ''};\n`;\n\nconst StyledIconChevron = styled(IconChevron)`\n  display: block;\n`;\n\nclass Divider extends React.Component {\n  static propTypes = {\n    isHover: PropTypes.bool,\n    isLast: PropTypes.bool,\n  };\n  render() {\n    const {isHover, isLast} = this.props;\n    if (isLast) {\n      return null;\n    }\n\n    return (\n      <StyledDivider isHover={isHover}>\n        <StyledIconChevron direction=\"right\" size=\"14px\" />\n      </StyledDivider>\n    );\n  }\n}\n\nexport default Divider;\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';\nimport DropdownAutoCompleteMenu from 'app/components/dropdownAutoComplete/menu';\nimport Divider from 'app/views/settings/components/settingsBreadcrumb/divider';\n\nconst EXIT_DELAY = 0;\n\nclass BreadcrumbDropdown extends React.Component {\n  static propTypes = {\n    hasMenu: PropTypes.bool,\n    route: PropTypes.object,\n    isLast: PropTypes.bool,\n    enterDelay: PropTypes.number,\n    name: PropTypes.node,\n    items: PropTypes.array,\n    onSelect: PropTypes.func,\n  };\n\n  static defaultProps = {\n    enterDelay: 0,\n  };\n\n  constructor(...args) {\n    super(...args);\n\n    this.entering = false;\n    this.leaving = false;\n    this.state = {\n      isOpen: false,\n    };\n  }\n\n  open = () => {\n    this.setState({isOpen: true});\n  };\n\n  close = () => {\n    this.setState({isOpen: false});\n  };\n\n  handleStateChange = () => {};\n\n  // Adds a delay when mouse hovers on actor (in this case the breadcrumb)\n  handleMouseEnterActor = () => {\n    if (this.leaving) {\n      clearTimeout(this.leaving);\n    }\n\n    this.entering = setTimeout(() => this.open(), this.props.enterDelay);\n  };\n\n  // handles mouseEnter event on actor and menu, should clear the leaving timeout and keep menu open\n  handleMouseEnter = () => {\n    if (this.leaving) {\n      clearTimeout(this.leaving);\n    }\n\n    this.open();\n  };\n\n  // handles mouseLeave event on actor and menu, adds a timeout before updating state to account for\n  // mouseLeave into\n  handleMouseLeave = () => {\n    if (this.entering) {\n      clearTimeout(this.entering);\n    }\n\n    this.leaving = setTimeout(() => this.close(), EXIT_DELAY);\n  };\n\n  // Close immediately when actor is clicked clicked\n  handleClickActor = () => {\n    this.close();\n  };\n\n  // Close immediately when clicked outside\n  handleClose = () => {\n    this.close();\n  };\n\n  render() {\n    const {hasMenu, route, isLast, name, items, onSelect} = this.props;\n    return (\n      <DropdownAutoCompleteMenu\n        blendCorner={false}\n        onOpen={this.handleMouseEnter}\n        onClose={this.close}\n        isOpen={this.state.isOpen}\n        menuProps={{\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave,\n        }}\n        items={items}\n        onSelect={onSelect}\n        virtualizedHeight={41}\n      >\n        {({getActorProps, actions, isOpen}) => (\n          <Crumb\n            {...getActorProps({\n              hasMenu,\n              onClick: this.handleClickActor.bind(this, actions),\n              onMouseEnter: this.handleMouseEnterActor.bind(this, actions),\n              onMouseLeave: this.handleMouseLeave.bind(this, actions),\n            })}\n          >\n            <span>{name || route.name} </span>\n            <Divider isHover={hasMenu && isOpen} isLast={isLast} />\n          </Crumb>\n        )}\n      </DropdownAutoCompleteMenu>\n    );\n  }\n}\n\nexport default BreadcrumbDropdown;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nclass MenuItem extends React.Component {\n  render() {\n    const {children, ...props} = this.props;\n    return <StyledMenuItem {...props}>{children}</StyledMenuItem>;\n  }\n}\n\nconst StyledMenuItem = styled('div')`\n  font-size: 14px;\n  ${overflowEllipsis};\n`;\n\nexport default MenuItem;\n","/**\n * For all routes with a `path`, find the first route without a route param (e.g. :apiKey)\n *\n * @param {Object[]} routes A list of react-router route objects\n * @param {Object} route If given, will only take into account routes between `route` and end of the routes list\n * @return Object Returns a react-router route object\n */\nexport default function findFirstRouteWithoutRouteParam(routes, route) {\n  const routeIndex = routes.indexOf(route);\n  const routesToSearch = route && routeIndex > -1 ? routes.slice(routeIndex) : routes;\n\n  return (\n    routesToSearch.filter(({path}) => !!path).find(({path}) => !path.includes(':')) ||\n    route\n  );\n}\n","import {browserHistory} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport IdBadge from 'app/components/idBadge';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\nimport SentryTypes from 'app/sentryTypes';\nimport findFirstRouteWithoutRouteParam from 'app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withLatestContext from 'app/utils/withLatestContext';\n\nimport {CrumbLink} from '.';\n\nclass OrganizationCrumb extends React.Component {\n  static propTypes = {\n    organizations: PropTypes.array,\n    organization: SentryTypes.Organization,\n    routes: PropTypes.array,\n    route: PropTypes.object,\n  };\n\n  handleSelect = item => {\n    const {params, routes, route} = this.props;\n    // If we are currently in a project context, and we're attempting to switch organizations,\n    // then we need to default to index route (e.g. `route`)\n    //\n    // Otherwise, find the last route without a router param\n    // e.g. if you are on API details, we want the API listing\n    // This fails if our route tree is not nested\n    const hasProjectParam = !!params.projectId;\n    let destination = hasProjectParam\n      ? route\n      : findFirstRouteWithoutRouteParam(routes.slice(routes.indexOf(route)));\n\n    // It's possible there is no route without route params (e.g. organization settings index),\n    // in which case, we can use the org settings index route (e.g. `route`)\n    if (!hasProjectParam && typeof destination === 'undefined') {\n      destination = route;\n    }\n\n    browserHistory.push(\n      recreateRoute(destination, {\n        routes,\n        params: {...params, orgId: item.value},\n      })\n    );\n  };\n\n  render() {\n    const {organizations, organization, params, routes, route, ...props} = this.props;\n\n    if (!organization) {\n      return null;\n    }\n\n    const hasMenu = organizations.length > 1;\n\n    return (\n      <BreadcrumbDropdown\n        name={\n          <CrumbLink\n            to={recreateRoute(route, {\n              routes,\n              params: {...params, orgId: organization.slug},\n            })}\n          >\n            <BadgeWrapper>\n              <IdBadge avatarSize={18} organization={organization} />\n            </BadgeWrapper>\n          </CrumbLink>\n        }\n        onSelect={this.handleSelect}\n        hasMenu={hasMenu}\n        route={route}\n        items={organizations.map(org => ({\n          value: org.slug,\n          label: (\n            <MenuItem>\n              <IdBadge organization={org} />\n            </MenuItem>\n          ),\n        }))}\n        {...props}\n      />\n    );\n  }\n}\n\nconst BadgeWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nexport {OrganizationCrumb};\nexport default withLatestContext(OrganizationCrumb);\n","import {browserHistory} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport IdBadge from 'app/components/idBadge';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\nimport SentryTypes from 'app/sentryTypes';\nimport findFirstRouteWithoutRouteParam from 'app/views/settings/components/settingsBreadcrumb/findFirstRouteWithoutRouteParam';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\nimport space from 'app/styles/space';\nimport withLatestContext from 'app/utils/withLatestContext';\nimport withProjects from 'app/utils/withProjects';\n\nimport {CrumbLink} from '.';\n\nclass ProjectCrumb extends React.Component {\n  static propTypes = {\n    organization: SentryTypes.Organization,\n    project: SentryTypes.Project,\n    projects: PropTypes.array,\n    routes: PropTypes.array,\n    route: PropTypes.object,\n  };\n\n  handleSelect = item => {\n    const {routes, route, params} = this.props;\n\n    // We have to make exceptions for routes like \"Project Alerts Rule Edit\" or \"Client Key Details\"\n    // Since these models are project specific, we need to traverse up a route when switching projects\n    //\n    // we manipulate `routes` so that it doesn't include the current project's route\n    // which, unlike the org version, does not start with a route param\n    browserHistory.push(\n      recreateRoute(\n        findFirstRouteWithoutRouteParam(routes.slice(routes.indexOf(route) + 1), route),\n        {\n          routes,\n          params: {...params, projectId: item.value},\n        }\n      )\n    );\n  };\n\n  render() {\n    const {\n      organization: latestOrganization,\n      project: latestProject,\n      projects,\n      route,\n      ...props\n    } = this.props;\n\n    if (!latestOrganization) {\n      return null;\n    }\n    if (!projects) {\n      return null;\n    }\n\n    const hasMenu = projects && projects.length > 1;\n\n    return (\n      <BreadcrumbDropdown\n        hasMenu={hasMenu}\n        route={route}\n        name={\n          <ProjectName>\n            {!latestProject ? (\n              <LoadingIndicator mini />\n            ) : (\n              <CrumbLink\n                to={replaceRouterParams('/settings/:orgId/projects/:projectId/', {\n                  orgId: latestOrganization.slug,\n                  projectId: latestProject.slug,\n                })}\n              >\n                <IdBadge project={latestProject} avatarSize={18} />\n              </CrumbLink>\n            )}\n          </ProjectName>\n        }\n        onSelect={this.handleSelect}\n        items={projects.map(project => ({\n          value: project.slug,\n          label: (\n            <MenuItem>\n              <IdBadge\n                project={project}\n                avatarProps={{consistentWidth: true}}\n                avatarSize={18}\n              />\n            </MenuItem>\n          ),\n        }))}\n        {...props}\n      />\n    );\n  }\n}\n\nexport {ProjectCrumb};\nexport default withProjects(withLatestContext(ProjectCrumb));\n\n// Set height of crumb because of spinner\nconst SPINNER_SIZE = '24px';\n\nconst ProjectName = styled('div')`\n  display: flex;\n\n  .loading {\n    width: ${SPINNER_SIZE};\n    height: ${SPINNER_SIZE};\n    margin: 0 ${space(0.25)} 0 0;\n  }\n`;\n","import Reflux from 'reflux';\nimport {PlainRoute} from 'react-router';\n\nimport SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\n\ntype UpdateData = {\n  routes: PlainRoute<any>[];\n  title: string;\n};\n\ntype SettingsBreadcrumbStoreInterface = {\n  init: () => void;\n  reset: () => void;\n  onUpdateRouteMap: (update: UpdateData) => void;\n  onTrimMappings: (routes: PlainRoute<any>[]) => void;\n};\n\ntype Internals = {\n  pathMap: Record<string, string>;\n};\n\nconst storeConfig: Reflux.StoreDefinition &\n  SettingsBreadcrumbStoreInterface &\n  Internals = {\n  pathMap: {},\n  init() {\n    this.reset();\n    this.listenTo(SettingsBreadcrumbActions.mapTitle, this.onUpdateRouteMap);\n    this.listenTo(SettingsBreadcrumbActions.trimMappings, this.onTrimMappings);\n  },\n\n  reset() {\n    this.pathMap = {};\n  },\n\n  onUpdateRouteMap({routes, title}) {\n    this.pathMap[getRouteStringFromRoutes(routes)] = title;\n    this.trigger(this.pathMap);\n  },\n\n  onTrimMappings(routes) {\n    const routePath = getRouteStringFromRoutes(routes);\n    for (const fullPath in this.pathMap) {\n      if (!routePath.startsWith(fullPath)) {\n        delete this.pathMap[fullPath];\n      }\n    }\n    this.trigger(this.pathMap);\n  },\n};\n\ntype SettingsBreadcrumbStore = Reflux.Store & SettingsBreadcrumbStoreInterface;\n\nexport default Reflux.createStore(storeConfig) as SettingsBreadcrumbStore;\n","import {browserHistory} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport BreadcrumbDropdown from 'app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown';\nimport IdBadge from 'app/components/idBadge';\nimport MenuItem from 'app/views/settings/components/settingsBreadcrumb/menuItem';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport withTeams from 'app/utils/withTeams';\n\nimport {CrumbLink} from '.';\n\nclass TeamCrumb extends React.Component {\n  static propTypes = {\n    teams: PropTypes.array,\n    routes: PropTypes.array,\n    route: PropTypes.object,\n  };\n\n  render() {\n    const {teams, params, routes, route, ...props} = this.props;\n\n    const team = teams.find(({slug}) => slug === params.teamId);\n    const hasMenu = teams.length > 1;\n\n    if (!team) {\n      return null;\n    }\n\n    return (\n      <BreadcrumbDropdown\n        name={\n          <CrumbLink\n            to={recreateRoute(route, {\n              routes,\n              params: {...params, teamId: team.slug},\n            })}\n          >\n            <IdBadge avatarSize={18} team={team} />\n          </CrumbLink>\n        }\n        onSelect={item => {\n          browserHistory.push(\n            recreateRoute('', {\n              routes,\n              params: {...params, teamId: item.value},\n            })\n          );\n        }}\n        hasMenu={hasMenu}\n        route={route}\n        items={teams.map(teamItem => ({\n          value: teamItem.slug,\n          label: (\n            <MenuItem>\n              <IdBadge team={teamItem} />\n            </MenuItem>\n          ),\n        }))}\n        {...props}\n      />\n    );\n  }\n}\n\nexport {TeamCrumb};\nexport default withTeams(TeamCrumb);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\nimport styled from '@emotion/styled';\n\nimport Crumb from 'app/views/settings/components/settingsBreadcrumb/crumb';\nimport Divider from 'app/views/settings/components/settingsBreadcrumb/divider';\nimport OrganizationCrumb from 'app/views/settings/components/settingsBreadcrumb/organizationCrumb';\nimport ProjectCrumb from 'app/views/settings/components/settingsBreadcrumb/projectCrumb';\nimport SentryTypes from 'app/sentryTypes';\nimport SettingsBreadcrumbActions from 'app/actions/settingsBreadcrumbActions';\nimport SettingsBreadcrumbStore from 'app/stores/settingsBreadcrumbStore';\nimport TeamCrumb from 'app/views/settings/components/settingsBreadcrumb/teamCrumb';\nimport Link from 'app/components/links/link';\nimport getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';\nimport recreateRoute from 'app/utils/recreateRoute';\n\nconst MENUS = {\n  Organization: OrganizationCrumb,\n  Project: ProjectCrumb,\n  Team: TeamCrumb,\n};\n\nclass SettingsBreadcrumb extends React.Component {\n  static propTypes = {\n    routes: PropTypes.array,\n    // pathMap maps stringifed routes to a breadcrumb title. This property is\n    // provided by the SettingsBreadcrumbStore.\n    pathMap: PropTypes.object,\n  };\n\n  static contextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  static defaultProps = {\n    pathMap: {},\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.routes === prevProps.routes) {\n      return;\n    }\n    SettingsBreadcrumbActions.trimMappings(this.props.routes);\n  }\n\n  render() {\n    const {className, routes, params, pathMap} = this.props;\n    const lastRouteIndex = routes.map(r => !!r.name).lastIndexOf(true);\n\n    return (\n      <Breadcrumbs className={className}>\n        {routes.map((route, i) => {\n          if (!route.name) {\n            return null;\n          }\n          const pathTitle = pathMap[getRouteStringFromRoutes(routes.slice(0, i + 1))];\n          const isLast = i === lastRouteIndex;\n          const createMenu = MENUS[route.name];\n          const Menu = typeof createMenu === 'function' && createMenu;\n          const hasMenu = !!Menu;\n          const CrumbPicker = hasMenu\n            ? Menu\n            : () => (\n                <Crumb route={route} isLast={isLast}>\n                  <CrumbLink to={recreateRoute(route, {routes, params})}>\n                    {pathTitle || route.name}{' '}\n                  </CrumbLink>\n                  <Divider isLast={isLast} />\n                </Crumb>\n              );\n\n          return (\n            <CrumbPicker\n              key={`${route.name}:${route.path}`}\n              routes={routes}\n              params={params}\n              route={route}\n              isLast={isLast}\n            />\n          );\n        })}\n      </Breadcrumbs>\n    );\n  }\n}\n\nexport default createReactClass({\n  displayName: 'ConnectedSettingsBreadcrumb',\n  mixins: [Reflux.connect(SettingsBreadcrumbStore, 'pathMap')],\n  render() {\n    return <SettingsBreadcrumb {...this.props} {...this.state} />;\n  },\n});\n\nconst CrumbLink = styled(Link)`\n  display: block;\n\n  &.focus-visible {\n    outline: none;\n    box-shadow: ${p => p.theme.blue300} 0 2px 0;\n  }\n\n  color: ${p => p.theme.subText};\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport {CrumbLink};\n\nconst Breadcrumbs = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport {browserHistory} from 'react-router';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport Button from 'app/components/button';\nimport {slideInLeft, fadeIn} from 'app/styles/animations';\nimport {IconClose, IconMenu} from 'app/icons';\n\nimport SettingsBreadcrumb from './settingsBreadcrumb';\nimport SettingsHeader from './settingsHeader';\nimport SettingsSearch from './settingsSearch';\n\ntype Props = {\n  renderNavigation?: () => React.ReactNode;\n  children: React.ReactNode;\n} & RouteComponentProps<{}, {}>;\n\ntype State = {\n  /**\n   * This is used when the screen is small enough that the navigation should\n   * be hidden. On large screens this state will end up unused.\n   */\n  navVisible: boolean;\n  /**\n   * Offset mobile settings navigation by the height of main navigation,\n   * settings breadcrumbs and optional warnings.\n   */\n  navOffsetTop: number;\n};\n\nclass SettingsLayout extends React.Component<Props, State> {\n  static propTypes = {\n    renderNavigation: PropTypes.func,\n    route: PropTypes.object,\n    router: PropTypes.object,\n    routes: PropTypes.array,\n  };\n\n  state = {\n    navVisible: false,\n    navOffsetTop: 0,\n  };\n\n  componentDidMount() {\n    // Close the navigation when navigating.\n    this.unlisten = browserHistory.listen(() => this.toggleNav(false));\n  }\n\n  componentWillUnmount() {\n    this.unlisten();\n  }\n\n  unlisten!: () => void;\n  headerRef = React.createRef<HTMLDivElement>();\n\n  toggleNav(navVisible: boolean) {\n    // when the navigation is opened, body should be scroll-locked\n    this.toggleBodyScrollLock(navVisible);\n\n    this.setState({\n      navOffsetTop: this.headerRef.current?.getBoundingClientRect().bottom ?? 0,\n      navVisible,\n    });\n  }\n\n  toggleBodyScrollLock(lock: boolean) {\n    const bodyElement = document.getElementsByTagName('body')[0];\n\n    if (window.scrollTo) {\n      window.scrollTo(0, 0);\n    }\n    bodyElement.classList[lock ? 'add' : 'remove']('scroll-lock');\n  }\n\n  render() {\n    const {params, routes, route, router, renderNavigation, children} = this.props;\n    const {navVisible, navOffsetTop} = this.state;\n\n    // We want child's view's props\n    const childProps =\n      children && React.isValidElement(children) ? children.props : this.props;\n    const childRoutes = childProps.routes || routes || [];\n    const childRoute = childProps.route || route || {};\n    const shouldRenderNavigation = typeof renderNavigation === 'function';\n\n    return (\n      <SettingsColumn>\n        <SettingsHeader ref={this.headerRef}>\n          <HeaderContent>\n            {shouldRenderNavigation && (\n              <NavMenuToggle\n                priority=\"link\"\n                label={t('Open the menu')}\n                icon={navVisible ? <IconClose aria-hidden /> : <IconMenu aria-hidden />}\n                onClick={() => this.toggleNav(!navVisible)}\n              />\n            )}\n            <StyledSettingsBreadcrumb\n              params={params}\n              routes={childRoutes}\n              route={childRoute}\n            />\n            <SettingsSearch routes={routes} router={router} params={params} />\n          </HeaderContent>\n        </SettingsHeader>\n\n        <MaxWidthContainer>\n          {shouldRenderNavigation && (\n            <SidebarWrapper isVisible={navVisible} offsetTop={navOffsetTop}>\n              {renderNavigation!()}\n            </SidebarWrapper>\n          )}\n          <NavMask isVisible={navVisible} onClick={() => this.toggleNav(false)} />\n          <Content>{children}</Content>\n        </MaxWidthContainer>\n      </SettingsColumn>\n    );\n  }\n}\n\nconst SettingsColumn = styled('div')`\n  display: flex;\n  flex-direction: column;\n  flex: 1; /* so this stretches vertically so that footer is fixed at bottom */\n  min-width: 0; /* fixes problem when child content stretches beyond layout width */\n  footer {\n    margin-top: 0;\n  }\n`;\n\nconst HeaderContent = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst NavMenuToggle = styled(Button)`\n  display: none;\n  margin: -${space(1)} ${space(1)} -${space(1)} -${space(1)};\n  padding: ${space(1)};\n  color: ${p => p.theme.subText};\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.textColor};\n  }\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: block;\n  }\n`;\n\nconst StyledSettingsBreadcrumb = styled(SettingsBreadcrumb)`\n  flex: 1;\n`;\n\nconst MaxWidthContainer = styled('div')`\n  display: flex;\n  max-width: ${p => p.theme.settings.containerWidth};\n  flex: 1;\n`;\n\nconst SidebarWrapper = styled('div')<{isVisible: boolean; offsetTop: number}>`\n  flex-shrink: 0;\n  width: ${p => p.theme.settings.sidebarWidth};\n  background: ${p => p.theme.background};\n  border-right: 1px solid ${p => p.theme.border};\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: ${p => (p.isVisible ? 'block' : 'none')};\n    position: fixed;\n    top: ${p => p.offsetTop}px;\n    bottom: 0;\n    overflow-y: auto;\n    animation: ${slideInLeft} 100ms ease-in-out;\n    z-index: ${p => p.theme.zIndex.settingsSidebarNav};\n    box-shadow: ${p => p.theme.dropShadowHeavy};\n  }\n`;\n\nconst NavMask = styled('div')<{isVisible: boolean}>`\n  display: none;\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    display: ${p => (p.isVisible ? 'block' : 'none')};\n    background: rgba(0, 0, 0, 0.35);\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    z-index: ${p => p.theme.zIndex.settingsSidebarNavMask};\n    animation: ${fadeIn} 250ms ease-in-out;\n  }\n`;\n\n/**\n * Note: `overflow: hidden` will cause some buttons in `SettingsPageHeader` to be cut off because it has negative margin.\n * Will also cut off tooltips.\n */\nconst Content = styled('div')`\n  flex: 1;\n  padding: ${space(4)};\n  min-width: 0; /* keep children from stretching container */\n`;\n\nexport default SettingsLayout;\n"],"sourceRoot":""}