{"version":3,"sources":["webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/components/sentryDocumentTitle.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/views/settings/project/projectEnvironments.tsx"],"names":["SettingsPageHeading","this","props","icon","title","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","SentryDocumentTitle","_title","objSlug","children","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","PermissionAlert","access","hasAccess","type","size","t","getUrlRoutingName","env","name","encodeURIComponent","displayName","getDisplayName","ProjectEnvironments","state","project","environments","isLoading","toggleEnv","shouldHide","orgId","projectId","api","request","method","data","isHidden","success","addSuccessMessage","tct","environment","error","addErrorMessage","complete","fetchData","bind","prevProps","pathname","endsWith","setState","query","visibility","message","EnvironmentRow","ALL_ENVIRONMENTS_KEY","id","isSystemRow","envs","buttonText","Fragment","renderAllEnvironmentsSystemRow","key","onHide","actionText","shouldShowAction","length","renderEnvironmentList","renderEmpty","baseUrl","underlined","index","isActive","renderBody","EnvironmentItem","Name","EnvironmentButton","disabled","onClick","PanelItem","Button","withApi"],"mappings":"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","file":"ProjectEnvironments.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import React, {FunctionComponent} from 'react';\nimport DocumentTitle from 'react-document-title';\n\ntype DocumentTitleProps = {\n  // Main page title\n  title: string;\n  // Organization or project slug to give title some context\n  objSlug: string;\n  children?: React.ReactNode;\n};\n\nconst SentryDocumentTitle: FunctionComponent<DocumentTitleProps> = (\n  props: DocumentTitleProps\n) => {\n  const _title = `${props.title} - ${props.objSlug} - Sentry`;\n  return <DocumentTitle title={_title}>{props.children}</DocumentTitle>;\n};\n\nexport default SentryDocumentTitle;\n","import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {t} from 'app/locale';\nimport Access from 'app/components/acl/access';\nimport Alert from 'app/components/alert';\nimport {IconWarning} from 'app/icons';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['project:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" icon={<IconWarning size=\"xs\" />} {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner, manager, or admin role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nPermissionAlert.propTypes = {\n  access: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default PermissionAlert;\n","import {Environment} from 'app/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Partial<Environment>) {\n  if (env.name) {\n    return encodeURIComponent(env.name);\n  }\n\n  if (env.displayName) {\n    return encodeURIComponent(env.displayName);\n  }\n  return DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Partial<Environment>) {\n  return env.name || env.displayName || DEFAULT_EMPTY_ENV_NAME;\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {WithRouterProps} from 'react-router';\n\nimport {ALL_ENVIRONMENTS_KEY} from 'app/constants';\nimport {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t, tct} from 'app/locale';\nimport Access from 'app/components/acl/access';\nimport SentryDocumentTitle from 'app/components/sentryDocumentTitle';\nimport withApi from 'app/utils/withApi';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport ListLink from 'app/components/links/listLink';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport NavTabs from 'app/components/navTabs';\nimport PermissionAlert from 'app/views/settings/project/permissionAlert';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport recreateRoute from 'app/utils/recreateRoute';\nimport space from 'app/styles/space';\nimport {getUrlRoutingName, getDisplayName} from 'app/utils/environment';\nimport {Environment, Project} from 'app/types';\nimport {Client} from 'app/api';\n\ntype Props = {\n  api: Client;\n} & WithRouterProps<{orgId: string; projectId: string}, {}>;\n\ntype State = {\n  isLoading: boolean;\n  project: null | Project;\n  environments: null | Environment[];\n};\n\nclass ProjectEnvironments extends React.Component<Props, State> {\n  state: State = {\n    project: null,\n    environments: null,\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.location.pathname.endsWith('hidden/') !==\n      prevProps.location.pathname.endsWith('hidden/')\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n\n    if (!this.state.isLoading) {\n      this.setState({isLoading: true});\n    }\n\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/environments/`, {\n      query: {\n        visibility: isHidden ? 'hidden' : 'visible',\n      },\n      success: environments => {\n        this.setState({environments, isLoading: false});\n      },\n    });\n  }\n\n  fetchProjectDetails() {\n    const {orgId, projectId} = this.props.params;\n    this.props.api.request(`/projects/${orgId}/${projectId}/`, {\n      success: project => {\n        this.setState({project});\n      },\n    });\n  }\n\n  // Toggle visibility of environment\n  toggleEnv = (env: Environment, shouldHide: boolean) => {\n    const {orgId, projectId} = this.props.params;\n\n    this.props.api.request(\n      `/projects/${orgId}/${projectId}/environments/${getUrlRoutingName(env)}/`,\n      {\n        method: 'PUT',\n        data: {\n          name: env.name,\n          isHidden: shouldHide,\n        },\n        success: () => {\n          addSuccessMessage(\n            tct('Updated [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        error: () => {\n          addErrorMessage(\n            tct('Unable to update [environment]', {\n              environment: getDisplayName(env),\n            })\n          );\n        },\n        complete: this.fetchData.bind(this),\n      }\n    );\n  };\n\n  renderEmpty() {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const message = isHidden\n      ? t(\"You don't have any hidden environments.\")\n      : t(\"You don't have any environments yet.\");\n    return <EmptyMessage>{message}</EmptyMessage>;\n  }\n\n  /**\n   * Renders rows for \"system\" environments:\n   * - \"All Environments\"\n   * - \"No Environment\"\n   *\n   */\n  renderAllEnvironmentsSystemRow() {\n    // Not available in \"Hidden\" tab\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    if (isHidden) {\n      return null;\n    }\n    return (\n      <EnvironmentRow\n        name={ALL_ENVIRONMENTS_KEY}\n        environment={{\n          id: ALL_ENVIRONMENTS_KEY,\n          name: ALL_ENVIRONMENTS_KEY,\n          displayName: ALL_ENVIRONMENTS_KEY,\n        }}\n        isSystemRow\n      />\n    );\n  }\n\n  renderEnvironmentList(envs: Environment[]) {\n    const isHidden = this.props.location.pathname.endsWith('hidden/');\n    const buttonText = isHidden ? t('Show') : t('Hide');\n\n    return (\n      <React.Fragment>\n        {this.renderAllEnvironmentsSystemRow()}\n        {envs.map(env => (\n          <EnvironmentRow\n            key={env.id}\n            name={env.name}\n            environment={env}\n            isHidden={isHidden}\n            onHide={this.toggleEnv}\n            actionText={buttonText}\n            shouldShowAction\n          />\n        ))}\n      </React.Fragment>\n    );\n  }\n\n  renderBody() {\n    const {environments, isLoading} = this.state;\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    return (\n      <PanelBody>\n        {environments?.length\n          ? this.renderEnvironmentList(environments)\n          : this.renderEmpty()}\n      </PanelBody>\n    );\n  }\n\n  render() {\n    const {routes, params, location} = this.props;\n    const isHidden = location.pathname.endsWith('hidden/');\n\n    const baseUrl = recreateRoute('', {routes, params, stepBack: -1});\n    return (\n      <div>\n        <SentryDocumentTitle title={t('Environments')} objSlug={params.projectId} />\n        <SettingsPageHeader\n          title={t('Manage Environments')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={baseUrl} index isActive={() => !isHidden}>\n                {t('Environments')}\n              </ListLink>\n              <ListLink to={`${baseUrl}hidden/`} index isActive={() => isHidden}>\n                {t('Hidden')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n        <PermissionAlert />\n\n        <Panel>\n          <PanelHeader>{isHidden ? t('Hidden') : t('Active Environments')}</PanelHeader>\n          {this.renderBody()}\n        </Panel>\n      </div>\n    );\n  }\n}\n\ntype RowProps = {\n  environment: Environment;\n  name: string;\n  onHide?: (env: Environment, isHidden: boolean) => void;\n  isHidden?: boolean;\n  actionText?: string;\n  isSystemRow?: boolean;\n  shouldShowAction?: boolean;\n};\n\nfunction EnvironmentRow({\n  environment,\n  name,\n  onHide,\n  shouldShowAction = false,\n  isSystemRow = false,\n  isHidden = false,\n  actionText = '',\n}: RowProps) {\n  return (\n    <EnvironmentItem>\n      <Name>{isSystemRow ? t('All Environments') : name}</Name>\n      <Access access={['project:write']}>\n        {({hasAccess}) => (\n          <React.Fragment>\n            {shouldShowAction && onHide && (\n              <EnvironmentButton\n                size=\"xsmall\"\n                disabled={!hasAccess}\n                onClick={() => onHide(environment, !isHidden)}\n              >\n                {actionText}\n              </EnvironmentButton>\n            )}\n          </React.Fragment>\n        )}\n      </Access>\n    </EnvironmentItem>\n  );\n}\n\nconst EnvironmentItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Name = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst EnvironmentButton = styled(Button)`\n  margin-left: ${space(0.5)};\n`;\n\nexport {ProjectEnvironments};\nexport default withApi(ProjectEnvironments);\n"],"sourceRoot":""}