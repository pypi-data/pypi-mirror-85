{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/account/apiApplications/row.tsx","webpack:///./app/views/settings/account/apiApplications/index.tsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","Row","state","loading","handleRemove","api","app","onRemove","setState","a","addLoadingMessage","requestPromise","id","method","clearIndicators","addErrorMessage","t","StyledPanelItem","ApplicationNameWrapper","ApplicationName","to","getDynamicText","value","name","fixed","ClientId","clientID","aria-label","onClick","disabled","PanelItem","Link","theme","headerFontSize","gray200","fontSizeMedium","ApiApplications","handleCreateApplication","addSuccessMessage","router","push","handleRemoveApplication","appList","filter","priority","size","isCircled","isEmpty","length","map","key"],"mappings":"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","file":"ApiApplications.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Link from 'app/components/links/link';\nimport {ApiApplication} from 'app/types';\nimport {Client} from 'app/api';\nimport {PanelItem} from 'app/components/panels';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport {IconDelete} from 'app/icons';\nimport getDynamicText from 'app/utils/getDynamicText';\nimport space from 'app/styles/space';\n\nconst ROUTE_PREFIX = '/settings/account/api/';\n\ntype Props = {\n  api: Client;\n  app: ApiApplication;\n  onRemove: (app: ApiApplication) => void;\n};\n\ntype State = {\n  loading: boolean;\n};\n\nclass Row extends React.Component<Props, State> {\n  state = {\n    loading: false,\n  };\n\n  handleRemove = () => {\n    if (this.state.loading) {\n      return;\n    }\n\n    const {api, app, onRemove} = this.props;\n\n    this.setState(\n      {\n        loading: true,\n      },\n      async () => {\n        addLoadingMessage();\n\n        try {\n          await api.requestPromise(`/api-applications/${app.id}/`, {\n            method: 'DELETE',\n          });\n\n          clearIndicators();\n          onRemove(app);\n        } catch (_err) {\n          addErrorMessage(t('Unable to remove application. Please try again.'));\n        }\n      }\n    );\n  };\n\n  render() {\n    const {app} = this.props;\n\n    return (\n      <StyledPanelItem>\n        <ApplicationNameWrapper>\n          <ApplicationName to={`${ROUTE_PREFIX}applications/${app.id}/`}>\n            {getDynamicText({value: app.name, fixed: 'CI_APPLICATION_NAME'})}\n          </ApplicationName>\n          <ClientId>\n            {getDynamicText({value: app.clientID, fixed: 'CI_CLIENT_ID'})}\n          </ClientId>\n        </ApplicationNameWrapper>\n\n        <Button\n          aria-label=\"Remove\"\n          onClick={this.handleRemove}\n          disabled={this.state.loading}\n          icon={<IconDelete />}\n        />\n      </StyledPanelItem>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n`;\n\nconst ApplicationNameWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  margin-right: ${space(1)};\n`;\n\nconst ApplicationName = styled(Link)`\n  font-size: ${p => p.theme.headerFontSize};\n  font-weight: bold;\n  margin-bottom: ${space(0.5)};\n`;\n\nconst ClientId = styled('div')`\n  color: ${p => p.theme.gray200};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default Row;\n","import {RouteComponentProps} from 'react-router/lib/Router';\nimport React from 'react';\n\nimport {ApiApplication} from 'app/types';\nimport {Panel, PanelBody, PanelHeader} from 'app/components/panels';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport Row from 'app/views/settings/account/apiApplications/row';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport {IconAdd} from 'app/icons';\n\nconst ROUTE_PREFIX = '/settings/account/api/';\n\ntype Props = RouteComponentProps<{}, {}>;\ntype State = {\n  appList: ApiApplication[];\n} & AsyncView['state'];\n\nclass ApiApplications extends AsyncView<Props, State> {\n  getEndpoints(): [string, string][] {\n    return [['appList', '/api-applications/']];\n  }\n\n  getTitle() {\n    return t('API Applications');\n  }\n\n  handleCreateApplication = async () => {\n    addLoadingMessage();\n\n    try {\n      const app = await this.api.requestPromise('/api-applications/', {\n        method: 'POST',\n      });\n\n      addSuccessMessage(t('Created a new API Application'));\n      this.props.router.push(`${ROUTE_PREFIX}applications/${app.id}/`);\n    } catch (_err) {\n      addErrorMessage(t('Unable to remove application. Please try again.'));\n    }\n  };\n\n  handleRemoveApplication = (app: ApiApplication) => {\n    this.setState({\n      appList: this.state.appList.filter(a => a.id !== app.id),\n    });\n  };\n\n  renderBody() {\n    const action = (\n      <Button\n        priority=\"primary\"\n        size=\"small\"\n        onClick={this.handleCreateApplication}\n        icon={<IconAdd size=\"xs\" isCircled />}\n      >\n        {t('Create New Application')}\n      </Button>\n    );\n\n    const isEmpty = this.state.appList.length === 0;\n\n    return (\n      <div>\n        <SettingsPageHeader title=\"API Applications\" action={action} />\n\n        <Panel>\n          <PanelHeader>{t('Application Name')}</PanelHeader>\n\n          <PanelBody>\n            {!isEmpty ? (\n              this.state.appList.map(app => (\n                <Row\n                  api={this.api}\n                  key={app.id}\n                  app={app}\n                  onRemove={this.handleRemoveApplication}\n                />\n              ))\n            ) : (\n              <EmptyMessage>\n                {t(\"You haven't created any applications yet.\")}\n              </EmptyMessage>\n            )}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default ApiApplications;\n"],"sourceRoot":""}