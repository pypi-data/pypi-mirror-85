{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/components/settingsPageHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.jsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/recoveryCodes.jsx","webpack:///./app/views/settings/account/accountSecurity/components/u2fEnrolledDetails.jsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityDetails.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","SettingsPageHeading","props","icon","action","tabs","noTitleStyles","TitleAndActions","Icon","Title","styled","Action","React","Component","defaultProps","p","space","StyledSettingsPageHeading","message","Fragment","t","RemoveConfirm","ConfirmHeader","RecoveryCodes","printCodes","iframe","window","frames","printable","document","write","codes","join","print","close","className","isEnrolled","formattedCodes","hasButtons","Actions","hideUnsupported","value","size","label","onClick","download","href","onConfirm","onRegenerateBackupCodes","priority","type","length","map","code","Code","key","name","css","PanelItem","theme","text","familyMono","U2fEnrolledDetails","devices","id","onRemoveU2fDevice","hasDevices","isLastDevice","device","DevicePanelItem","DeviceInformation","Name","FadedDateTime","date","timestamp","disabled","AddAnotherPanelItem","to","DateTime","fontSizeRelativeSmall","ENDPOINT","AuthenticatorDate","DateLabel","AccountSecurityDetails","_form","handleRemove","authenticator","state","authId","isRemovingU2fDevice","deviceId","key_handle","setState","loading","api","requestPromise","method","then","router","push","deviceName","addSuccessMessage","addError","params","addErrorMessage","deleteDisabled","AuthenticatorStatus","enabled","removeButton","description","AuthenticatorDates","createdAt","lastUsedAt","phone","PhoneWrapper","Phone","PropTypes","bool","isRequired","func","CircleIndicator"],"mappings":"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","file":"AccountSecurityDetails.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'app/styles/space';\nimport {HeaderTitle} from 'app/styles/organization';\n\ntype Props = {\n  // The title\n  title: React.ReactNode;\n\n  // Disables font styles in the title. Allows for more custom titles.\n  noTitleStyles?: boolean;\n\n  className?: string;\n\n  // Icon left of title\n  icon?: React.ReactNode;\n\n  // Actions on opposite end of title bar from the title\n  action?: React.ReactNode;\n\n  tabs?: React.ReactNode;\n};\n\nclass SettingsPageHeading extends React.Component<Props> {\n  static propTypes = {\n    icon: PropTypes.node,\n    title: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    tabs: PropTypes.node,\n    // Disables font styles in the title. Allows for more custom titles.\n    noTitleStyles: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    noTitleStyles: false,\n  };\n\n  render() {\n    const {icon, title, action, tabs, noTitleStyles, ...props} = this.props;\n    return (\n      <div {...props}>\n        <TitleAndActions>\n          {icon && <Icon>{icon}</Icon>}\n          {title && (\n            <Title tabs={tabs} styled={noTitleStyles}>\n              <HeaderTitle>{title}</HeaderTitle>\n            </Title>\n          )}\n          {action && <Action tabs={tabs}>{action}</Action>}\n        </TitleAndActions>\n\n        {tabs && <div>{tabs}</div>}\n      </div>\n    );\n  }\n}\n\ntype TitleProps = {\n  styled?: boolean;\n  tabs?: React.ReactNode;\n};\n\nconst TitleAndActions = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled('div')<TitleProps & React.HTMLProps<HTMLDivElement>>`\n  ${p =>\n    !p.styled &&\n    `\n    font-size: 20px;\n    font-weight: bold;`};\n  margin: ${p =>\n    p.tabs\n      ? `${space(4)} ${space(2)} ${space(2)} 0`\n      : `${space(4)} ${space(2)} ${space(4)} 0`};\n  flex: 1;\n`;\n\nconst Icon = styled('div')`\n  margin-right: ${space(1)};\n`;\n\nconst Action = styled('div')<{tabs?: React.ReactNode}>`\n  ${p => (p.tabs ? `margin-top: ${space(2)}` : null)};\n`;\n\nconst StyledSettingsPageHeading = styled(SettingsPageHeading)<\n  Omit<React.HTMLProps<HTMLDivElement>, keyof Props> & Props\n>`\n  font-size: 14px;\n  margin-top: -${space(4)};\n`;\n\nexport default StyledSettingsPageHeading;\n","import React from 'react';\n\nimport {t} from 'app/locale';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport Confirm from 'app/components/confirm';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = props => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  Panel,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n  PanelAlert,\n} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport Confirm from 'app/components/confirm';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport {IconCopy, IconDownload, IconPrint} from 'app/icons';\nimport space from 'app/styles/space';\n\nclass RecoveryCodes extends React.Component {\n  static propTypes = {\n    isEnrolled: PropTypes.bool,\n    codes: PropTypes.arrayOf(PropTypes.string),\n    onRegenerateBackupCodes: PropTypes.func.isRequired,\n  };\n\n  printCodes = () => {\n    const iframe = window.frames.printable;\n    iframe.document.write(this.props.codes.join('<br>'));\n    iframe.print();\n    iframe.document.close();\n  };\n\n  render() {\n    const {className, isEnrolled, codes} = this.props;\n\n    if (!isEnrolled || !codes) {\n      return null;\n    }\n\n    const formattedCodes = codes.join(' \\n');\n\n    return (\n      <Panel className={className}>\n        <PanelHeader hasButtons>\n          {t('Unused Codes')}\n\n          <Actions>\n            <Clipboard hideUnsupported value={formattedCodes}>\n              <Button size=\"small\" label={t('copy')}>\n                <IconCopy />\n              </Button>\n            </Clipboard>\n            <Button size=\"small\" onClick={this.printCodes} label={t('print')}>\n              <IconPrint />\n            </Button>\n            <Button\n              size=\"small\"\n              download=\"sentry-recovery-codes.txt\"\n              href={`data:text/plain;charset=utf-8,${formattedCodes}`}\n              label={t('download')}\n            >\n              <IconDownload />\n            </Button>\n            <Confirm\n              onConfirm={this.props.onRegenerateBackupCodes}\n              message={t(\n                'Are you sure you want to regenerate recovery codes? Your old codes will no longer work.'\n              )}\n            >\n              <Button priority=\"danger\" size=\"small\">\n                {t('Regenerate Codes')}\n              </Button>\n            </Confirm>\n          </Actions>\n        </PanelHeader>\n        <PanelBody>\n          <PanelAlert type=\"warning\">\n            {t(\n              'Make sure to save a copy of your recovery codes and store them in a safe place.'\n            )}\n          </PanelAlert>\n          <div>{!!codes.length && codes.map(code => <Code key={code}>{code}</Code>)}</div>\n          {!codes.length && (\n            <EmptyMessage>{t('You have no more recovery codes to use')}</EmptyMessage>\n          )}\n        </PanelBody>\n        <iframe name=\"printable\" css={{display: 'none'}} />\n      </Panel>\n    );\n  }\n}\n\nexport default styled(RecoveryCodes)`\n  margin-top: ${space(4)};\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: ${space(1)};\n`;\n\nconst Code = styled(PanelItem)`\n  font-family: ${p => p.theme.text.familyMono};\n  padding: ${space(2)};\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'app/components/panels';\nimport {t} from 'app/locale';\nimport Button from 'app/components/button';\nimport Confirm from 'app/components/confirm';\nimport ConfirmHeader from 'app/views/settings/account/accountSecurity/components/confirmHeader';\nimport DateTime from 'app/components/dateTime';\nimport EmptyMessage from 'app/views/settings/components/emptyMessage';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport Tooltip from 'app/components/tooltip';\nimport {IconDelete} from 'app/icons';\nimport space from 'app/styles/space';\n\n/**\n * List u2f devices w/ ability to remove a single device\n */\nclass U2fEnrolledDetails extends React.Component {\n  static propTypes = {\n    isEnrolled: PropTypes.bool,\n    id: PropTypes.string,\n    devices: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        timestamp: PropTypes.any,\n      })\n    ),\n    onRemoveU2fDevice: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const {className, isEnrolled, devices, id, onRemoveU2fDevice} = this.props;\n\n    if (id !== 'u2f' || !isEnrolled) {\n      return null;\n    }\n\n    const hasDevices = devices && devices.length;\n    // Note Tooltip doesn't work because of bootstrap(?) pointer events for disabled buttons\n    const isLastDevice = hasDevices === 1;\n\n    return (\n      <Panel className={className}>\n        <PanelHeader>{t('Device name')}</PanelHeader>\n\n        <PanelBody>\n          {!hasDevices && (\n            <EmptyMessage>{t('You have not added any U2F devices')}</EmptyMessage>\n          )}\n          {hasDevices &&\n            devices.map(device => (\n              <DevicePanelItem key={device.name}>\n                <DeviceInformation>\n                  <Name>{device.name}</Name>\n                  <FadedDateTime date={device.timestamp} />\n                </DeviceInformation>\n\n                <Actions>\n                  <Confirm\n                    onConfirm={() => onRemoveU2fDevice(device)}\n                    disabled={isLastDevice}\n                    message={\n                      <React.Fragment>\n                        <ConfirmHeader>\n                          {t('Do you want to remove U2F device?')}\n                        </ConfirmHeader>\n                        <TextBlock>\n                          {t(\n                            `Are you sure you want to remove the U2F device \"${device.name}\"?`\n                          )}\n                        </TextBlock>\n                      </React.Fragment>\n                    }\n                  >\n                    <Button size=\"small\" priority=\"danger\">\n                      <Tooltip\n                        disabled={!isLastDevice}\n                        title={t('Can not remove last U2F device')}\n                      >\n                        <IconDelete size=\"xs\" />\n                      </Tooltip>\n                    </Button>\n                  </Confirm>\n                </Actions>\n              </DevicePanelItem>\n            ))}\n          <AddAnotherPanelItem>\n            <Button\n              type=\"button\"\n              to=\"/settings/account/security/mfa/u2f/enroll/\"\n              size=\"small\"\n            >\n              {t('Add Another Device')}\n            </Button>\n          </AddAnotherPanelItem>\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst DevicePanelItem = styled(PanelItem)`\n  padding: 0;\n`;\n\nconst DeviceInformation = styled('div')`\n  display: flex;\n  align-items: center;\n  flex: 1;\n\n  padding: ${space(2)};\n  padding-right: 0;\n`;\n\nconst FadedDateTime = styled(DateTime)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  opacity: 0.6;\n`;\n\nconst Name = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  margin: ${space(2)};\n`;\n\nconst AddAnotherPanelItem = styled(PanelItem)`\n  justify-content: flex-end;\n  padding: ${space(2)};\n`;\n\nexport default styled(U2fEnrolledDetails)`\n  margin-top: ${space(4)};\n`;\n","/**\n * AccountSecurityDetails is only displayed when user is enrolled in the 2fa method.\n * It displays created + last used time of the 2fa method.\n *\n * Also displays 2fa method specific details.\n */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport DateTime from 'app/components/dateTime';\nimport RecoveryCodes from 'app/views/settings/account/accountSecurity/components/recoveryCodes';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport Tooltip from 'app/components/tooltip';\nimport U2fEnrolledDetails from 'app/views/settings/account/accountSecurity/components/u2fEnrolledDetails';\nimport space from 'app/styles/space';\n\nconst ENDPOINT = '/users/me/authenticators/';\n\nclass AuthenticatorDate extends React.Component {\n  static propTypes = {\n    label: PropTypes.string,\n    /**\n     * Can be null or a Date object.\n     * Component will have value \"never\" if it is null\n     */\n    date: PropTypes.string,\n  };\n\n  render() {\n    const {label, date} = this.props;\n\n    return (\n      <React.Fragment>\n        <DateLabel>{label}</DateLabel>\n        <div>{date ? <DateTime date={date} /> : t('never')}</div>\n      </React.Fragment>\n    );\n  }\n}\n\nclass AccountSecurityDetails extends AsyncView {\n  static PropTypes = {\n    deleteDisabled: PropTypes.bool.isRequired,\n    onRegenerateBackupCodes: PropTypes.func.isRequired,\n  };\n\n  _form = {};\n\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints() {\n    return [['authenticator', `${ENDPOINT}${this.props.params.authId}/`]];\n  }\n\n  addError(message) {\n    this.setState({loading: false});\n    addErrorMessage(message);\n  }\n\n  handleRemove = device => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n    const isRemovingU2fDevice = !!device;\n    const deviceId = isRemovingU2fDevice ? `${device.key_handle}/` : '';\n\n    this.setState(\n      {\n        loading: true,\n      },\n      () =>\n        this.api\n          .requestPromise(`${ENDPOINT}${authenticator.authId}/${deviceId}`, {\n            method: 'DELETE',\n          })\n          .then(\n            () => {\n              this.props.router.push('/settings/account/security');\n              const deviceName = isRemovingU2fDevice ? device.name : 'Authenticator';\n              addSuccessMessage(t('%s has been removed', deviceName));\n            },\n            () => {\n              // Error deleting authenticator\n              const deviceName = isRemovingU2fDevice ? device.name : 'authenticator';\n              this.addError(t('Error removing %s', deviceName));\n            }\n          )\n    );\n  };\n\n  renderBody() {\n    const {authenticator} = this.state;\n    const {deleteDisabled, onRegenerateBackupCodes} = this.props;\n\n    return (\n      <div>\n        <SettingsPageHeader\n          title={\n            <React.Fragment>\n              <span>{authenticator.name}</span>\n              <AuthenticatorStatus enabled={authenticator.isEnrolled} />\n            </React.Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <Tooltip\n                title={t(\n                  \"Two-factor authentication is required for at least one organization you're a member of.\"\n                )}\n                disabled={!deleteDisabled}\n              >\n                <RemoveConfirm onConfirm={this.handleRemove} disabled={deleteDisabled}>\n                  <Button priority=\"danger\">{authenticator.removeButton}</Button>\n                </RemoveConfirm>\n              </Tooltip>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        <AuthenticatorDates>\n          <AuthenticatorDate label={t('Created at')} date={authenticator.createdAt} />\n          <AuthenticatorDate label={t('Last used')} date={authenticator.lastUsedAt} />\n        </AuthenticatorDates>\n\n        <U2fEnrolledDetails\n          isEnrolled={authenticator.isEnrolled}\n          id={authenticator.id}\n          devices={authenticator.devices}\n          onRemoveU2fDevice={this.handleRemove}\n        />\n\n        {authenticator.isEnrolled && authenticator.phone && (\n          <PhoneWrapper>\n            {t('Confirmation codes are sent to the following phone number')}:\n            <Phone>{authenticator.phone}</Phone>\n          </PhoneWrapper>\n        )}\n\n        <RecoveryCodes\n          onRegenerateBackupCodes={onRegenerateBackupCodes}\n          isEnrolled={authenticator.isEnrolled}\n          codes={authenticator.codes}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AccountSecurityDetails;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-left: ${space(1)};\n`;\n\nconst AuthenticatorDates = styled('div')`\n  display: grid;\n  grid-gap: ${space(2)};\n  grid-template-columns: max-content auto;\n`;\n\nconst DateLabel = styled('span')`\n  font-weight: bold;\n`;\n\nconst PhoneWrapper = styled('div')`\n  margin-top: ${space(4)};\n`;\n\nconst Phone = styled('span')`\n  font-weight: bold;\n  margin-left: ${space(1)};\n`;\n"],"sourceRoot":""}