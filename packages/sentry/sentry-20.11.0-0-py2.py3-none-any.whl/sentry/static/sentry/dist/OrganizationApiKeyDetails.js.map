{"version":3,"sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/views/settings/organizationApiKeys/organizationApiKeyDetails.jsx"],"names":["AsyncView","title","this","getTitle","renderComponent","AsyncComponent","recreateRoute","to","options","lastRootIndex","routeIndex","routes","params","location","stepBack","paths","map","path","indexOf","findLastIndex","slice","baseRoute","search","hash","fullRoute","join","replaceRouterParams","API_CHOICES","API_ACCESS_SCOPES","s","OrganizationApiKeyDetails","handleSubmitSuccess","addSuccessMessage","browserHistory","push","props","handleSubmitError","addErrorMessage","loading","error","apiKey","nextProps","orgId","remountComponent","org","context","organization","name","className","t","apiMethod","apiEndpoint","initialData","state","onSubmitSuccess","onSubmitError","onCancel","SplitInput","label","disabled","required","choices","placeholder","help","contextTypes","SentryTypes","Organization","space"],"mappings":"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","file":"OrganizationApiKeyDetails.js","sourcesContent":["import DocumentTitle from 'react-document-title';\nimport React from 'react';\n\nimport AsyncComponent from 'app/components/asyncComponent';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    const title = this.getTitle();\n    return (\n      <DocumentTitle title={`${title ? `${title} - ` : ''}Sentry`}>\n        {this.renderComponent()}\n      </DocumentTitle>\n    );\n  }\n}\n","import {Location} from 'history';\nimport {PlainRoute} from 'react-router/lib/Route';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'app/utils/replaceRouterParams';\n\ntype Options = {\n  routes: PlainRoute[];\n\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n  location?: Location;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(to: string | PlainRoute, options: Options): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","import {browserHistory} from 'react-router';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {API_ACCESS_SCOPES} from 'app/constants';\nimport {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';\nimport {t} from 'app/locale';\nimport space from 'app/styles/space';\nimport ApiForm from 'app/components/forms/apiForm';\nimport MultipleCheckboxField from 'app/components/forms/multipleCheckboxField';\nimport AsyncView from 'app/views/asyncView';\nimport SentryTypes from 'app/sentryTypes';\nimport TextField from 'app/components/forms/textField';\nimport TextareaField from 'app/components/forms/textareaField';\nimport recreateRoute from 'app/utils/recreateRoute';\n\nconst API_CHOICES = API_ACCESS_SCOPES.map(s => [s, s]);\n\nclass OrganizationApiKeyDetails extends AsyncView {\n  static contextTypes = {\n    organization: SentryTypes.Organization,\n  };\n\n  getDefaultState() {\n    return {\n      loading: true,\n      error: false,\n      apiKey: {},\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.location.search !== this.props.location.search ||\n      nextProps.params.orgId !== this.props.params.orgId\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints() {\n    return [\n      [\n        'apiKey',\n        `/organizations/${this.props.params.orgId}/api-keys/${this.props.params.apiKey}/`,\n      ],\n    ];\n  }\n\n  getTitle() {\n    const org = this.context.organization;\n    return `${org.name} Edit API Key`;\n  }\n\n  handleSubmitSuccess = () => {\n    addSuccessMessage('Saved changes');\n\n    // Go back to API list\n    browserHistory.push(\n      recreateRoute('', {\n        stepBack: -1,\n        routes: this.props.routes,\n        params: this.props.params,\n      })\n    );\n  };\n\n  handleSubmitError = () => {\n    addErrorMessage('Unable to save changes. Please try again.');\n  };\n\n  renderBody() {\n    return (\n      <div>\n        <div className=\"page-header\">\n          <h3>{t('Edit Api Key')}</h3>\n        </div>\n\n        <ApiForm\n          apiMethod=\"PUT\"\n          apiEndpoint={`/organizations/${this.props.params.orgId}/api-keys/${this.props.params.apiKey}/`}\n          initialData={this.state.apiKey}\n          onSubmitSuccess={this.handleSubmitSuccess}\n          onSubmitError={this.handleSubmitError}\n          onCancel={() =>\n            browserHistory.push(\n              recreateRoute('', {\n                stepBack: -1,\n                routes: this.props.routes,\n                params: this.props.params,\n              })\n            )\n          }\n        >\n          <SplitInput>\n            <TextField label={t('Label')} name=\"label\" />\n            <TextField label={t('API Key')} name=\"key\" disabled />\n          </SplitInput>\n\n          <MultipleCheckboxField\n            name=\"scope_list\"\n            label={t('Scopes')}\n            required\n            choices={API_CHOICES}\n          />\n\n          <TextareaField\n            label={t('Allowed Domains')}\n            name=\"allowed_origins\"\n            placeholder=\"e.g. example.com or https://example.com\"\n            help=\"Separate multiple entries with a newline\"\n          />\n        </ApiForm>\n      </div>\n    );\n  }\n}\n\nconst SplitInput = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: ${space(2)};\n`;\n\nexport default OrganizationApiKeyDetails;\n"],"sourceRoot":""}