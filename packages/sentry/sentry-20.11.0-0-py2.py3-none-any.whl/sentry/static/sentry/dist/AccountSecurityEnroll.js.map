{"version":3,"sources":["webpack:///./app/views/settings/components/forms/textCopyInput.jsx","webpack:///./app/components/qrcode.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityEnroll.jsx"],"names":["Wrapper","StyledInput","inputStyles","p","theme","backgroundSecondary","rtl","OverflowContainer","StyledCopyButton","Button","TextCopyInput","props","handleCopyClick","e","textRef","current","onCopy","handleSelectText","children","stopPropagation","node","ReactDOM","findDOMNode","setSelectionRange","value","length","selectText","React","createRef","this","style","inputValue","readOnly","ref","onClick","hideUnsupported","type","size","Component","defaultProps","Qrcode","code","Table","map","row","i","key","cell","j","BlackCell","WhiteCell","Cell","AccountSecurityEnroll","_form","handleFieldChange","name","handleSmsReset","setState","hasSentCode","remountComponent","handleSmsSubmit","a","state","authenticator","phone","data","otp","undefined","secret","loading","addMessage","t","api","requestPromise","enrollEndpoint","isSmsInterface","id","addErrorMessage","handleEnrollSuccess","handleU2fTap","tapData","handleEnrollError","handleTotpSubmit","dataModel","method","handleRemove","authId","authenticatorEndpoint","router","push","addSuccessMessage","allowError","err","alreadyEnrolled","status","responseJSON","details","pendingInvitation","getPendingInvite","fetchOrganizationByMember","memberId","addOrg","fetchOrgDetails","openRecoveryOptions","authenticatorName","fields","onSmsReset","onSmsSubmit","onU2fTap","form","qrcode","challenge","justifyContent","label","priority","disabled","required","visible","pr","css","find","marginBottom","challengeData","displayMode","flowMode","onTap","getFields","defaultValues","filter","field","defaultValue","reduce","acc","Fragment","title","enabled","isEnrolled","action","removeButton","onConfirm","description","apiMethod","onFieldChange","apiEndpoint","onSubmit","initialData","hideFooter","forms","params","AsyncView","withRouter"],"mappings":"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","file":"AccountSecurityEnroll.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport styled from '@emotion/styled';\n\nimport {inputStyles} from 'app/styles/input';\nimport {selectText} from 'app/utils/selectText';\nimport Button from 'app/components/button';\nimport Clipboard from 'app/components/clipboard';\nimport {IconCopy} from 'app/icons';\n\nconst Wrapper = styled('div')`\n  display: flex;\n`;\n\nconst StyledInput = styled('input')`\n  ${inputStyles};\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-right-width: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  direction: ${p => (p.rtl ? 'rtl' : 'ltr')};\n\n  &:hover,\n  &:focus {\n    background-color: ${p => p.theme.backgroundSecondary};\n    border-right-width: 0;\n  }\n`;\n\nconst OverflowContainer = styled('div')`\n  flex-grow: 1;\n  border: none;\n`;\n\nconst StyledCopyButton = styled(Button)`\n  flex-shrink: 1;\n  border-radius: 0 0.25em 0.25em 0;\n  box-shadow: none;\n`;\n\nclass TextCopyInput extends React.Component {\n  static propTypes = {\n    /**\n     * Text to copy\n     */\n    children: PropTypes.string.isRequired,\n    /**\n     * CSS style object\n     */\n    style: PropTypes.object,\n    onCopy: PropTypes.func,\n    /**\n     * Always show the ending of a long overflowing text in input\n     */\n    rtl: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    onCopy: () => {},\n  };\n\n  constructor(props) {\n    super(props);\n    this.textRef = React.createRef();\n  }\n\n  // Select text when copy button is clicked\n  handleCopyClick = e => {\n    if (!this.textRef.current) {\n      return;\n    }\n\n    const {onCopy} = this.props;\n\n    this.handleSelectText();\n\n    onCopy(this.props.children, e);\n\n    e.stopPropagation();\n  };\n\n  handleSelectText = () => {\n    const {rtl} = this.props;\n\n    if (!this.textRef.current) {\n      return;\n    }\n\n    // We use findDOMNode here because `this.textRef` is not a dom node,\n    // it's a ref to AutoSelectText\n    const node = ReactDOM.findDOMNode(this.textRef.current); // eslint-disable-line react/no-find-dom-node\n\n    if (rtl) {\n      // we don't want to select the first character - \\u202A, nor the last - \\u202C\n      node.setSelectionRange(1, node.value.length - 1);\n    } else {\n      selectText(node);\n    }\n  };\n\n  render() {\n    const {style, children, rtl} = this.props;\n\n    /**\n     * We are using direction: rtl; to always show the ending of a long overflowing text in input.\n     *\n     * This however means that the trailing characters with BiDi class O.N. ('Other Neutrals') goes to the other side.\n     * Hello! becomes !Hello and vice versa. This is a problem for us when we want to show path in this component, because\n     * /user/local/bin becomes user/local/bin/. Wrapping in unicode characters for left-to-righ embedding solves this,\n     * however we need to be aware of them when selecting the text - we are solving that by offseting the selectionRange.\n     */\n    const inputValue = rtl ? '\\u202A' + children + '\\u202C' : children;\n\n    return (\n      <Wrapper>\n        <OverflowContainer>\n          <StyledInput\n            readOnly\n            ref={this.textRef}\n            style={style}\n            value={inputValue}\n            onClick={this.handleSelectText}\n            rtl={rtl}\n          />\n        </OverflowContainer>\n        <Clipboard hideUnsupported onClick={this.handleCopyClick} value={children}>\n          <StyledCopyButton type=\"button\" size=\"xsmall\" onClick={this.handleCopyClick}>\n            <IconCopy />\n          </StyledCopyButton>\n        </Clipboard>\n      </Wrapper>\n    );\n  }\n}\n\nexport default TextCopyInput;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  code: (1 | 0)[][];\n};\n\nconst Qrcode = ({code}: Props) => (\n  <Table>\n    <tbody>\n      {code.map((row, i) => (\n        <tr key={i}>\n          {row.map((cell, j) => (cell ? <BlackCell key={j} /> : <WhiteCell key={j} />))}\n        </tr>\n      ))}\n    </tbody>\n  </Table>\n);\n\nconst Cell = styled('td')`\n  height: 6px;\n  width: 6px;\n  padding: 0;\n`;\n\nconst BlackCell = styled(Cell)`\n  background-color: black;\n`;\n\nconst WhiteCell = styled(Cell)`\n  background-color: white;\n`;\n\nconst Table = styled('table')`\n  margin: 0;\n`;\n\nexport default Qrcode;\n","import {withRouter} from 'react-router';\nimport React from 'react';\n\nimport {PanelItem} from 'app/components/panels';\nimport {\n  addErrorMessage,\n  addMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\nimport {openRecoveryOptions} from 'app/actionCreators/modal';\nimport {fetchOrganizationByMember} from 'app/actionCreators/organizations';\nimport {t} from 'app/locale';\nimport AsyncView from 'app/views/asyncView';\nimport Button from 'app/components/button';\nimport CircleIndicator from 'app/components/circleIndicator';\nimport Field from 'app/views/settings/components/forms/field';\nimport Form from 'app/views/settings/components/forms/form';\nimport JsonForm from 'app/views/settings/components/forms/jsonForm';\nimport Qrcode from 'app/components/qrcode';\nimport RemoveConfirm from 'app/views/settings/account/accountSecurity/components/removeConfirm';\nimport SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';\nimport TextBlock from 'app/views/settings/components/text/textBlock';\nimport TextCopyInput from 'app/views/settings/components/forms/textCopyInput';\nimport U2fsign from 'app/components/u2f/u2fsign';\nimport getPendingInvite from 'app/utils/getPendingInvite';\n\n/**\n * Retrieve additional form fields (or modify ones) based on 2fa method\n *\n * @param {object} params Params object\n * @param {object} authenticator Authenticator model\n * @param {boolean} hasSentCode Flag to track if totp has been sent\n * @param {function} onSmsReset Callback to reset SMS 2fa enrollment\n * @param {function} onSmsSubmit Callback to handle sending code or submit OTP\n * @param {function} onU2fTap Callback when u2f device is activated\n */\nconst getFields = ({authenticator, hasSentCode, onSmsReset, onSmsSubmit, onU2fTap}) => {\n  const {form, qrcode, challenge, id} = authenticator || {};\n\n  if (!form) {\n    return null;\n  }\n\n  if (qrcode) {\n    return [\n      () => (\n        <PanelItem key=\"qrcode\" justifyContent=\"center\" p={2}>\n          <Qrcode code={authenticator.qrcode} />\n        </PanelItem>\n      ),\n      () => (\n        <Field key=\"secret\" label={t('Authenticator secret')}>\n          <TextCopyInput>{authenticator.secret}</TextCopyInput>\n        </Field>\n      ),\n      ...form,\n      () => (\n        <PanelItem key=\"confirm\" justifyContent=\"flex-end\" p={2}>\n          <Button priority=\"primary\" type=\"submit\">\n            {t('Confirm')}\n          </Button>\n        </PanelItem>\n      ),\n    ];\n  }\n\n  // Sms Form needs a start over button + confirm button\n  // Also inputs being disabled vary based on hasSentCode\n  if (id === 'sms') {\n    // Ideally we would have greater flexibility when rendering footer\n    return [\n      {\n        ...form[0],\n        disabled: () => hasSentCode,\n      },\n      {\n        ...form[1],\n        required: true,\n        visible: () => hasSentCode,\n      },\n      () => (\n        <PanelItem key=\"sms-footer\" justifyContent=\"flex-end\" p={2} pr=\"36px\">\n          {hasSentCode && (\n            <Button css={{marginRight: 6}} onClick={onSmsReset}>\n              {t('Start Over')}\n            </Button>\n          )}\n          <Button priority=\"primary\" type=\"button\" onClick={onSmsSubmit}>\n            {hasSentCode ? t('Confirm') : t('Send Code')}\n          </Button>\n        </PanelItem>\n      ),\n    ];\n  }\n\n  // Need to render device name field + U2f component\n  if (id === 'u2f') {\n    const deviceNameField = form.find(({name}) => name === 'deviceName');\n    return [\n      deviceNameField,\n      () => (\n        <U2fsign\n          key=\"u2f-enroll\"\n          style={{marginBottom: 0}}\n          challengeData={challenge}\n          displayMode=\"enroll\"\n          flowMode=\"enroll\"\n          onTap={onU2fTap}\n        />\n      ),\n    ];\n  }\n\n  return null;\n};\n\n/**\n * Renders necessary forms in order to enroll user in 2fa\n */\nclass AccountSecurityEnroll extends AsyncView {\n  _form = {};\n\n  getTitle() {\n    return t('Security');\n  }\n\n  get authenticatorEndpoint() {\n    return `/users/me/authenticators/${this.props.params.authId}/`;\n  }\n\n  get enrollEndpoint() {\n    return `${this.authenticatorEndpoint}enroll/`;\n  }\n\n  getEndpoints() {\n    const errorHandler = err => {\n      const alreadyEnrolled =\n        err &&\n        err.status === 400 &&\n        err.responseJSON &&\n        err.responseJSON.details === 'Already enrolled';\n\n      if (alreadyEnrolled) {\n        this.props.router.push('/settings/account/security/');\n        addErrorMessage(t('Already enrolled'));\n      }\n\n      // Allow the endpoint to fail if the user is already enrolled\n      return alreadyEnrolled;\n    };\n\n    return [['authenticator', this.enrollEndpoint, {}, {allowError: errorHandler}]];\n  }\n\n  componentDidMount() {\n    this.pendingInvitation = getPendingInvite();\n  }\n\n  get authenticatorName() {\n    const {authenticator} = this.state;\n    return (authenticator && authenticator.name) || 'Authenticator';\n  }\n\n  handleFieldChange = (name, value) => {\n    // This should not be used for rendering, that's why it's not in state\n    this._form[name] = value;\n  };\n\n  // This resets state so that user can re-enter their phone number again\n  handleSmsReset = () => this.setState({hasSentCode: false}, this.remountComponent);\n\n  // Handles SMS authenticators\n  handleSmsSubmit = async () => {\n    const {authenticator, hasSentCode} = this.state;\n\n    // Don't submit if empty\n    if (!this._form.phone) {\n      return;\n    }\n\n    const data = {\n      phone: this._form.phone,\n      // Make sure `otp` is undefined if we are submitting OTP verification\n      // Otherwise API will think that we are on verification step (e.g. after submitting phone)\n      otp: hasSentCode ? this._form.otp || '' : undefined,\n      secret: authenticator.secret,\n    };\n\n    // Only show loading when submitting OTP\n    this.setState({loading: hasSentCode});\n\n    if (!hasSentCode) {\n      addMessage(t('Sending code to %s...', data.phone));\n    }\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (error) {\n      this._form = {};\n      const isSmsInterface = authenticator.id === 'sms';\n\n      this.setState({\n        hasSentCode: !isSmsInterface,\n      });\n\n      // Re-mount because we want to fetch a fresh secret\n      this.remountComponent();\n\n      addErrorMessage(\n        this.state.hasSentCode ? t('Incorrect OTP') : t('Error sending SMS')\n      );\n\n      return;\n    }\n\n    if (!hasSentCode) {\n      // Just successfully finished sending OTP to user\n      this.setState({hasSentCode: true, loading: false});\n      addMessage(t('Sent code to %s', data.phone));\n    } else {\n      // OTP was accepted and SMS was added as a 2fa method\n      this.handleEnrollSuccess();\n    }\n  };\n\n  // Handle u2f device tap\n  handleU2fTap = async tapData => {\n    const data = {...tapData, ...this._form};\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Currently only TOTP uses this\n  handleTotpSubmit = async dataModel => {\n    const data = {\n      ...this._form,\n      ...(dataModel || {}),\n      secret: this.state.authenticator.secret,\n    };\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {method: 'POST', data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Handler when we successfully add a 2fa device\n  async handleEnrollSuccess() {\n    // If we're pending approval of an invite, the user will have just joined\n    // the organization when completing 2fa enrollment. We should reload the\n    // organization context in that case to assign them to the org.\n    if (this.pendingInvitation) {\n      await fetchOrganizationByMember(this.pendingInvitation.memberId, {\n        addOrg: true,\n        fetchOrgDetails: true,\n      });\n    }\n\n    this.props.router.push('/settings/account/security/');\n    openRecoveryOptions({authenticatorName: this.authenticatorName});\n  }\n\n  // Handler when we failed to add a 2fa device\n  handleEnrollError() {\n    this.setState({loading: false});\n    addErrorMessage(t('Error adding %s authenticator', this.authenticatorName));\n  }\n\n  // Removes an authenticator\n  handleRemove = async () => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // `authenticator.authId` is NOT the same as `props.params.authId` This is\n    // for backwards compatability with API endpoint\n    try {\n      await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticator'));\n      return;\n    }\n\n    this.props.router.push('/settings/account/security/');\n    addSuccessMessage(t('Authenticator has been removed'));\n  };\n\n  renderBody() {\n    const {authenticator, hasSentCode} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const fields = getFields({\n      authenticator,\n      hasSentCode,\n      onSmsReset: this.handleSmsReset,\n      onSmsSubmit: this.handleSmsSubmit,\n      onU2fTap: this.handleU2fTap,\n    });\n\n    // Attempt to extract `defaultValue` from server generated form fields\n    const defaultValues = fields\n      ? fields\n          .filter(field => typeof field.defaultValue !== 'undefined')\n          .map(field => [field.name, field.defaultValue])\n          .reduce((acc, [name, value]) => {\n            acc[name] = value;\n            return acc;\n          }, {})\n      : {};\n\n    return (\n      <React.Fragment>\n        <SettingsPageHeader\n          title={\n            <React.Fragment>\n              <span>{authenticator.name}</span>\n              <CircleIndicator css={{marginLeft: 6}} enabled={authenticator.isEnrolled} />\n            </React.Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <RemoveConfirm onConfirm={this.handleRemove}>\n                <Button priority=\"danger\">{authenticator.removeButton}</Button>\n              </RemoveConfirm>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        {authenticator.form && !!authenticator.form.length && (\n          <Form\n            apiMethod=\"POST\"\n            onFieldChange={this.handleFieldChange}\n            apiEndpoint={this.authenticatorEndpoint}\n            onSubmit={this.handleTotpSubmit}\n            initialData={{...defaultValues, ...authenticator}}\n            hideFooter\n          >\n            <JsonForm forms={[{title: 'Configuration', fields}]} />\n          </Form>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withRouter(AccountSecurityEnroll);\n"],"sourceRoot":""}