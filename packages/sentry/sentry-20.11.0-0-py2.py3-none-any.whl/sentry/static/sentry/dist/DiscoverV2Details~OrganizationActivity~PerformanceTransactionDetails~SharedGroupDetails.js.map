{"version":3,"sources":["webpack:///./app/components/activity/item/avatar.tsx","webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/components/commitLink.tsx","webpack:///./app/actions/releaseActions.tsx","webpack:///./app/stores/releaseStore.tsx","webpack:///./app/actionCreators/release.tsx","webpack:///./app/components/lastCommit.tsx","webpack:///./app/components/repoLabel.tsx","webpack:///./app/utils/withRelease.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx","webpack:///./app/components/versionHoverCard.tsx"],"names":["ActivityAvatar","className","type","user","size","SystemAvatar","StyledIconSentry","width","height","shape","p","theme","textColor","background","IconSentry","Reflux","createActions","SUPPORTED_PROVIDERS","icon","providerIds","commitUrl","baseUrl","commitId","CommitLink","inline","repository","t","shortId","getShortCommitHash","providerData","find","provider","includes","id","undefined","url","href","external","getReleaseStoreKey","projectSlug","releaseVersion","ReleaseStoreConfig","state","orgSlug","release","Map","releaseLoading","releaseError","deploys","deploysLoading","deploysError","listenables","ReleaseActions","init","this","listenTo","OrganizationActions","update","updateOrganization","reset","trigger","org","slug","loadRelease","releaseKey","loadReleaseError","error","loadReleaseSuccess","data","loadDeploys","loadDeploysError","loadDeploysSuccess","get","createStore","getProjectRelease","api","params","path","encodeURIComponent","ReleaseStore","requestPromise","method","then","res","err","status","Sentry","scope","setLevel","Warning","setFingerprint","getReleaseDeploys","archiveRelease","addLoadingMessage","ReleaseStatus","Archived","projects","version","addSuccessMessage","addErrorMessage","responseJSON","detail","restoreRelease","Active","unknownUser","name","username","email","avatarUrl","avatar","avatarUuid","avatarType","ip_address","LastCommit","message","firstLine","split","length","truncated","substr","words","pop","join","props","commit","headerClass","commitAuthor","author","renderMessage","date","dateCreated","React","Component","RepoLabel","white","overflowEllipsis","gray200","fontSizeSmall","withRelease","WrappedComponent","createReactClass","displayName","getDisplayName","mixins","getInitialState","componentDidMount","fetchRelease","fetchDeploys","releaseData","onStoreUpdate","setState","render","RepositoryStoreConfig","RepoActions","repositories","repositoriesLoading","repositoriesError","resetRepositories","loadRepositories","loadRepositoriesError","loadRepositoriesSuccess","INITIAL_STATE","withRepositories","RepositoryStore","repoData","RepositoryActions","fetchRepositories","getRepositories","VersionHoverCard","visible","header","body","ConnectRepo","priority","lastCommit","recentDeploysByEnvironment","reduce","dbe","deploy","dateFinished","environment","hasOwnProperty","mostRecentDeploySlice","Object","keys","slice","HeaderWrapper","VersionWrapper","StyledVersion","truncate","anchor","value","ClipboardIconWrapper","newGroups","style","textAlign","commitCount","authors","users","avatarSize","tooltipOptions","container","typeMembers","map","env","idx","key","position","VersionRepoLabel","StyledTimeSince","loading","hasRepos","mini","renderObj","getBody","getRepoLink","children","withApi","space","TimeSince","gray300","Version"],"mappings":"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","file":"DiscoverV2Details~OrganizationActivity~PerformanceTransactionDetails~SharedGroupDetails.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nimport {AvatarUser} from 'app/types';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport {IconSentry} from 'app/icons';\nimport Placeholder from 'app/components/placeholder';\nimport SentryTypes from 'app/sentryTypes';\n\ntype Props = {\n  type: 'system' | 'user';\n  user?: AvatarUser;\n  className?: string;\n  size?: number;\n};\n\nfunction ActivityAvatar({className, type, user, size = 38}: Props) {\n  if (user) {\n    return <UserAvatar user={user} size={size} className={className} />;\n  }\n\n  if (type === 'system') {\n    // Return Sentry avatar\n    return (\n      <SystemAvatar className={className} size={size}>\n        <StyledIconSentry size=\"md\" />\n      </SystemAvatar>\n    );\n  }\n\n  return (\n    <Placeholder\n      className={className}\n      width={`${size}px`}\n      height={`${size}px`}\n      shape=\"circle\"\n    />\n  );\n}\n\nActivityAvatar.propTypes = {\n  user: SentryTypes.User,\n  type: PropTypes.oneOf(['system', 'user']),\n  size: PropTypes.number,\n};\n\nexport default ActivityAvatar;\n\ntype SystemAvatarProps = {\n  size: number;\n};\n\nconst SystemAvatar = styled('span')<SystemAvatarProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${p => p.size}px;\n  height: ${p => p.size}px;\n  background-color: ${p => p.theme.textColor};\n  color: ${p => p.theme.background};\n  border-radius: 50%;\n`;\n\nconst StyledIconSentry = styled(IconSentry)`\n  padding-bottom: 3px;\n`;\n","import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n","import React from 'react';\n\nimport {Repository} from 'app/types';\nimport {t} from 'app/locale';\nimport {getShortCommitHash} from 'app/utils';\nimport Button from 'app/components/button';\nimport {IconBitbucket, IconGithub, IconGitlab, IconVsts} from 'app/icons';\nimport ExternalLink from 'app/components/links/externalLink';\n\ntype CommitFormatterParameters = {\n  baseUrl: string;\n  commitId: string;\n};\n\ntype CommitProvider = {\n  icon: React.ReactNode;\n  providerIds: string[];\n  commitUrl: (CommitFormatterParameters) => string;\n};\n\n// TODO(epurkhiser, jess): This should be moved into plugins.\nconst SUPPORTED_PROVIDERS: Readonly<CommitProvider[]> = [\n  {\n    icon: <IconGithub size=\"xs\" />,\n    providerIds: ['github', 'integrations:github', 'integrations:github_enterprise'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconBitbucket size=\"xs\" />,\n    providerIds: ['bitbucket', 'integrations:bitbucket'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commits/${commitId}`,\n  },\n  {\n    icon: <IconVsts size=\"xs\" />,\n    providerIds: ['visualstudio', 'integrations:vsts'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n  {\n    icon: <IconGitlab size=\"xs\" />,\n    providerIds: ['gitlab', 'integrations:gitlab'],\n    commitUrl: ({baseUrl, commitId}) => `${baseUrl}/commit/${commitId}`,\n  },\n];\n\ntype Props = {\n  commitId: string;\n  repository?: Repository;\n  inline?: boolean;\n};\n\nfunction CommitLink({inline, commitId, repository}: Props) {\n  if (!commitId || !repository) {\n    return <span>{t('Unknown Commit')}</span>;\n  }\n\n  const shortId = getShortCommitHash(commitId);\n\n  const providerData = SUPPORTED_PROVIDERS.find(provider => {\n    if (!repository.provider) {\n      return false;\n    }\n    return provider.providerIds.includes(repository.provider.id);\n  });\n\n  if (providerData === undefined) {\n    return <span>{shortId}</span>;\n  }\n\n  const commitUrl =\n    repository.url &&\n    providerData.commitUrl({\n      commitId,\n      baseUrl: repository.url,\n    });\n\n  return !inline ? (\n    <Button external href={commitUrl} size=\"small\" icon={providerData.icon}>\n      {shortId}\n    </Button>\n  ) : (\n    <ExternalLink className=\"inline-commit\" href={commitUrl}>\n      {providerData.icon}\n      {' ' + shortId}\n    </ExternalLink>\n  );\n}\n\nexport default CommitLink;\n","import Reflux from 'reflux';\n\nexport default Reflux.createActions([\n  'loadRelease', // Singular as it loads 1 release\n  'loadReleaseError',\n  'loadReleaseSuccess',\n  'loadDeploys', // Plural as it loads all deploys related to a release\n  'loadDeploysError',\n  'loadDeploysSuccess',\n]);\n","import Reflux from 'reflux';\n\nimport ReleaseActions from 'app/actions/releaseActions';\nimport OrganizationActions from 'app/actions/organizationActions';\nimport {Deploy, Organization, Release} from 'app/types';\n\ntype StoreRelease = Map<string, Release>;\ntype StoreDeploys = Map<string, Array<Deploy>>;\ntype StoreLoading = Map<string, boolean>;\ntype StoreError = Map<string, Error>;\n\ntype ReleaseStoreInterface = {\n  get(\n    projectSlug: string,\n    releaseVersion: string\n  ): {\n    release: Release | undefined;\n    releaseLoading: boolean | undefined;\n    releaseError: Error | undefined;\n    deploys: Array<Deploy> | undefined;\n    deploysLoading: boolean | undefined;\n    deploysError: Error | undefined;\n  };\n\n  state: {\n    orgSlug: string | undefined;\n    release: StoreRelease;\n    releaseLoading: StoreLoading;\n    releaseError: StoreError;\n    deploys: StoreDeploys;\n    deploysLoading: StoreLoading;\n    deploysError: StoreError;\n  };\n\n  updateOrganization(org: Organization): void;\n  loadRelease(orgSlug: string, projectSlug: string, releaseVersion: string): void;\n  loadReleaseSuccess(projectSlug: string, releaseVersion: string, data: Release): void;\n  loadReleaseError(projectSlug: string, releaseVersion: string, error: Error): void;\n  loadDeploys(orgSlug: string, projectSlug: string, releaseVersion: string): void;\n  loadDeploysSuccess(projectSlug: string, releaseVersion: string, data: Release): void;\n  loadDeploysError(projectSlug: string, releaseVersion: string, error: Error): void;\n};\n\nexport const getReleaseStoreKey = (projectSlug: string, releaseVersion: string) =>\n  `${projectSlug}${releaseVersion}`;\n\nconst ReleaseStoreConfig: Reflux.StoreDefinition & ReleaseStoreInterface = {\n  state: {\n    orgSlug: undefined,\n    release: new Map() as StoreRelease,\n    releaseLoading: new Map() as StoreLoading,\n    releaseError: new Map() as StoreError,\n    deploys: new Map() as StoreDeploys,\n    deploysLoading: new Map() as StoreLoading,\n    deploysError: new Map() as StoreError,\n  },\n\n  listenables: ReleaseActions,\n\n  init() {\n    this.listenTo(OrganizationActions.update, this.updateOrganization);\n    this.reset();\n  },\n\n  reset() {\n    this.state = {\n      orgSlug: undefined,\n      release: new Map() as StoreRelease,\n      releaseLoading: new Map() as StoreLoading,\n      releaseError: new Map() as StoreError,\n      deploys: new Map() as StoreDeploys,\n      deploysLoading: new Map() as StoreLoading,\n      deploysError: new Map() as StoreError,\n    };\n    this.trigger(this.state);\n  },\n\n  updateOrganization(org: Organization) {\n    this.reset();\n    this.state.orgSlug = org.slug;\n    this.trigger(this.state);\n  },\n\n  loadRelease(orgSlug: string, projectSlug: string, releaseVersion: string) {\n    // Wipe entire store if the user switched organizations\n    if (!this.orgSlug || this.orgSlug !== orgSlug) {\n      this.reset();\n      this.orgSlug = orgSlug;\n    }\n\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {releaseLoading, releaseError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: true,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadReleaseError(projectSlug: string, releaseVersion: string, error: Error) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {releaseLoading, releaseError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: false,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: error,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadReleaseSuccess(projectSlug: string, releaseVersion: string, data: Release) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {release, releaseLoading, releaseError, ...state} = this.state;\n    this.state = {\n      ...state,\n      release: {\n        ...release,\n        [releaseKey]: data,\n      },\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: false,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploys(orgSlug: string, projectSlug: string, releaseVersion: string) {\n    // Wipe entire store if the user switched organizations\n    if (!this.orgSlug || this.orgSlug !== orgSlug) {\n      this.reset();\n      this.orgSlug = orgSlug;\n    }\n\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: true,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploysError(projectSlug: string, releaseVersion: string, error: Error) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: false,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: error,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploysSuccess(projectSlug: string, releaseVersion: string, data: Release) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploys, deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploys: {\n        ...deploys,\n        [releaseKey]: data,\n      },\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: false,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  get(projectSlug: string, releaseVersion: string) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n\n    return {\n      release: this.state.release[releaseKey],\n      releaseLoading: this.state.releaseLoading[releaseKey],\n      releaseError: this.state.releaseError[releaseKey],\n      deploys: this.state.deploys[releaseKey],\n      deploysLoading: this.state.deploysLoading[releaseKey],\n      deploysError: this.state.deploysError[releaseKey],\n    };\n  },\n};\n\ntype ReleaseStore = Reflux.Store & ReleaseStoreInterface;\nexport default Reflux.createStore(ReleaseStoreConfig) as ReleaseStore;\n","import * as Sentry from '@sentry/react';\n\nimport {t} from 'app/locale';\nimport ReleaseActions from 'app/actions/releaseActions';\nimport {Client} from 'app/api';\nimport ReleaseStore, {getReleaseStoreKey} from 'app/stores/releaseStore';\nimport {Deploy, Release, ReleaseStatus} from 'app/types';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'app/actionCreators/indicator';\n\ntype ParamsGet = {\n  orgSlug: string;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\nexport function getProjectRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/projects/${orgSlug}/${projectSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/`;\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRelease for the same\n  // release to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  ReleaseStore.state.releaseLoading[\n    getReleaseStoreKey(projectSlug, releaseVersion)\n  ] = true;\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRelease-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function getReleaseDeploys(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/organizations/${orgSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/deploys/`;\n\n  // HACK(leedongwei): Same as above\n  ReleaseStore.state.deploysLoading[\n    getReleaseStoreKey(projectSlug, releaseVersion)\n  ] = true;\n  ReleaseActions.loadDeploys(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Deploy[]) => {\n      ReleaseActions.loadDeploysSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseActions.loadDeploysSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseActions.loadDeploysError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getReleaseDeploys-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function archiveRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Archiving Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Archived,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully archived.'));\n    })\n    .catch(error => {\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be archived.')\n      );\n      throw error;\n    });\n}\n\nexport function restoreRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Restoring Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Active,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully restored.'));\n    })\n    .catch(error => {\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be restored.')\n      );\n      throw error;\n    });\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {AvatarUser, Commit} from 'app/types';\nimport UserAvatar from 'app/components/avatar/userAvatar';\nimport TimeSince from 'app/components/timeSince';\nimport {t} from 'app/locale';\n\ntype Props = {\n  commit: Commit;\n  headerClass: string;\n};\n\nconst unknownUser: AvatarUser = {\n  id: '',\n  name: '',\n  username: '??',\n  email: '',\n  avatarUrl: '',\n  avatar: {\n    avatarUuid: '',\n    avatarType: 'letter_avatar',\n  },\n  ip_address: '',\n};\n\nclass LastCommit extends React.Component<Props> {\n  static propTypes = {\n    commit: PropTypes.object.isRequired,\n    headerClass: PropTypes.string,\n  };\n\n  renderMessage(message: Commit['message']): string {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n    if (firstLine.length > 100) {\n      let truncated = firstLine.substr(0, 90);\n      const words = truncated.split(/ /);\n      // try to not have elipsis mid-word\n      if (words.length > 1) {\n        words.pop();\n        truncated = words.join(' ');\n      }\n      return truncated + '...';\n    }\n    return firstLine;\n  }\n\n  render() {\n    const {commit, headerClass} = this.props;\n    const commitAuthor = commit && commit.author;\n    return (\n      <div>\n        <h6 className={headerClass}>Last commit</h6>\n        <div className=\"commit\">\n          <div className=\"commit-avatar\">\n            <UserAvatar user={commitAuthor || unknownUser} />\n          </div>\n          <div className=\"commit-message truncate\">\n            {this.renderMessage(commit.message)}\n          </div>\n          <div className=\"commit-meta\">\n            <strong>{(commitAuthor && commitAuthor.name) || t('Unknown Author')}</strong>\n            &nbsp;\n            <TimeSince date={commit.dateCreated} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LastCommit;\n","import styled from '@emotion/styled';\n\nimport overflowEllipsis from 'app/styles/overflowEllipsis';\n\nconst RepoLabel = styled('span')`\n  /* label mixin from bootstrap */\n  font-weight: 700;\n  color: ${p => p.theme.white};\n  text-align: center;\n  white-space: nowrap;\n  border-radius: 0.25em;\n  /* end of label mixin from bootstrap */\n\n  ${overflowEllipsis};\n\n  display: inline-block;\n  vertical-align: text-bottom;\n  line-height: 1;\n  background: ${p => p.theme.gray200};\n  padding: 3px;\n  max-width: 86px;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport default RepoLabel;\n","import React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\n\nimport {Client} from 'app/api';\nimport {Deploy, Release} from 'app/types';\nimport getDisplayName from 'app/utils/getDisplayName';\nimport ReleaseStore from 'app/stores/releaseStore';\nimport {getProjectRelease, getReleaseDeploys} from 'app/actionCreators/release';\n\ntype DependentProps = {\n  api: Client;\n  orgSlug: string;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\ntype InjectedProps = {\n  release?: Release;\n  releaseLoading?: boolean;\n  releaseError?: Error;\n  deploys?: Array<Deploy>;\n  deploysLoading?: boolean;\n  deploysError?: Error;\n};\n\nconst withRelease = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  >({\n    displayName: `withRelease(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(ReleaseStore, 'onStoreUpdate') as any],\n\n    getInitialState() {\n      const {projectSlug, releaseVersion} = this.props as P & DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      return {...releaseData};\n    },\n\n    componentDidMount() {\n      this.fetchRelease();\n      this.fetchDeploys();\n    },\n\n    fetchRelease() {\n      const {api, orgSlug, projectSlug, releaseVersion} = this.props as P &\n        DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n\n      if (\n        (!releaseData.release && !releaseData.releaseLoading) ||\n        releaseData.releaseError\n      ) {\n        getProjectRelease(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    },\n\n    fetchDeploys() {\n      const {api, orgSlug, projectSlug, releaseVersion} = this.props as P &\n        DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n\n      if (\n        (!releaseData.deploys && !releaseData.deploysLoading) ||\n        releaseData.deploysError\n      ) {\n        getReleaseDeploys(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    },\n\n    onStoreUpdate() {\n      const {projectSlug, releaseVersion} = this.props as P & DependentProps;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n\n      this.setState({...releaseData});\n    },\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P & DependentProps)}\n          {...(this.state as InjectedProps)}\n        />\n      );\n    },\n  });\n\nexport default withRelease;\n","import Reflux from 'reflux';\n\nimport RepoActions from 'app/actions/repositoryActions';\nimport {Repository} from 'app/types';\n\ntype RepositoryStoreInterface = {\n  get(): {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  state: {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesLoading?: boolean;\n    repositoriesError?: Error;\n  };\n\n  loadRepositories(orgSlug: string): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  loadRepositoriesError(error: Error): void;\n};\n\nexport const RepositoryStoreConfig: Reflux.StoreDefinition & RepositoryStoreInterface = {\n  listenables: RepoActions,\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\ntype RepositoryStore = Reflux.Store & RepositoryStoreInterface;\nexport default Reflux.createStore(RepositoryStoreConfig) as RepositoryStore;\n","import React from 'react';\nimport Reflux from 'reflux';\nimport createReactClass from 'create-react-class';\n\nimport {Client} from 'app/api';\nimport {Repository} from 'app/types';\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {getRepositories} from 'app/actionCreators/repositories';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport getDisplayName from 'app/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  orgSlug: string;\n};\n\ntype InjectedProps = {\n  repositories: Repository[] | undefined;\n  repositoriesLoading: boolean | undefined;\n  repositoriesError: Error | undefined;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nconst withRepositories = <P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) =>\n  createReactClass<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  >({\n    displayName: `withRepositories(${getDisplayName(WrappedComponent)})`,\n    mixins: [Reflux.listenTo(RepositoryStore, 'onStoreUpdate') as any],\n\n    getInitialState() {\n      const {orgSlug} = this.props as P & DependentProps;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryActions.resetRepositories();\n      }\n\n      return repoData.orgSlug === orgSlug\n        ? {...INITIAL_STATE, ...repoData}\n        : {...INITIAL_STATE};\n    },\n\n    componentDidMount() {\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    },\n\n    fetchRepositories() {\n      const {api, orgSlug} = this.props as P & DependentProps;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    },\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    },\n\n    render() {\n      return <WrappedComponent {...(this.props as P & DependentProps)} {...this.state} />;\n    },\n  });\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport RepositoryActions from 'app/actions/repositoryActions';\nimport {Client} from 'app/api';\nimport RepositoryStore from 'app/stores/repositoryStore';\nimport {Repository} from 'app/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryActions.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryActions.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryActions.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel(Sentry.Severity.Warning);\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'app/locale';\nimport AvatarList from 'app/components/avatar/avatarList';\nimport Button from 'app/components/button';\nimport Hovercard from 'app/components/hovercard';\nimport LastCommit from 'app/components/lastCommit';\nimport LoadingError from 'app/components/loadingError';\nimport LoadingIndicator from 'app/components/loadingIndicator';\nimport RepoLabel from 'app/components/repoLabel';\nimport TimeSince from 'app/components/timeSince';\nimport space from 'app/styles/space';\nimport withApi from 'app/utils/withApi';\nimport withRelease from 'app/utils/withRelease';\nimport withRepositories from 'app/utils/withRepositories';\nimport Clipboard from 'app/components/clipboard';\nimport {IconCopy} from 'app/icons';\nimport Version from 'app/components/version';\nimport {Client} from 'app/api';\nimport {Deploy, Release, Repository} from 'app/types';\n\ntype Props = {\n  api: Client;\n  orgSlug: string;\n  projectSlug: string;\n  releaseVersion: string;\n\n  release?: Release;\n  releaseLoading?: boolean;\n  releaseError?: Error;\n  deploys?: Array<Deploy>;\n  deploysLoading?: boolean;\n  deploysError?: Error;\n  repositories?: Array<Repository>;\n  repositoriesLoading?: boolean;\n  repositoriesError?: Error;\n};\ntype State = {\n  visible: boolean;\n};\n\nclass VersionHoverCard extends React.Component<Props, State> {\n  state: State = {\n    visible: false,\n  };\n\n  toggleHovercard() {\n    this.setState({\n      visible: true,\n    });\n  }\n\n  getRepoLink() {\n    const {orgSlug} = this.props;\n    return {\n      header: null,\n      body: (\n        <ConnectRepo>\n          <h5>{t('Releases are better with commit data!')}</h5>\n          <p>\n            {t(\n              'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n            )}\n          </p>\n          <Button href={`/organizations/${orgSlug}/repos/`} priority=\"primary\">\n            {t('Connect a repository')}\n          </Button>\n        </ConnectRepo>\n      ),\n    };\n  }\n\n  getBody() {\n    const {releaseVersion, release, deploys} = this.props;\n    if (release === undefined || deploys === undefined) {\n      return {header: null, body: null};\n    }\n\n    const {lastCommit} = release;\n    const recentDeploysByEnvironment = deploys.reduce(function (dbe, deploy) {\n      const {dateFinished, environment} = deploy;\n      if (!dbe.hasOwnProperty(environment)) {\n        dbe[environment] = dateFinished;\n      }\n\n      return dbe;\n    }, {});\n    let mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment);\n\n    if (Object.keys(recentDeploysByEnvironment).length > 3) {\n      mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment).slice(0, 3);\n    }\n\n    return {\n      header: (\n        <HeaderWrapper>\n          {t('Release')}\n          <VersionWrapper>\n            <StyledVersion version={releaseVersion} truncate anchor={false} />\n\n            <Clipboard value={releaseVersion}>\n              <ClipboardIconWrapper>\n                <IconCopy size=\"xs\" />\n              </ClipboardIconWrapper>\n            </Clipboard>\n          </VersionWrapper>\n        </HeaderWrapper>\n      ),\n      body: (\n        <div>\n          <div className=\"row row-flex\">\n            <div className=\"col-xs-4\">\n              <h6>{t('New Issues')}</h6>\n              <div className=\"count-since\">{release.newGroups}</div>\n            </div>\n            <div className=\"col-xs-8\">\n              <h6 style={{textAlign: 'right'}}>\n                {release.commitCount}{' '}\n                {release.commitCount !== 1 ? t('commits ') : t('commit ')} {t('by ')}{' '}\n                {release.authors.length}{' '}\n                {release.authors.length !== 1 ? t('authors') : t('author')}{' '}\n              </h6>\n              <AvatarList\n                users={release.authors}\n                avatarSize={25}\n                tooltipOptions={{container: 'body'} as any}\n                typeMembers=\"authors\"\n              />\n            </div>\n          </div>\n          {lastCommit && <LastCommit commit={lastCommit} headerClass=\"commit-heading\" />}\n          {deploys.length > 0 && (\n            <div>\n              <div className=\"divider\">\n                <h6 className=\"deploy-heading\">{t('Deploys')}</h6>\n              </div>\n              {mostRecentDeploySlice.map((env, idx) => {\n                const dateFinished = recentDeploysByEnvironment[env];\n                return (\n                  <div className=\"deploy\" key={idx}>\n                    <div className=\"deploy-meta\" style={{position: 'relative'}}>\n                      <VersionRepoLabel>{env}</VersionRepoLabel>\n                      {dateFinished && <StyledTimeSince date={dateFinished} />}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      ),\n    };\n  }\n\n  render() {\n    const {\n      deploysLoading,\n      deploysError,\n      release,\n      releaseLoading,\n      releaseError,\n      repositories,\n      repositoriesLoading,\n      repositoriesError,\n    } = this.props;\n    let header: React.ReactNode = null;\n    let body: React.ReactNode = null;\n\n    const loading = !!(deploysLoading || releaseLoading || repositoriesLoading);\n    const error = deploysError ?? releaseError ?? repositoriesError;\n    const hasRepos = repositories && repositories.length > 0;\n\n    if (loading) {\n      body = <LoadingIndicator mini />;\n    } else if (error) {\n      body = <LoadingError />;\n    } else {\n      const renderObj: {[key: string]: React.ReactNode} =\n        hasRepos && release ? this.getBody() : this.getRepoLink();\n      header = renderObj.header;\n      body = renderObj.body;\n    }\n\n    return (\n      <Hovercard {...this.props} header={header} body={body}>\n        {this.props.children}\n      </Hovercard>\n    );\n  }\n}\n\nexport {VersionHoverCard};\nexport default withApi(withRelease(withRepositories(VersionHoverCard)));\n\nconst ConnectRepo = styled('div')`\n  padding: ${space(2)};\n  text-align: center;\n`;\n\nconst VersionRepoLabel = styled(RepoLabel)`\n  width: 86px;\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  color: ${p => p.theme.gray300};\n  position: absolute;\n  left: 98px;\n  width: 50%;\n  padding: 3px 0;\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst VersionWrapper = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: flex-end;\n`;\nconst StyledVersion = styled(Version)`\n  margin-right: ${space(0.5)};\n  max-width: 190px;\n`;\nconst ClipboardIconWrapper = styled('span')`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n"],"sourceRoot":""}