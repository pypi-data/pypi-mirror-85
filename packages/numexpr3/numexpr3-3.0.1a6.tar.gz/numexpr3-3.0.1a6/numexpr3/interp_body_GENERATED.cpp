// WARNING: THIS FILE IS AUTO-GENERATED PRIOR TO COMPILATION.
// Editing should be done on the associated stub file instead.
/*********************************************************************
  Numexpr - Fast numerical array expression evaluator for NumPy.

      License: BSD
      Author:  See AUTHORS.txt

  See LICENSE.txt for details about copyright and rights to use.
**********************************************************************/

{
    npy_intp pc;

    // set up pointers to next block of inputs and outputs
#ifdef SINGLE_ITEM_CONST_LOOP
    //mem[0] = params->output;
#else // not SINGLE_ITEM_CONST_LOOP
    npy_intp J;
    // use the iterator's inner loop data
    // TODO: this is getting expensive to set mems for each block...
    npy_intp arrayCnt = 0;
    for( J = 0; J < params->n_reg; J++ ) {
        if( params->registers[J].kind & (KIND_ARRAY|KIND_RETURN) ) {
            params->registers[J].mem = iterDataPtr[arrayCnt];
            params->registers[J].stride = iterStrides[arrayCnt];
            arrayCnt++;
        }
    }
#  ifndef NO_OUTPUT_BUFFERING
    // if output buffering is necessary, first write to the buffer
    // DISABLE OUTPUT BUFFERING
//    if(params->outBuffer != NULL) {
//        GET_RETURN_REG(params).mem = params->outBuffer;
//        //mem[0] = params->outBuffer;
//    }
#  endif // NO_OUTPUT_BUFFERING

#endif // not SINGLE_ITEM_CONST_LOOP

    // WARNING: From now on, only do references to mem[arg[123]]
    // & memsteps[arg[123]] inside the VEC_ARG[123] macros,
    // or you will risk accessing invalid addresses.
    
    // For the strings, I think they are actual string objects?
    // https://github.com/numpy/numpy/blob/c90d7c94fd2077d0beca48fa89a423da2b0bb663/numpy/core/include/numpy/npy_3kcompat.h

    for (pc = 0; pc < params->program_len; pc++ ) {

        // Sample debug output, to be pasted into functions_GENERATED.cpp 
        // as needed: 
        // printf( "Arg1(%d@%p) + ARG2(%d@%p) => DEST(%d@%p)\n", arg1, x1, arg2, x2, store_in, dest );
        
        // TODO: BLOCK_SIZE1 is the number of operations, not the array block size,
        // so the memory block scales with itemsize...
        // printf( "Exec op: %d\n", params->program[pc].op );

        switch (params->program[pc].op) {
        case 0: 
            break;
        case 1: cast_b1( task_size, pc, params ); break;
case 2: cast_h1( task_size, pc, params ); break;
case 3: cast_l1( task_size, pc, params ); break;
case 4: cast_q1( task_size, pc, params ); break;
case 5: cast_B1( task_size, pc, params ); break;
case 6: cast_H1( task_size, pc, params ); break;
case 7: cast_L1( task_size, pc, params ); break;
case 8: cast_Q1( task_size, pc, params ); break;
case 9: cast_f1( task_size, pc, params ); break;
case 10: cast_d1( task_size, pc, params ); break;
case 11: cast_F1( task_size, pc, params ); break;
case 12: cast_D1( task_size, pc, params ); break;
case 13: unsafe_cast_1b( task_size, pc, params ); break;
case 14: cast_hb( task_size, pc, params ); break;
case 15: cast_lb( task_size, pc, params ); break;
case 16: cast_qb( task_size, pc, params ); break;
case 17: unsafe_cast_Bb( task_size, pc, params ); break;
case 18: unsafe_cast_Hb( task_size, pc, params ); break;
case 19: unsafe_cast_Lb( task_size, pc, params ); break;
case 20: unsafe_cast_Qb( task_size, pc, params ); break;
case 21: cast_fb( task_size, pc, params ); break;
case 22: cast_db( task_size, pc, params ); break;
case 23: cast_Fb( task_size, pc, params ); break;
case 24: cast_Db( task_size, pc, params ); break;
case 25: unsafe_cast_1h( task_size, pc, params ); break;
case 26: unsafe_cast_bh( task_size, pc, params ); break;
case 27: cast_lh( task_size, pc, params ); break;
case 28: cast_qh( task_size, pc, params ); break;
case 29: unsafe_cast_Bh( task_size, pc, params ); break;
case 30: unsafe_cast_Hh( task_size, pc, params ); break;
case 31: unsafe_cast_Lh( task_size, pc, params ); break;
case 32: unsafe_cast_Qh( task_size, pc, params ); break;
case 33: cast_fh( task_size, pc, params ); break;
case 34: cast_dh( task_size, pc, params ); break;
case 35: cast_Fh( task_size, pc, params ); break;
case 36: cast_Dh( task_size, pc, params ); break;
case 37: unsafe_cast_1l( task_size, pc, params ); break;
case 38: unsafe_cast_bl( task_size, pc, params ); break;
case 39: unsafe_cast_hl( task_size, pc, params ); break;
case 40: cast_ql( task_size, pc, params ); break;
case 41: unsafe_cast_Bl( task_size, pc, params ); break;
case 42: unsafe_cast_Hl( task_size, pc, params ); break;
case 43: unsafe_cast_Ll( task_size, pc, params ); break;
case 44: unsafe_cast_Ql( task_size, pc, params ); break;
case 45: unsafe_cast_fl( task_size, pc, params ); break;
case 46: cast_dl( task_size, pc, params ); break;
case 47: cast_Dl( task_size, pc, params ); break;
case 48: unsafe_cast_1q( task_size, pc, params ); break;
case 49: unsafe_cast_bq( task_size, pc, params ); break;
case 50: unsafe_cast_hq( task_size, pc, params ); break;
case 51: unsafe_cast_lq( task_size, pc, params ); break;
case 52: unsafe_cast_Bq( task_size, pc, params ); break;
case 53: unsafe_cast_Hq( task_size, pc, params ); break;
case 54: unsafe_cast_Lq( task_size, pc, params ); break;
case 55: unsafe_cast_Qq( task_size, pc, params ); break;
case 56: unsafe_cast_fq( task_size, pc, params ); break;
case 57: cast_dq( task_size, pc, params ); break;
case 58: cast_Dq( task_size, pc, params ); break;
case 59: unsafe_cast_1B( task_size, pc, params ); break;
case 60: unsafe_cast_bB( task_size, pc, params ); break;
case 61: cast_hB( task_size, pc, params ); break;
case 62: cast_lB( task_size, pc, params ); break;
case 63: cast_qB( task_size, pc, params ); break;
case 64: cast_HB( task_size, pc, params ); break;
case 65: cast_LB( task_size, pc, params ); break;
case 66: cast_QB( task_size, pc, params ); break;
case 67: cast_fB( task_size, pc, params ); break;
case 68: cast_dB( task_size, pc, params ); break;
case 69: cast_FB( task_size, pc, params ); break;
case 70: cast_DB( task_size, pc, params ); break;
case 71: unsafe_cast_1H( task_size, pc, params ); break;
case 72: unsafe_cast_bH( task_size, pc, params ); break;
case 73: unsafe_cast_hH( task_size, pc, params ); break;
case 74: cast_lH( task_size, pc, params ); break;
case 75: cast_qH( task_size, pc, params ); break;
case 76: unsafe_cast_BH( task_size, pc, params ); break;
case 77: cast_LH( task_size, pc, params ); break;
case 78: cast_QH( task_size, pc, params ); break;
case 79: cast_fH( task_size, pc, params ); break;
case 80: cast_dH( task_size, pc, params ); break;
case 81: cast_FH( task_size, pc, params ); break;
case 82: cast_DH( task_size, pc, params ); break;
case 83: unsafe_cast_1L( task_size, pc, params ); break;
case 84: unsafe_cast_bL( task_size, pc, params ); break;
case 85: unsafe_cast_hL( task_size, pc, params ); break;
case 86: unsafe_cast_lL( task_size, pc, params ); break;
case 87: cast_qL( task_size, pc, params ); break;
case 88: unsafe_cast_BL( task_size, pc, params ); break;
case 89: unsafe_cast_HL( task_size, pc, params ); break;
case 90: cast_QL( task_size, pc, params ); break;
case 91: unsafe_cast_fL( task_size, pc, params ); break;
case 92: cast_dL( task_size, pc, params ); break;
case 93: cast_DL( task_size, pc, params ); break;
case 94: unsafe_cast_1Q( task_size, pc, params ); break;
case 95: unsafe_cast_bQ( task_size, pc, params ); break;
case 96: unsafe_cast_hQ( task_size, pc, params ); break;
case 97: unsafe_cast_lQ( task_size, pc, params ); break;
case 98: unsafe_cast_qQ( task_size, pc, params ); break;
case 99: unsafe_cast_BQ( task_size, pc, params ); break;
case 100: unsafe_cast_HQ( task_size, pc, params ); break;
case 101: unsafe_cast_LQ( task_size, pc, params ); break;
case 102: unsafe_cast_fQ( task_size, pc, params ); break;
case 103: cast_dQ( task_size, pc, params ); break;
case 104: cast_DQ( task_size, pc, params ); break;
case 105: unsafe_cast_1f( task_size, pc, params ); break;
case 106: unsafe_cast_bf( task_size, pc, params ); break;
case 107: unsafe_cast_hf( task_size, pc, params ); break;
case 108: unsafe_cast_lf( task_size, pc, params ); break;
case 109: unsafe_cast_qf( task_size, pc, params ); break;
case 110: unsafe_cast_Bf( task_size, pc, params ); break;
case 111: unsafe_cast_Hf( task_size, pc, params ); break;
case 112: unsafe_cast_Lf( task_size, pc, params ); break;
case 113: unsafe_cast_Qf( task_size, pc, params ); break;
case 114: cast_df( task_size, pc, params ); break;
case 115: cast_Ff( task_size, pc, params ); break;
case 116: cast_Df( task_size, pc, params ); break;
case 117: unsafe_cast_1d( task_size, pc, params ); break;
case 118: unsafe_cast_bd( task_size, pc, params ); break;
case 119: unsafe_cast_hd( task_size, pc, params ); break;
case 120: unsafe_cast_ld( task_size, pc, params ); break;
case 121: unsafe_cast_qd( task_size, pc, params ); break;
case 122: unsafe_cast_Bd( task_size, pc, params ); break;
case 123: unsafe_cast_Hd( task_size, pc, params ); break;
case 124: unsafe_cast_Ld( task_size, pc, params ); break;
case 125: unsafe_cast_Qd( task_size, pc, params ); break;
case 126: unsafe_cast_fd( task_size, pc, params ); break;
case 127: cast_Dd( task_size, pc, params ); break;
case 128: cast_DF( task_size, pc, params ); break;
case 129: copy_11( task_size, pc, params ); break;
case 130: copy_bb( task_size, pc, params ); break;
case 131: copy_hh( task_size, pc, params ); break;
case 132: copy_ll( task_size, pc, params ); break;
case 133: copy_qq( task_size, pc, params ); break;
case 134: copy_BB( task_size, pc, params ); break;
case 135: copy_HH( task_size, pc, params ); break;
case 136: copy_LL( task_size, pc, params ); break;
case 137: copy_QQ( task_size, pc, params ); break;
case 138: copy_ff( task_size, pc, params ); break;
case 139: copy_dd( task_size, pc, params ); break;
case 140: copy_FF( task_size, pc, params ); break;
case 141: copy_DD( task_size, pc, params ); break;
case 142: add_111( task_size, pc, params ); break;
case 143: add_bbb( task_size, pc, params ); break;
case 144: add_hhh( task_size, pc, params ); break;
case 145: add_lll( task_size, pc, params ); break;
case 146: add_qqq( task_size, pc, params ); break;
case 147: add_BBB( task_size, pc, params ); break;
case 148: add_HHH( task_size, pc, params ); break;
case 149: add_LLL( task_size, pc, params ); break;
case 150: add_QQQ( task_size, pc, params ); break;
case 151: add_fff( task_size, pc, params ); break;
case 152: add_ddd( task_size, pc, params ); break;
case 153: sub_bbb( task_size, pc, params ); break;
case 154: sub_hhh( task_size, pc, params ); break;
case 155: sub_lll( task_size, pc, params ); break;
case 156: sub_qqq( task_size, pc, params ); break;
case 157: sub_BBB( task_size, pc, params ); break;
case 158: sub_HHH( task_size, pc, params ); break;
case 159: sub_LLL( task_size, pc, params ); break;
case 160: sub_QQQ( task_size, pc, params ); break;
case 161: sub_fff( task_size, pc, params ); break;
case 162: sub_ddd( task_size, pc, params ); break;
case 163: mult_111( task_size, pc, params ); break;
case 164: mult_bbb( task_size, pc, params ); break;
case 165: mult_hhh( task_size, pc, params ); break;
case 166: mult_lll( task_size, pc, params ); break;
case 167: mult_qqq( task_size, pc, params ); break;
case 168: mult_BBB( task_size, pc, params ); break;
case 169: mult_HHH( task_size, pc, params ); break;
case 170: mult_LLL( task_size, pc, params ); break;
case 171: mult_QQQ( task_size, pc, params ); break;
case 172: mult_fff( task_size, pc, params ); break;
case 173: mult_ddd( task_size, pc, params ); break;
case 174: div_d11( task_size, pc, params ); break;
case 175: div_dbb( task_size, pc, params ); break;
case 176: div_dhh( task_size, pc, params ); break;
case 177: div_dll( task_size, pc, params ); break;
case 178: div_dqq( task_size, pc, params ); break;
case 179: div_dBB( task_size, pc, params ); break;
case 180: div_dHH( task_size, pc, params ); break;
case 181: div_dLL( task_size, pc, params ); break;
case 182: div_dQQ( task_size, pc, params ); break;
case 183: div_fff( task_size, pc, params ); break;
case 184: div_ddd( task_size, pc, params ); break;
case 185: floordiv_bbb( task_size, pc, params ); break;
case 186: floordiv_hhh( task_size, pc, params ); break;
case 187: floordiv_lll( task_size, pc, params ); break;
case 188: floordiv_qqq( task_size, pc, params ); break;
case 189: floordiv_BBB( task_size, pc, params ); break;
case 190: floordiv_HHH( task_size, pc, params ); break;
case 191: floordiv_LLL( task_size, pc, params ); break;
case 192: floordiv_QQQ( task_size, pc, params ); break;
case 193: floordiv_fff( task_size, pc, params ); break;
case 194: floordiv_ddd( task_size, pc, params ); break;
case 195: float_power_dbb( task_size, pc, params ); break;
case 196: float_power_dhh( task_size, pc, params ); break;
case 197: float_power_dll( task_size, pc, params ); break;
case 198: float_power_dqq( task_size, pc, params ); break;
case 199: float_power_dBB( task_size, pc, params ); break;
case 200: float_power_dHH( task_size, pc, params ); break;
case 201: float_power_dLL( task_size, pc, params ); break;
case 202: float_power_dQQ( task_size, pc, params ); break;
case 203: power_bbb( task_size, pc, params ); break;
case 204: power_hhh( task_size, pc, params ); break;
case 205: power_lll( task_size, pc, params ); break;
case 206: power_qqq( task_size, pc, params ); break;
case 207: power_BBB( task_size, pc, params ); break;
case 208: power_HHH( task_size, pc, params ); break;
case 209: power_LLL( task_size, pc, params ); break;
case 210: power_QQQ( task_size, pc, params ); break;
case 211: power_fff( task_size, pc, params ); break;
case 212: power_ddd( task_size, pc, params ); break;
case 213: mod_bbb( task_size, pc, params ); break;
case 214: mod_hhh( task_size, pc, params ); break;
case 215: mod_lll( task_size, pc, params ); break;
case 216: mod_qqq( task_size, pc, params ); break;
case 217: mod_BBB( task_size, pc, params ); break;
case 218: mod_HHH( task_size, pc, params ); break;
case 219: mod_LLL( task_size, pc, params ); break;
case 220: mod_QQQ( task_size, pc, params ); break;
case 221: mod_fff( task_size, pc, params ); break;
case 222: mod_ddd( task_size, pc, params ); break;
case 223: fmod_fff( task_size, pc, params ); break;
case 224: fmod_ddd( task_size, pc, params ); break;
case 225: where_1111( task_size, pc, params ); break;
case 226: where_b1bb( task_size, pc, params ); break;
case 227: where_h1hh( task_size, pc, params ); break;
case 228: where_l1ll( task_size, pc, params ); break;
case 229: where_q1qq( task_size, pc, params ); break;
case 230: where_B1BB( task_size, pc, params ); break;
case 231: where_H1HH( task_size, pc, params ); break;
case 232: where_L1LL( task_size, pc, params ); break;
case 233: where_Q1QQ( task_size, pc, params ); break;
case 234: where_f1ff( task_size, pc, params ); break;
case 235: where_d1dd( task_size, pc, params ); break;
case 236: where_F1FF( task_size, pc, params ); break;
case 237: where_D1DD( task_size, pc, params ); break;
case 238: ones_like_11( task_size, pc, params ); break;
case 239: ones_like_bb( task_size, pc, params ); break;
case 240: ones_like_hh( task_size, pc, params ); break;
case 241: ones_like_ll( task_size, pc, params ); break;
case 242: ones_like_qq( task_size, pc, params ); break;
case 243: ones_like_BB( task_size, pc, params ); break;
case 244: ones_like_HH( task_size, pc, params ); break;
case 245: ones_like_LL( task_size, pc, params ); break;
case 246: ones_like_QQ( task_size, pc, params ); break;
case 247: ones_like_ff( task_size, pc, params ); break;
case 248: ones_like_dd( task_size, pc, params ); break;
case 249: usub_bb( task_size, pc, params ); break;
case 250: usub_hh( task_size, pc, params ); break;
case 251: usub_ll( task_size, pc, params ); break;
case 252: usub_qq( task_size, pc, params ); break;
case 253: usub_ff( task_size, pc, params ); break;
case 254: usub_dd( task_size, pc, params ); break;
case 255: lshift_bbb( task_size, pc, params ); break;
case 256: lshift_hhh( task_size, pc, params ); break;
case 257: lshift_lll( task_size, pc, params ); break;
case 258: lshift_qqq( task_size, pc, params ); break;
case 259: lshift_BBB( task_size, pc, params ); break;
case 260: lshift_HHH( task_size, pc, params ); break;
case 261: lshift_LLL( task_size, pc, params ); break;
case 262: lshift_QQQ( task_size, pc, params ); break;
case 263: rshift_bbb( task_size, pc, params ); break;
case 264: rshift_hhh( task_size, pc, params ); break;
case 265: rshift_lll( task_size, pc, params ); break;
case 266: rshift_qqq( task_size, pc, params ); break;
case 267: rshift_BBB( task_size, pc, params ); break;
case 268: rshift_HHH( task_size, pc, params ); break;
case 269: rshift_LLL( task_size, pc, params ); break;
case 270: rshift_QQQ( task_size, pc, params ); break;
case 271: bitand_111( task_size, pc, params ); break;
case 272: bitand_bbb( task_size, pc, params ); break;
case 273: bitand_hhh( task_size, pc, params ); break;
case 274: bitand_lll( task_size, pc, params ); break;
case 275: bitand_qqq( task_size, pc, params ); break;
case 276: bitand_BBB( task_size, pc, params ); break;
case 277: bitand_HHH( task_size, pc, params ); break;
case 278: bitand_LLL( task_size, pc, params ); break;
case 279: bitand_QQQ( task_size, pc, params ); break;
case 280: bitor_111( task_size, pc, params ); break;
case 281: bitor_bbb( task_size, pc, params ); break;
case 282: bitor_hhh( task_size, pc, params ); break;
case 283: bitor_lll( task_size, pc, params ); break;
case 284: bitor_qqq( task_size, pc, params ); break;
case 285: bitor_BBB( task_size, pc, params ); break;
case 286: bitor_HHH( task_size, pc, params ); break;
case 287: bitor_LLL( task_size, pc, params ); break;
case 288: bitor_QQQ( task_size, pc, params ); break;
case 289: bitxor_111( task_size, pc, params ); break;
case 290: bitxor_bbb( task_size, pc, params ); break;
case 291: bitxor_hhh( task_size, pc, params ); break;
case 292: bitxor_lll( task_size, pc, params ); break;
case 293: bitxor_qqq( task_size, pc, params ); break;
case 294: bitxor_BBB( task_size, pc, params ); break;
case 295: bitxor_HHH( task_size, pc, params ); break;
case 296: bitxor_LLL( task_size, pc, params ); break;
case 297: bitxor_QQQ( task_size, pc, params ); break;
case 298: logical_and_111( task_size, pc, params ); break;
case 299: logical_or_111( task_size, pc, params ); break;
case 300: gt_111( task_size, pc, params ); break;
case 301: gt_1bb( task_size, pc, params ); break;
case 302: gt_1hh( task_size, pc, params ); break;
case 303: gt_1ll( task_size, pc, params ); break;
case 304: gt_1qq( task_size, pc, params ); break;
case 305: gt_1BB( task_size, pc, params ); break;
case 306: gt_1HH( task_size, pc, params ); break;
case 307: gt_1LL( task_size, pc, params ); break;
case 308: gt_1QQ( task_size, pc, params ); break;
case 309: gt_1ff( task_size, pc, params ); break;
case 310: gt_1dd( task_size, pc, params ); break;
case 311: gte_111( task_size, pc, params ); break;
case 312: gte_1bb( task_size, pc, params ); break;
case 313: gte_1hh( task_size, pc, params ); break;
case 314: gte_1ll( task_size, pc, params ); break;
case 315: gte_1qq( task_size, pc, params ); break;
case 316: gte_1BB( task_size, pc, params ); break;
case 317: gte_1HH( task_size, pc, params ); break;
case 318: gte_1LL( task_size, pc, params ); break;
case 319: gte_1QQ( task_size, pc, params ); break;
case 320: gte_1ff( task_size, pc, params ); break;
case 321: gte_1dd( task_size, pc, params ); break;
case 322: lt_111( task_size, pc, params ); break;
case 323: lt_1bb( task_size, pc, params ); break;
case 324: lt_1hh( task_size, pc, params ); break;
case 325: lt_1ll( task_size, pc, params ); break;
case 326: lt_1qq( task_size, pc, params ); break;
case 327: lt_1BB( task_size, pc, params ); break;
case 328: lt_1HH( task_size, pc, params ); break;
case 329: lt_1LL( task_size, pc, params ); break;
case 330: lt_1QQ( task_size, pc, params ); break;
case 331: lt_1ff( task_size, pc, params ); break;
case 332: lt_1dd( task_size, pc, params ); break;
case 333: lte_111( task_size, pc, params ); break;
case 334: lte_1bb( task_size, pc, params ); break;
case 335: lte_1hh( task_size, pc, params ); break;
case 336: lte_1ll( task_size, pc, params ); break;
case 337: lte_1qq( task_size, pc, params ); break;
case 338: lte_1BB( task_size, pc, params ); break;
case 339: lte_1HH( task_size, pc, params ); break;
case 340: lte_1LL( task_size, pc, params ); break;
case 341: lte_1QQ( task_size, pc, params ); break;
case 342: lte_1ff( task_size, pc, params ); break;
case 343: lte_1dd( task_size, pc, params ); break;
case 344: eq_111( task_size, pc, params ); break;
case 345: eq_1bb( task_size, pc, params ); break;
case 346: eq_1hh( task_size, pc, params ); break;
case 347: eq_1ll( task_size, pc, params ); break;
case 348: eq_1qq( task_size, pc, params ); break;
case 349: eq_1BB( task_size, pc, params ); break;
case 350: eq_1HH( task_size, pc, params ); break;
case 351: eq_1LL( task_size, pc, params ); break;
case 352: eq_1QQ( task_size, pc, params ); break;
case 353: eq_1ff( task_size, pc, params ); break;
case 354: eq_1dd( task_size, pc, params ); break;
case 355: noteq_111( task_size, pc, params ); break;
case 356: noteq_1bb( task_size, pc, params ); break;
case 357: noteq_1hh( task_size, pc, params ); break;
case 358: noteq_1ll( task_size, pc, params ); break;
case 359: noteq_1qq( task_size, pc, params ); break;
case 360: noteq_1BB( task_size, pc, params ); break;
case 361: noteq_1HH( task_size, pc, params ); break;
case 362: noteq_1LL( task_size, pc, params ); break;
case 363: noteq_1QQ( task_size, pc, params ); break;
case 364: noteq_1ff( task_size, pc, params ); break;
case 365: noteq_1dd( task_size, pc, params ); break;
case 366: abs_bb( task_size, pc, params ); break;
case 367: abs_hh( task_size, pc, params ); break;
case 368: abs_ll( task_size, pc, params ); break;
case 369: abs_qq( task_size, pc, params ); break;
case 370: abs_ff( task_size, pc, params ); break;
case 371: abs_dd( task_size, pc, params ); break;
case 372: arccos_ff( task_size, pc, params ); break;
case 373: arccos_dd( task_size, pc, params ); break;
case 374: arcsin_ff( task_size, pc, params ); break;
case 375: arcsin_dd( task_size, pc, params ); break;
case 376: arctan_ff( task_size, pc, params ); break;
case 377: arctan_dd( task_size, pc, params ); break;
case 378: arctan2_fff( task_size, pc, params ); break;
case 379: arctan2_ddd( task_size, pc, params ); break;
case 380: ceil_ff( task_size, pc, params ); break;
case 381: ceil_dd( task_size, pc, params ); break;
case 382: cos_ff( task_size, pc, params ); break;
case 383: cos_dd( task_size, pc, params ); break;
case 384: cosh_ff( task_size, pc, params ); break;
case 385: cosh_dd( task_size, pc, params ); break;
case 386: exp_ff( task_size, pc, params ); break;
case 387: exp_dd( task_size, pc, params ); break;
case 388: floor_ff( task_size, pc, params ); break;
case 389: floor_dd( task_size, pc, params ); break;
case 390: factorial_dl( task_size, pc, params ); break;
case 391: factorial_dq( task_size, pc, params ); break;
case 392: factorial_dL( task_size, pc, params ); break;
case 393: factorial_dQ( task_size, pc, params ); break;
case 394: factorial_df( task_size, pc, params ); break;
case 395: factorial_dd( task_size, pc, params ); break;
case 396: rad2deg_ff( task_size, pc, params ); break;
case 397: rad2deg_dd( task_size, pc, params ); break;
case 398: deg2rad_ff( task_size, pc, params ); break;
case 399: deg2rad_dd( task_size, pc, params ); break;
case 400: log_ff( task_size, pc, params ); break;
case 401: log_dd( task_size, pc, params ); break;
case 402: log10_ff( task_size, pc, params ); break;
case 403: log10_dd( task_size, pc, params ); break;
case 404: logaddexp_fff( task_size, pc, params ); break;
case 405: logaddexp_ddd( task_size, pc, params ); break;
case 406: sin_ff( task_size, pc, params ); break;
case 407: sin_dd( task_size, pc, params ); break;
case 408: sinh_ff( task_size, pc, params ); break;
case 409: sinh_dd( task_size, pc, params ); break;
case 410: sqrt_ff( task_size, pc, params ); break;
case 411: sqrt_dd( task_size, pc, params ); break;
case 412: tan_ff( task_size, pc, params ); break;
case 413: tan_dd( task_size, pc, params ); break;
case 414: tanh_ff( task_size, pc, params ); break;
case 415: tanh_dd( task_size, pc, params ); break;
case 416: maximum_111( task_size, pc, params ); break;
case 417: maximum_bbb( task_size, pc, params ); break;
case 418: maximum_hhh( task_size, pc, params ); break;
case 419: maximum_lll( task_size, pc, params ); break;
case 420: maximum_qqq( task_size, pc, params ); break;
case 421: maximum_BBB( task_size, pc, params ); break;
case 422: maximum_HHH( task_size, pc, params ); break;
case 423: maximum_LLL( task_size, pc, params ); break;
case 424: maximum_QQQ( task_size, pc, params ); break;
case 425: maximum_fff( task_size, pc, params ); break;
case 426: maximum_ddd( task_size, pc, params ); break;
case 427: minimum_111( task_size, pc, params ); break;
case 428: minimum_bbb( task_size, pc, params ); break;
case 429: minimum_hhh( task_size, pc, params ); break;
case 430: minimum_lll( task_size, pc, params ); break;
case 431: minimum_qqq( task_size, pc, params ); break;
case 432: minimum_BBB( task_size, pc, params ); break;
case 433: minimum_HHH( task_size, pc, params ); break;
case 434: minimum_LLL( task_size, pc, params ); break;
case 435: minimum_QQQ( task_size, pc, params ); break;
case 436: minimum_fff( task_size, pc, params ); break;
case 437: minimum_ddd( task_size, pc, params ); break;
case 438: fpclassify_lf( task_size, pc, params ); break;
case 439: fpclassify_ld( task_size, pc, params ); break;
case 440: isfinite_1f( task_size, pc, params ); break;
case 441: isfinite_1d( task_size, pc, params ); break;
case 442: isinf_1f( task_size, pc, params ); break;
case 443: isinf_1d( task_size, pc, params ); break;
case 444: isnan_1f( task_size, pc, params ); break;
case 445: isnan_1d( task_size, pc, params ); break;
case 446: isnormal_1f( task_size, pc, params ); break;
case 447: isnormal_1d( task_size, pc, params ); break;
case 448: sign_bb( task_size, pc, params ); break;
case 449: sign_hh( task_size, pc, params ); break;
case 450: sign_ll( task_size, pc, params ); break;
case 451: sign_qq( task_size, pc, params ); break;
case 452: sign_ff( task_size, pc, params ); break;
case 453: sign_dd( task_size, pc, params ); break;
case 454: arccosh_ff( task_size, pc, params ); break;
case 455: arccosh_dd( task_size, pc, params ); break;
case 456: arcsinh_ff( task_size, pc, params ); break;
case 457: arcsinh_dd( task_size, pc, params ); break;
case 458: arctanh_ff( task_size, pc, params ); break;
case 459: arctanh_dd( task_size, pc, params ); break;
case 460: cbrt_ff( task_size, pc, params ); break;
case 461: cbrt_dd( task_size, pc, params ); break;
case 462: copysign_fff( task_size, pc, params ); break;
case 463: copysign_ddd( task_size, pc, params ); break;
case 464: erf_ff( task_size, pc, params ); break;
case 465: erf_dd( task_size, pc, params ); break;
case 466: erfc_ff( task_size, pc, params ); break;
case 467: erfc_dd( task_size, pc, params ); break;
case 468: exp2_ff( task_size, pc, params ); break;
case 469: exp2_dd( task_size, pc, params ); break;
case 470: expm1_ff( task_size, pc, params ); break;
case 471: expm1_dd( task_size, pc, params ); break;
case 472: fdim_fff( task_size, pc, params ); break;
case 473: fdim_ddd( task_size, pc, params ); break;
case 474: fma_ffff( task_size, pc, params ); break;
case 475: fma_dddd( task_size, pc, params ); break;
case 476: hypot_ddd( task_size, pc, params ); break;
case 477: hypot_fff( task_size, pc, params ); break;
case 478: ilogb_lf( task_size, pc, params ); break;
case 479: ilogb_ld( task_size, pc, params ); break;
case 480: lgamma_ff( task_size, pc, params ); break;
case 481: lgamma_dd( task_size, pc, params ); break;
case 482: log1p_ff( task_size, pc, params ); break;
case 483: log1p_dd( task_size, pc, params ); break;
case 484: log2_ff( task_size, pc, params ); break;
case 485: log2_dd( task_size, pc, params ); break;
case 486: logaddexp2_fff( task_size, pc, params ); break;
case 487: logaddexp2_ddd( task_size, pc, params ); break;
case 488: heaviside_fff( task_size, pc, params ); break;
case 489: heaviside_ddd( task_size, pc, params ); break;
case 490: logb_ff( task_size, pc, params ); break;
case 491: logb_dd( task_size, pc, params ); break;
case 492: lrint_qf( task_size, pc, params ); break;
case 493: lrint_qd( task_size, pc, params ); break;
case 494: lround_qf( task_size, pc, params ); break;
case 495: lround_qd( task_size, pc, params ); break;
case 496: nearbyint_qf( task_size, pc, params ); break;
case 497: nearbyint_qd( task_size, pc, params ); break;
case 498: nextafter_fff( task_size, pc, params ); break;
case 499: nextafter_ddd( task_size, pc, params ); break;
case 500: nexttoward_fff( task_size, pc, params ); break;
case 501: nexttoward_ddd( task_size, pc, params ); break;
case 502: rint_ff( task_size, pc, params ); break;
case 503: rint_dd( task_size, pc, params ); break;
case 504: round_lf( task_size, pc, params ); break;
case 505: round_ld( task_size, pc, params ); break;
case 506: scalbln_ffq( task_size, pc, params ); break;
case 507: scalbln_ddq( task_size, pc, params ); break;
case 508: gamma_ff( task_size, pc, params ); break;
case 509: gamma_dd( task_size, pc, params ); break;
case 510: trunc_ff( task_size, pc, params ); break;
case 511: trunc_dd( task_size, pc, params ); break;
case 512: complex_Fff( task_size, pc, params ); break;
case 513: complex_Ddd( task_size, pc, params ); break;
case 514: real_fF( task_size, pc, params ); break;
case 515: real_dD( task_size, pc, params ); break;
case 516: imag_fF( task_size, pc, params ); break;
case 517: imag_dD( task_size, pc, params ); break;
case 518: abs_fF( task_size, pc, params ); break;
case 519: abs_dD( task_size, pc, params ); break;
case 520: abs2_fF( task_size, pc, params ); break;
case 521: abs2_dD( task_size, pc, params ); break;
case 522: add_FFF( task_size, pc, params ); break;
case 523: add_DDD( task_size, pc, params ); break;
case 524: sub_FFF( task_size, pc, params ); break;
case 525: sub_DDD( task_size, pc, params ); break;
case 526: mult_FFF( task_size, pc, params ); break;
case 527: mult_DDD( task_size, pc, params ); break;
case 528: div_FFF( task_size, pc, params ); break;
case 529: div_DDD( task_size, pc, params ); break;
case 530: usub_FF( task_size, pc, params ); break;
case 531: usub_DD( task_size, pc, params ); break;
case 532: neg_FF( task_size, pc, params ); break;
case 533: neg_DD( task_size, pc, params ); break;
case 534: conj_FF( task_size, pc, params ); break;
case 535: conj_DD( task_size, pc, params ); break;
case 536: conj_ff( task_size, pc, params ); break;
case 537: conj_dd( task_size, pc, params ); break;
case 538: sqrt_FF( task_size, pc, params ); break;
case 539: sqrt_DD( task_size, pc, params ); break;
case 540: log_FF( task_size, pc, params ); break;
case 541: log_DD( task_size, pc, params ); break;
case 542: log1p_FF( task_size, pc, params ); break;
case 543: log1p_DD( task_size, pc, params ); break;
case 544: log10_FF( task_size, pc, params ); break;
case 545: log10_DD( task_size, pc, params ); break;
case 546: exp_FF( task_size, pc, params ); break;
case 547: exp_DD( task_size, pc, params ); break;
case 548: expm1_FF( task_size, pc, params ); break;
case 549: expm1_DD( task_size, pc, params ); break;
case 550: pow_FFF( task_size, pc, params ); break;
case 551: pow_DDD( task_size, pc, params ); break;
case 552: arccos_FF( task_size, pc, params ); break;
case 553: arccos_DD( task_size, pc, params ); break;
case 554: arccosh_FF( task_size, pc, params ); break;
case 555: arccosh_DD( task_size, pc, params ); break;
case 556: arcsin_FF( task_size, pc, params ); break;
case 557: arcsin_DD( task_size, pc, params ); break;
case 558: arcsinh_FF( task_size, pc, params ); break;
case 559: arcsinh_DD( task_size, pc, params ); break;
case 560: arctan_FF( task_size, pc, params ); break;
case 561: arctan_DD( task_size, pc, params ); break;
case 562: arctanh_FF( task_size, pc, params ); break;
case 563: arctanh_DD( task_size, pc, params ); break;
case 564: cos_FF( task_size, pc, params ); break;
case 565: cos_DD( task_size, pc, params ); break;
case 566: cosh_FF( task_size, pc, params ); break;
case 567: cosh_DD( task_size, pc, params ); break;
case 568: sin_FF( task_size, pc, params ); break;
case 569: sin_DD( task_size, pc, params ); break;
case 570: sinh_FF( task_size, pc, params ); break;
case 571: sinh_DD( task_size, pc, params ); break;
case 572: tan_FF( task_size, pc, params ); break;
case 573: tan_DD( task_size, pc, params ); break;
case 574: tanh_FF( task_size, pc, params ); break;
case 575: tanh_DD( task_size, pc, params ); break;
case 576: angle_fF( task_size, pc, params ); break;
case 577: angle_dD( task_size, pc, params ); break;
case 578: crosspower_FFF( task_size, pc, params ); break;
case 579: crosspower_DDD( task_size, pc, params ); break;
// End of GENERATED CODE BLOCK

        default:
            //*pc_error = pc;
            return -3;
            break;
        }
    }

#ifndef NO_OUTPUT_BUFFERING
    // If output buffering was necessary, copy the buffer to the output
    //printf( "TODO: output buffering disabled.\n" );
//    if(params->outBuffer != NULL) {
//        memcpy(iterDataPtr[0], params->outBuffer, GET_RETURN_REG(params).itemsize * BLOCK_SIZE);
//    }
#endif // NO_OUTPUT_BUFFERING
}


