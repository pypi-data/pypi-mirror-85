# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.14.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import generic_camunda_client
from generic_camunda_client.models.historic_activity_instance_query_dto import HistoricActivityInstanceQueryDto  # noqa: E501
from generic_camunda_client.rest import ApiException

class TestHistoricActivityInstanceQueryDto(unittest.TestCase):
    """HistoricActivityInstanceQueryDto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test HistoricActivityInstanceQueryDto
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = generic_camunda_client.models.historic_activity_instance_query_dto.HistoricActivityInstanceQueryDto()  # noqa: E501
        if include_optional :
            return HistoricActivityInstanceQueryDto(
                activity_instance_id = '0', 
                process_instance_id = '0', 
                process_definition_id = '0', 
                execution_id = '0', 
                activity_id = '0', 
                activity_name = '0', 
                activity_type = '0', 
                task_assignee = '0', 
                finished = True, 
                unfinished = True, 
                canceled = True, 
                complete_scope = True, 
                started_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                started_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                finished_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                finished_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                tenant_id_in = [
                    '0'
                    ], 
                without_tenant_id = True, 
                sorting = [
                    generic_camunda_client.models.historic_activity_instance_query_dto_sorting.HistoricActivityInstanceQueryDto_sorting(
                        sort_by = 'activityInstanceId', 
                        sort_order = 'asc', )
                    ]
            )
        else :
            return HistoricActivityInstanceQueryDto(
        )

    def testHistoricActivityInstanceQueryDto(self):
        """Test HistoricActivityInstanceQueryDto"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
