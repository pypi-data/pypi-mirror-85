# coding: utf-8

"""
    Camunda BPM REST API

    OpenApi Spec for Camunda BPM REST API.  # noqa: E501

    The version of the OpenAPI document: 7.14.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from generic_camunda_client.configuration import Configuration


class DeleteHistoricProcessInstancesDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'historic_process_instance_ids': 'list[str]',
        'historic_process_instance_query': 'HistoricProcessInstanceQueryDto',
        'delete_reason': 'str',
        'fail_if_not_exists': 'bool'
    }

    attribute_map = {
        'historic_process_instance_ids': 'historicProcessInstanceIds',
        'historic_process_instance_query': 'historicProcessInstanceQuery',
        'delete_reason': 'deleteReason',
        'fail_if_not_exists': 'failIfNotExists'
    }

    def __init__(self, historic_process_instance_ids=None, historic_process_instance_query=None, delete_reason=None, fail_if_not_exists=None, local_vars_configuration=None):  # noqa: E501
        """DeleteHistoricProcessInstancesDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._historic_process_instance_ids = None
        self._historic_process_instance_query = None
        self._delete_reason = None
        self._fail_if_not_exists = None
        self.discriminator = None

        if historic_process_instance_ids is not None:
            self.historic_process_instance_ids = historic_process_instance_ids
        if historic_process_instance_query is not None:
            self.historic_process_instance_query = historic_process_instance_query
        if delete_reason is not None:
            self.delete_reason = delete_reason
        self.fail_if_not_exists = fail_if_not_exists

    @property
    def historic_process_instance_ids(self):
        """Gets the historic_process_instance_ids of this DeleteHistoricProcessInstancesDto.  # noqa: E501

        A list historic process instance ids to delete.  # noqa: E501

        :return: The historic_process_instance_ids of this DeleteHistoricProcessInstancesDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._historic_process_instance_ids

    @historic_process_instance_ids.setter
    def historic_process_instance_ids(self, historic_process_instance_ids):
        """Sets the historic_process_instance_ids of this DeleteHistoricProcessInstancesDto.

        A list historic process instance ids to delete.  # noqa: E501

        :param historic_process_instance_ids: The historic_process_instance_ids of this DeleteHistoricProcessInstancesDto.  # noqa: E501
        :type: list[str]
        """

        self._historic_process_instance_ids = historic_process_instance_ids

    @property
    def historic_process_instance_query(self):
        """Gets the historic_process_instance_query of this DeleteHistoricProcessInstancesDto.  # noqa: E501


        :return: The historic_process_instance_query of this DeleteHistoricProcessInstancesDto.  # noqa: E501
        :rtype: HistoricProcessInstanceQueryDto
        """
        return self._historic_process_instance_query

    @historic_process_instance_query.setter
    def historic_process_instance_query(self, historic_process_instance_query):
        """Sets the historic_process_instance_query of this DeleteHistoricProcessInstancesDto.


        :param historic_process_instance_query: The historic_process_instance_query of this DeleteHistoricProcessInstancesDto.  # noqa: E501
        :type: HistoricProcessInstanceQueryDto
        """

        self._historic_process_instance_query = historic_process_instance_query

    @property
    def delete_reason(self):
        """Gets the delete_reason of this DeleteHistoricProcessInstancesDto.  # noqa: E501

        A string with delete reason.  # noqa: E501

        :return: The delete_reason of this DeleteHistoricProcessInstancesDto.  # noqa: E501
        :rtype: str
        """
        return self._delete_reason

    @delete_reason.setter
    def delete_reason(self, delete_reason):
        """Sets the delete_reason of this DeleteHistoricProcessInstancesDto.

        A string with delete reason.  # noqa: E501

        :param delete_reason: The delete_reason of this DeleteHistoricProcessInstancesDto.  # noqa: E501
        :type: str
        """

        self._delete_reason = delete_reason

    @property
    def fail_if_not_exists(self):
        """Gets the fail_if_not_exists of this DeleteHistoricProcessInstancesDto.  # noqa: E501

        If set to `false`, the request will still be successful if one ore more of the process ids are not found.  # noqa: E501

        :return: The fail_if_not_exists of this DeleteHistoricProcessInstancesDto.  # noqa: E501
        :rtype: bool
        """
        return self._fail_if_not_exists

    @fail_if_not_exists.setter
    def fail_if_not_exists(self, fail_if_not_exists):
        """Sets the fail_if_not_exists of this DeleteHistoricProcessInstancesDto.

        If set to `false`, the request will still be successful if one ore more of the process ids are not found.  # noqa: E501

        :param fail_if_not_exists: The fail_if_not_exists of this DeleteHistoricProcessInstancesDto.  # noqa: E501
        :type: bool
        """

        self._fail_if_not_exists = fail_if_not_exists

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeleteHistoricProcessInstancesDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeleteHistoricProcessInstancesDto):
            return True

        return self.to_dict() != other.to_dict()
