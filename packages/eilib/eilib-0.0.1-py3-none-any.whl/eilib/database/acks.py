# Autogenerated file. Do not modify
import typing

from .abstract import EiDatabase, EiDatabaseCustomType, EiDatabaseTable, EiDatabaseTableRow


class AcksUniqueType1(EiDatabaseCustomType):

    __slots__ = (
        "path",
        "unk2",
        "translate",
        "code",
    )

    def __init__(self):
        self.path: str = None
        self.unk2: int = None
        self.translate: str = None
        self.code: str = None
        super().__init__()


class AcksUniqueType2(EiDatabaseCustomType):

    __slots__ = (
        "path",
        "unk2",
        "translate",
        "code",
        "unk10",
    )

    def __init__(self):
        self.path: str = None
        self.unk2: int = None
        self.translate: str = None
        self.code: str = None
        self.unk10: int = None
        super().__init__()


class Answer(EiDatabaseTableRow):

    __slots__ = (
        "name",
        "select",
        "move",
        "attack",
        "cast",
        "loot",
        "useobj",
        "steal",
        "follow",
        "usepot",
        "chpos",
        "noway",
        "cntchpos",
        "nopath",
        "cantcast",
        "canttele",
        "skifail",
        "notarget",
        "complsp",
        "dectoatt",
        "outstam",
        "armcrip",
        "legcrip",
        "bored",
        "unknown",
        "overload",
        "injured",
        "bigatt",
        "armorcrip",
        "wearcrip",
        "attindef",
        "waitfoll",
        "scenario",
        "stealemp",
        "shopyes",
        "shopno",
    )

    def __init__(self):
        self.name: str = None
        self.select: typing.List[AcksUniqueType1] = None
        self.move: typing.List[AcksUniqueType1] = None
        self.attack: typing.List[AcksUniqueType1] = None
        self.cast: typing.List[AcksUniqueType1] = None
        self.loot: typing.List[AcksUniqueType1] = None
        self.useobj: typing.List[AcksUniqueType1] = None
        self.steal: typing.List[AcksUniqueType1] = None
        self.follow: typing.List[AcksUniqueType1] = None
        self.usepot: typing.List[AcksUniqueType1] = None
        self.chpos: typing.List[AcksUniqueType1] = None
        self.noway: typing.List[AcksUniqueType1] = None
        self.cntchpos: typing.List[AcksUniqueType1] = None
        self.nopath: typing.List[AcksUniqueType1] = None
        self.cantcast: typing.List[AcksUniqueType1] = None
        self.canttele: typing.List[AcksUniqueType1] = None
        self.skifail: typing.List[AcksUniqueType1] = None
        self.notarget: typing.List[AcksUniqueType1] = None
        self.complsp: typing.List[AcksUniqueType1] = None
        self.dectoatt: typing.List[AcksUniqueType1] = None
        self.outstam: typing.List[AcksUniqueType1] = None
        self.armcrip: typing.List[AcksUniqueType1] = None
        self.legcrip: typing.List[AcksUniqueType1] = None
        self.bored: typing.List[AcksUniqueType2] = None
        self.unknown: typing.List[AcksUniqueType1] = None
        self.overload: typing.List[AcksUniqueType1] = None
        self.injured: typing.List[AcksUniqueType1] = None
        self.bigatt: typing.List[AcksUniqueType1] = None
        self.armorcrip: typing.List[AcksUniqueType1] = None
        self.wearcrip: typing.List[AcksUniqueType1] = None
        self.attindef: typing.List[AcksUniqueType1] = None
        self.waitfoll: typing.List[AcksUniqueType1] = None
        self.scenario: typing.List[AcksUniqueType1] = None
        self.stealemp: typing.List[AcksUniqueType1] = None
        self.shopyes: typing.List[AcksUniqueType1] = None
        self.shopno: typing.List[AcksUniqueType1] = None
        super().__init__()

    @property
    def _db_type(self):
        return AcksDatabase


class Crye(EiDatabaseTableRow):

    __slots__ = (
        "name",
        "agress",
        "suspect",
        "kill",
        "rest",
        "inagress",
    )

    def __init__(self):
        self.name: str = None
        self.agress: typing.List[AcksUniqueType1] = None
        self.suspect: typing.List[AcksUniqueType1] = None
        self.kill: typing.List[AcksUniqueType1] = None
        self.rest: typing.List[AcksUniqueType1] = None
        self.inagress: typing.List[AcksUniqueType1] = None
        super().__init__()

    @property
    def _db_type(self):
        return AcksDatabase


class Other(EiDatabaseTableRow):

    __slots__ = (
        "name",
        "talk",
        "rest",
    )

    def __init__(self):
        self.name: str = None
        self.talk: typing.List[AcksUniqueType1] = None
        self.rest: typing.List[AcksUniqueType1] = None
        super().__init__()

    @property
    def _db_type(self):
        return AcksDatabase


class Answers(EiDatabaseTable[Answer]):

    _row_type = Answer


class Cryes(EiDatabaseTable[Crye]):

    _row_type = Crye


class Others(EiDatabaseTable[Other]):

    _row_type = Other


class AcksDatabase(EiDatabase):

    __slots__ = (
        "answers",
        "cryes",
        "others",
    )
    _custom_types = {t.__name__: t for t in (AcksUniqueType1, AcksUniqueType2,)}

    def __init__(self):
        self.answers = Answers()
        self.cryes = Cryes()
        self.others = Others()
        super().__init__()
