# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ce_api.api_client import ApiClient


class DatasourcesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_datasource_api_v1_datasources_post(self, body, **kwargs):  # noqa: E501
        """Create Datasource  # noqa: E501

        Create new datasource for logged in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datasource_api_v1_datasources_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasourceCreate body: (required)
        :return: Datasource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_datasource_api_v1_datasources_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_datasource_api_v1_datasources_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_datasource_api_v1_datasources_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Datasource  # noqa: E501

        Create new datasource for logged in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datasource_api_v1_datasources_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasourceCreate body: (required)
        :return: Datasource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_datasource_api_v1_datasources_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_datasource_api_v1_datasources_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Datasource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_datasource_commit_api_v1_datasources_ds_id_commits_post(self, body, ds_id, **kwargs):  # noqa: E501
        """Create Datasource Commit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datasource_commit_api_v1_datasources_ds_id_commits_post(body, ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasourceCommitCreate body: (required)
        :param str ds_id: (required)
        :return: DatasourceCommit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_datasource_commit_api_v1_datasources_ds_id_commits_post_with_http_info(body, ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_datasource_commit_api_v1_datasources_ds_id_commits_post_with_http_info(body, ds_id, **kwargs)  # noqa: E501
            return data

    def create_datasource_commit_api_v1_datasources_ds_id_commits_post_with_http_info(self, body, ds_id, **kwargs):  # noqa: E501
        """Create Datasource Commit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_datasource_commit_api_v1_datasources_ds_id_commits_post_with_http_info(body, ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasourceCommitCreate body: (required)
        :param str ds_id: (required)
        :return: DatasourceCommit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'ds_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_datasource_commit_api_v1_datasources_ds_id_commits_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_datasource_commit_api_v1_datasources_ds_id_commits_post`")  # noqa: E501
        # verify the required parameter 'ds_id' is set
        if ('ds_id' not in params or
                params['ds_id'] is None):
            raise ValueError("Missing the required parameter `ds_id` when calling `create_datasource_commit_api_v1_datasources_ds_id_commits_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ds_id' in params:
            path_params['ds_id'] = params['ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/{ds_id}/commits', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatasourceCommit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_commits_api_v1_datasources_ds_id_commits_get(self, ds_id, **kwargs):  # noqa: E501
        """Get Commits  # noqa: E501

        Gets all the commits of the specified datasource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commits_api_v1_datasources_ds_id_commits_get(ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :return: list[DatasourceCommit]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_commits_api_v1_datasources_ds_id_commits_get_with_http_info(ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_commits_api_v1_datasources_ds_id_commits_get_with_http_info(ds_id, **kwargs)  # noqa: E501
            return data

    def get_commits_api_v1_datasources_ds_id_commits_get_with_http_info(self, ds_id, **kwargs):  # noqa: E501
        """Get Commits  # noqa: E501

        Gets all the commits of the specified datasource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commits_api_v1_datasources_ds_id_commits_get_with_http_info(ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :return: list[DatasourceCommit]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ds_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_commits_api_v1_datasources_ds_id_commits_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ds_id' is set
        if ('ds_id' not in params or
                params['ds_id'] is None):
            raise ValueError("Missing the required parameter `ds_id` when calling `get_commits_api_v1_datasources_ds_id_commits_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ds_id' in params:
            path_params['ds_id'] = params['ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/{ds_id}/commits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DatasourceCommit]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datasource_api_v1_datasources_ds_id_get(self, ds_id, **kwargs):  # noqa: E501
        """Get Datasource  # noqa: E501

        Gets the datasource specified by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_api_v1_datasources_ds_id_get(ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :return: Datasource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datasource_api_v1_datasources_ds_id_get_with_http_info(ds_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datasource_api_v1_datasources_ds_id_get_with_http_info(ds_id, **kwargs)  # noqa: E501
            return data

    def get_datasource_api_v1_datasources_ds_id_get_with_http_info(self, ds_id, **kwargs):  # noqa: E501
        """Get Datasource  # noqa: E501

        Gets the datasource specified by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_api_v1_datasources_ds_id_get_with_http_info(ds_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :return: Datasource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ds_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datasource_api_v1_datasources_ds_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ds_id' is set
        if ('ds_id' not in params or
                params['ds_id'] is None):
            raise ValueError("Missing the required parameter `ds_id` when calling `get_datasource_api_v1_datasources_ds_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ds_id' in params:
            path_params['ds_id'] = params['ds_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/{ds_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Datasource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datasource_commit_api_v1_datasources_ds_id_commits_commit_id_get(self, ds_id, commit_id, **kwargs):  # noqa: E501
        """Get Datasource Commit  # noqa: E501

        Gets commit of one datasource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_api_v1_datasources_ds_id_commits_commit_id_get(ds_id, commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :return: DatasourceCommit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datasource_commit_api_v1_datasources_ds_id_commits_commit_id_get_with_http_info(ds_id, commit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datasource_commit_api_v1_datasources_ds_id_commits_commit_id_get_with_http_info(ds_id, commit_id, **kwargs)  # noqa: E501
            return data

    def get_datasource_commit_api_v1_datasources_ds_id_commits_commit_id_get_with_http_info(self, ds_id, commit_id, **kwargs):  # noqa: E501
        """Get Datasource Commit  # noqa: E501

        Gets commit of one datasource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_api_v1_datasources_ds_id_commits_commit_id_get_with_http_info(ds_id, commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :return: DatasourceCommit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ds_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datasource_commit_api_v1_datasources_ds_id_commits_commit_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ds_id' is set
        if ('ds_id' not in params or
                params['ds_id'] is None):
            raise ValueError("Missing the required parameter `ds_id` when calling `get_datasource_commit_api_v1_datasources_ds_id_commits_commit_id_get`")  # noqa: E501
        # verify the required parameter 'commit_id' is set
        if ('commit_id' not in params or
                params['commit_id'] is None):
            raise ValueError("Missing the required parameter `commit_id` when calling `get_datasource_commit_api_v1_datasources_ds_id_commits_commit_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ds_id' in params:
            path_params['ds_id'] = params['ds_id']  # noqa: E501
        if 'commit_id' in params:
            path_params['commit_id'] = params['commit_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/{ds_id}/commits/{commit_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatasourceCommit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datasource_commit_data_sample_api_v1_datasources_ds_id_commits_commit_id_data_get(self, ds_id, commit_id, **kwargs):  # noqa: E501
        """Get Datasource Commit Data Sample  # noqa: E501

        Gets a random sample of data from datasource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_data_sample_api_v1_datasources_ds_id_commits_commit_id_data_get(ds_id, commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :param int sample_size:
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datasource_commit_data_sample_api_v1_datasources_ds_id_commits_commit_id_data_get_with_http_info(ds_id, commit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datasource_commit_data_sample_api_v1_datasources_ds_id_commits_commit_id_data_get_with_http_info(ds_id, commit_id, **kwargs)  # noqa: E501
            return data

    def get_datasource_commit_data_sample_api_v1_datasources_ds_id_commits_commit_id_data_get_with_http_info(self, ds_id, commit_id, **kwargs):  # noqa: E501
        """Get Datasource Commit Data Sample  # noqa: E501

        Gets a random sample of data from datasource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_data_sample_api_v1_datasources_ds_id_commits_commit_id_data_get_with_http_info(ds_id, commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :param int sample_size:
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ds_id', 'commit_id', 'sample_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datasource_commit_data_sample_api_v1_datasources_ds_id_commits_commit_id_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ds_id' is set
        if ('ds_id' not in params or
                params['ds_id'] is None):
            raise ValueError("Missing the required parameter `ds_id` when calling `get_datasource_commit_data_sample_api_v1_datasources_ds_id_commits_commit_id_data_get`")  # noqa: E501
        # verify the required parameter 'commit_id' is set
        if ('commit_id' not in params or
                params['commit_id'] is None):
            raise ValueError("Missing the required parameter `commit_id` when calling `get_datasource_commit_data_sample_api_v1_datasources_ds_id_commits_commit_id_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ds_id' in params:
            path_params['ds_id'] = params['ds_id']  # noqa: E501
        if 'commit_id' in params:
            path_params['commit_id'] = params['commit_id']  # noqa: E501

        query_params = []
        if 'sample_size' in params:
            query_params.append(('sample_size', params['sample_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/{ds_id}/commits/{commit_id}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datasource_commit_distinct_col_values_api_v1_datasources_ds_id_commits_commit_id_schema_column_name_get(self, ds_id, commit_id, column_name, **kwargs):  # noqa: E501
        """Get Datasource Commit Distinct Col Values  # noqa: E501

        Gets distinct values from column name. Maximum 1000 distinct values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_distinct_col_values_api_v1_datasources_ds_id_commits_commit_id_schema_column_name_get(ds_id, commit_id, column_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :param str column_name: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datasource_commit_distinct_col_values_api_v1_datasources_ds_id_commits_commit_id_schema_column_name_get_with_http_info(ds_id, commit_id, column_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datasource_commit_distinct_col_values_api_v1_datasources_ds_id_commits_commit_id_schema_column_name_get_with_http_info(ds_id, commit_id, column_name, **kwargs)  # noqa: E501
            return data

    def get_datasource_commit_distinct_col_values_api_v1_datasources_ds_id_commits_commit_id_schema_column_name_get_with_http_info(self, ds_id, commit_id, column_name, **kwargs):  # noqa: E501
        """Get Datasource Commit Distinct Col Values  # noqa: E501

        Gets distinct values from column name. Maximum 1000 distinct values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_distinct_col_values_api_v1_datasources_ds_id_commits_commit_id_schema_column_name_get_with_http_info(ds_id, commit_id, column_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :param str column_name: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ds_id', 'commit_id', 'column_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datasource_commit_distinct_col_values_api_v1_datasources_ds_id_commits_commit_id_schema_column_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ds_id' is set
        if ('ds_id' not in params or
                params['ds_id'] is None):
            raise ValueError("Missing the required parameter `ds_id` when calling `get_datasource_commit_distinct_col_values_api_v1_datasources_ds_id_commits_commit_id_schema_column_name_get`")  # noqa: E501
        # verify the required parameter 'commit_id' is set
        if ('commit_id' not in params or
                params['commit_id'] is None):
            raise ValueError("Missing the required parameter `commit_id` when calling `get_datasource_commit_distinct_col_values_api_v1_datasources_ds_id_commits_commit_id_schema_column_name_get`")  # noqa: E501
        # verify the required parameter 'column_name' is set
        if ('column_name' not in params or
                params['column_name'] is None):
            raise ValueError("Missing the required parameter `column_name` when calling `get_datasource_commit_distinct_col_values_api_v1_datasources_ds_id_commits_commit_id_schema_column_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ds_id' in params:
            path_params['ds_id'] = params['ds_id']  # noqa: E501
        if 'commit_id' in params:
            path_params['commit_id'] = params['commit_id']  # noqa: E501
        if 'column_name' in params:
            path_params['column_name'] = params['column_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/{ds_id}/commits/{commit_id}/schema/{column_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datasource_commit_metadata_api_v1_datasources_ds_id_commits_commit_id_metadata_get(self, ds_id, commit_id, **kwargs):  # noqa: E501
        """Get Datasource Commit Metadata  # noqa: E501

        Gets distinct values from column name. Maximum 1000 distinct values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_metadata_api_v1_datasources_ds_id_commits_commit_id_metadata_get(ds_id, commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datasource_commit_metadata_api_v1_datasources_ds_id_commits_commit_id_metadata_get_with_http_info(ds_id, commit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datasource_commit_metadata_api_v1_datasources_ds_id_commits_commit_id_metadata_get_with_http_info(ds_id, commit_id, **kwargs)  # noqa: E501
            return data

    def get_datasource_commit_metadata_api_v1_datasources_ds_id_commits_commit_id_metadata_get_with_http_info(self, ds_id, commit_id, **kwargs):  # noqa: E501
        """Get Datasource Commit Metadata  # noqa: E501

        Gets distinct values from column name. Maximum 1000 distinct values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_metadata_api_v1_datasources_ds_id_commits_commit_id_metadata_get_with_http_info(ds_id, commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ds_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datasource_commit_metadata_api_v1_datasources_ds_id_commits_commit_id_metadata_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ds_id' is set
        if ('ds_id' not in params or
                params['ds_id'] is None):
            raise ValueError("Missing the required parameter `ds_id` when calling `get_datasource_commit_metadata_api_v1_datasources_ds_id_commits_commit_id_metadata_get`")  # noqa: E501
        # verify the required parameter 'commit_id' is set
        if ('commit_id' not in params or
                params['commit_id'] is None):
            raise ValueError("Missing the required parameter `commit_id` when calling `get_datasource_commit_metadata_api_v1_datasources_ds_id_commits_commit_id_metadata_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ds_id' in params:
            path_params['ds_id'] = params['ds_id']  # noqa: E501
        if 'commit_id' in params:
            path_params['commit_id'] = params['commit_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/{ds_id}/commits/{commit_id}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datasource_commit_schema_api_v1_datasources_ds_id_commits_commit_id_schema_get(self, ds_id, commit_id, **kwargs):  # noqa: E501
        """Get Datasource Commit Schema  # noqa: E501

        Gets all the bigquery datasources of the logged in user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_schema_api_v1_datasources_ds_id_commits_commit_id_schema_get(ds_id, commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datasource_commit_schema_api_v1_datasources_ds_id_commits_commit_id_schema_get_with_http_info(ds_id, commit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datasource_commit_schema_api_v1_datasources_ds_id_commits_commit_id_schema_get_with_http_info(ds_id, commit_id, **kwargs)  # noqa: E501
            return data

    def get_datasource_commit_schema_api_v1_datasources_ds_id_commits_commit_id_schema_get_with_http_info(self, ds_id, commit_id, **kwargs):  # noqa: E501
        """Get Datasource Commit Schema  # noqa: E501

        Gets all the bigquery datasources of the logged in user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_schema_api_v1_datasources_ds_id_commits_commit_id_schema_get_with_http_info(ds_id, commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ds_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datasource_commit_schema_api_v1_datasources_ds_id_commits_commit_id_schema_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ds_id' is set
        if ('ds_id' not in params or
                params['ds_id'] is None):
            raise ValueError("Missing the required parameter `ds_id` when calling `get_datasource_commit_schema_api_v1_datasources_ds_id_commits_commit_id_schema_get`")  # noqa: E501
        # verify the required parameter 'commit_id' is set
        if ('commit_id' not in params or
                params['commit_id'] is None):
            raise ValueError("Missing the required parameter `commit_id` when calling `get_datasource_commit_schema_api_v1_datasources_ds_id_commits_commit_id_schema_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ds_id' in params:
            path_params['ds_id'] = params['ds_id']  # noqa: E501
        if 'commit_id' in params:
            path_params['commit_id'] = params['commit_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/{ds_id}/commits/{commit_id}/schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datasource_commit_status_api_v1_datasources_ds_id_commits_commit_id_status_get(self, ds_id, commit_id, **kwargs):  # noqa: E501
        """Get Datasource Commit Status  # noqa: E501

        Gets the status of the pipeline of this datasource commit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_status_api_v1_datasources_ds_id_commits_commit_id_status_get(ds_id, commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datasource_commit_status_api_v1_datasources_ds_id_commits_commit_id_status_get_with_http_info(ds_id, commit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datasource_commit_status_api_v1_datasources_ds_id_commits_commit_id_status_get_with_http_info(ds_id, commit_id, **kwargs)  # noqa: E501
            return data

    def get_datasource_commit_status_api_v1_datasources_ds_id_commits_commit_id_status_get_with_http_info(self, ds_id, commit_id, **kwargs):  # noqa: E501
        """Get Datasource Commit Status  # noqa: E501

        Gets the status of the pipeline of this datasource commit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasource_commit_status_api_v1_datasources_ds_id_commits_commit_id_status_get_with_http_info(ds_id, commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ds_id: (required)
        :param str commit_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ds_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datasource_commit_status_api_v1_datasources_ds_id_commits_commit_id_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ds_id' is set
        if ('ds_id' not in params or
                params['ds_id'] is None):
            raise ValueError("Missing the required parameter `ds_id` when calling `get_datasource_commit_status_api_v1_datasources_ds_id_commits_commit_id_status_get`")  # noqa: E501
        # verify the required parameter 'commit_id' is set
        if ('commit_id' not in params or
                params['commit_id'] is None):
            raise ValueError("Missing the required parameter `commit_id` when calling `get_datasource_commit_status_api_v1_datasources_ds_id_commits_commit_id_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ds_id' in params:
            path_params['ds_id'] = params['ds_id']  # noqa: E501
        if 'commit_id' in params:
            path_params['commit_id'] = params['commit_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/{ds_id}/commits/{commit_id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datasources_api_v1_datasources_get(self, **kwargs):  # noqa: E501
        """Get Datasources  # noqa: E501

        Gets all datasources of the logged in users organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasources_api_v1_datasources_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Datasource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datasources_api_v1_datasources_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_datasources_api_v1_datasources_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_datasources_api_v1_datasources_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Datasources  # noqa: E501

        Gets all datasources of the logged in users organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datasources_api_v1_datasources_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Datasource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datasources_api_v1_datasources_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Datasource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_commit_api_v1_datasources_commits_commit_id_get(self, commit_id, **kwargs):  # noqa: E501
        """Get Single Commit  # noqa: E501

        Gets commit of one datasource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_commit_api_v1_datasources_commits_commit_id_get(commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str commit_id: (required)
        :return: DatasourceCommit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_commit_api_v1_datasources_commits_commit_id_get_with_http_info(commit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_commit_api_v1_datasources_commits_commit_id_get_with_http_info(commit_id, **kwargs)  # noqa: E501
            return data

    def get_single_commit_api_v1_datasources_commits_commit_id_get_with_http_info(self, commit_id, **kwargs):  # noqa: E501
        """Get Single Commit  # noqa: E501

        Gets commit of one datasource  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_commit_api_v1_datasources_commits_commit_id_get_with_http_info(commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str commit_id: (required)
        :return: DatasourceCommit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_commit_api_v1_datasources_commits_commit_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'commit_id' is set
        if ('commit_id' not in params or
                params['commit_id'] is None):
            raise ValueError("Missing the required parameter `commit_id` when calling `get_single_commit_api_v1_datasources_commits_commit_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'commit_id' in params:
            path_params['commit_id'] = params['commit_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/datasources/commits/{commit_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DatasourceCommit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
