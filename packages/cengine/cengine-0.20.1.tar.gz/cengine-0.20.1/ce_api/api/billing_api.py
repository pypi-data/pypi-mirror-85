# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ce_api.api_client import ApiClient


class BillingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_stripe_session_api_v1_billing_stripe_session_get(self, **kwargs):  # noqa: E501
        """Create Stripe Session  # noqa: E501

        Return stripe url used to create stripe checkout session. Deprecated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stripe_session_api_v1_billing_stripe_session_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_stripe_session_api_v1_billing_stripe_session_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_stripe_session_api_v1_billing_stripe_session_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_stripe_session_api_v1_billing_stripe_session_get_with_http_info(self, **kwargs):  # noqa: E501
        """Create Stripe Session  # noqa: E501

        Return stripe url used to create stripe checkout session. Deprecated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stripe_session_api_v1_billing_stripe_session_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_stripe_session_api_v1_billing_stripe_session_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/stripe/session', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subscription_default_api_v1_billing_stripe_create_default_subscription_post(self, **kwargs):  # noqa: E501
        """Create Subscription Default  # noqa: E501

        Creates a default subscription for a users organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subscription_default_api_v1_billing_stripe_create_default_subscription_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_subscription_default_api_v1_billing_stripe_create_default_subscription_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_subscription_default_api_v1_billing_stripe_create_default_subscription_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_subscription_default_api_v1_billing_stripe_create_default_subscription_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create Subscription Default  # noqa: E501

        Creates a default subscription for a users organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subscription_default_api_v1_billing_stripe_create_default_subscription_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscription_default_api_v1_billing_stripe_create_default_subscription_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/stripe/create-default-subscription', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization_billing_api_v1_billing_organization_get(self, **kwargs):  # noqa: E501
        """Get Organization Billing  # noqa: E501

        Returns the bill for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_billing_api_v1_billing_organization_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Billing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organization_billing_api_v1_billing_organization_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_billing_api_v1_billing_organization_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_organization_billing_api_v1_billing_organization_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Organization Billing  # noqa: E501

        Returns the bill for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_billing_api_v1_billing_organization_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Billing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_billing_api_v1_billing_organization_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/organization', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Billing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_organization_invoices_api_v1_billing_organization_invoices_get(self, **kwargs):  # noqa: E501
        """Get Organization Invoices  # noqa: E501

        Returns the invoices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_invoices_api_v1_billing_organization_invoices_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_organization_invoices_api_v1_billing_organization_invoices_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_organization_invoices_api_v1_billing_organization_invoices_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_organization_invoices_api_v1_billing_organization_invoices_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Organization Invoices  # noqa: E501

        Returns the invoices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_organization_invoices_api_v1_billing_organization_invoices_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_invoices_api_v1_billing_organization_invoices_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/organization/invoices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_method_api_v1_billing_stripe_get_payment_method_get(self, **kwargs):  # noqa: E501
        """Get Payment Method  # noqa: E501

        Gets current payment method of user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_method_api_v1_billing_stripe_get_payment_method_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_payment_method_api_v1_billing_stripe_get_payment_method_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_method_api_v1_billing_stripe_get_payment_method_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_payment_method_api_v1_billing_stripe_get_payment_method_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Payment Method  # noqa: E501

        Gets current payment method of user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payment_method_api_v1_billing_stripe_get_payment_method_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_method_api_v1_billing_stripe_get_payment_method_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/stripe/get-payment-method', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_run_billing_api_v1_billing_pipeline_id_runs_pipeline_run_id_get(self, pipeline_id, pipeline_run_id, **kwargs):  # noqa: E501
        """Get Pipeline Run Billing  # noqa: E501

        Calculates bill for pipeline run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_billing_api_v1_billing_pipeline_id_runs_pipeline_run_id_get(pipeline_id, pipeline_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :param str pipeline_run_id: (required)
        :return: Billing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_run_billing_api_v1_billing_pipeline_id_runs_pipeline_run_id_get_with_http_info(pipeline_id, pipeline_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_run_billing_api_v1_billing_pipeline_id_runs_pipeline_run_id_get_with_http_info(pipeline_id, pipeline_run_id, **kwargs)  # noqa: E501
            return data

    def get_pipeline_run_billing_api_v1_billing_pipeline_id_runs_pipeline_run_id_get_with_http_info(self, pipeline_id, pipeline_run_id, **kwargs):  # noqa: E501
        """Get Pipeline Run Billing  # noqa: E501

        Calculates bill for pipeline run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_run_billing_api_v1_billing_pipeline_id_runs_pipeline_run_id_get_with_http_info(pipeline_id, pipeline_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pipeline_id: (required)
        :param str pipeline_run_id: (required)
        :return: Billing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pipeline_id', 'pipeline_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_run_billing_api_v1_billing_pipeline_id_runs_pipeline_run_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `get_pipeline_run_billing_api_v1_billing_pipeline_id_runs_pipeline_run_id_get`")  # noqa: E501
        # verify the required parameter 'pipeline_run_id' is set
        if ('pipeline_run_id' not in params or
                params['pipeline_run_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_run_id` when calling `get_pipeline_run_billing_api_v1_billing_pipeline_id_runs_pipeline_run_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in params:
            path_params['pipeline_id'] = params['pipeline_id']  # noqa: E501
        if 'pipeline_run_id' in params:
            path_params['pipeline_run_id'] = params['pipeline_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/{pipeline_id}/runs/{pipeline_run_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Billing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_stripe_config_api_v1_billing_stripe_config_get(self, **kwargs):  # noqa: E501
        """Get Stripe Config  # noqa: E501

        Returns stripe publishable key. Only for admins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stripe_config_api_v1_billing_stripe_config_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_stripe_config_api_v1_billing_stripe_config_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_stripe_config_api_v1_billing_stripe_config_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_stripe_config_api_v1_billing_stripe_config_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Stripe Config  # noqa: E501

        Returns stripe publishable key. Only for admins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_stripe_config_api_v1_billing_stripe_config_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_stripe_config_api_v1_billing_stripe_config_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/stripe/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_billing_api_v1_billing_users_user_id_get(self, user_id, **kwargs):  # noqa: E501
        """Get User Billing  # noqa: E501

        Returns the bill for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_billing_api_v1_billing_users_user_id_get(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :return: Billing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_billing_api_v1_billing_users_user_id_get_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_billing_api_v1_billing_users_user_id_get_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def get_user_billing_api_v1_billing_users_user_id_get_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get User Billing  # noqa: E501

        Returns the bill for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_billing_api_v1_billing_users_user_id_get_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :return: Billing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_billing_api_v1_billing_users_user_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_billing_api_v1_billing_users_user_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/users/{user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Billing',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def preview_upcoming_invoice_api_v1_billing_stripe_preview_upcoming_invoice_get(self, updated_price_id, **kwargs):  # noqa: E501
        """Preview Upcoming Invoice  # noqa: E501

        When your customer changes their subscription, there’s often an adjustment to the amount they owe known as a proration. You can use the upcoming invoice endpoint to display the adjusted amount to your customers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_upcoming_invoice_api_v1_billing_stripe_preview_upcoming_invoice_get(updated_price_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str updated_price_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.preview_upcoming_invoice_api_v1_billing_stripe_preview_upcoming_invoice_get_with_http_info(updated_price_id, **kwargs)  # noqa: E501
        else:
            (data) = self.preview_upcoming_invoice_api_v1_billing_stripe_preview_upcoming_invoice_get_with_http_info(updated_price_id, **kwargs)  # noqa: E501
            return data

    def preview_upcoming_invoice_api_v1_billing_stripe_preview_upcoming_invoice_get_with_http_info(self, updated_price_id, **kwargs):  # noqa: E501
        """Preview Upcoming Invoice  # noqa: E501

        When your customer changes their subscription, there’s often an adjustment to the amount they owe known as a proration. You can use the upcoming invoice endpoint to display the adjusted amount to your customers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_upcoming_invoice_api_v1_billing_stripe_preview_upcoming_invoice_get_with_http_info(updated_price_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str updated_price_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['updated_price_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_upcoming_invoice_api_v1_billing_stripe_preview_upcoming_invoice_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'updated_price_id' is set
        if ('updated_price_id' not in params or
                params['updated_price_id'] is None):
            raise ValueError("Missing the required parameter `updated_price_id` when calling `preview_upcoming_invoice_api_v1_billing_stripe_preview_upcoming_invoice_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'updated_price_id' in params:
            query_params.append(('updated_price_id', params['updated_price_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/stripe/preview-upcoming-invoice', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def report_stripe_usage_api_v1_billing_stripe_report_usage_post(self, org_id, **kwargs):  # noqa: E501
        """Report Stripe Usage  # noqa: E501

        Endpoint to report usage of an org. This endpoint should be called for each org every 24 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_stripe_usage_api_v1_billing_stripe_report_usage_post(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.report_stripe_usage_api_v1_billing_stripe_report_usage_post_with_http_info(org_id, **kwargs)  # noqa: E501
        else:
            (data) = self.report_stripe_usage_api_v1_billing_stripe_report_usage_post_with_http_info(org_id, **kwargs)  # noqa: E501
            return data

    def report_stripe_usage_api_v1_billing_stripe_report_usage_post_with_http_info(self, org_id, **kwargs):  # noqa: E501
        """Report Stripe Usage  # noqa: E501

        Endpoint to report usage of an org. This endpoint should be called for each org every 24 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.report_stripe_usage_api_v1_billing_stripe_report_usage_post_with_http_info(org_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method report_stripe_usage_api_v1_billing_stripe_report_usage_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_id' is set
        if ('org_id' not in params or
                params['org_id'] is None):
            raise ValueError("Missing the required parameter `org_id` when calling `report_stripe_usage_api_v1_billing_stripe_report_usage_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'org_id' in params:
            query_params.append(('org_id', params['org_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/stripe/report-usage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retry_invoice_api_v1_billing_stripe_retry_invoice_post(self, invoice_id, payment_method_id, **kwargs):  # noqa: E501
        """Retry Invoice  # noqa: E501

        Customers are charged at the end of the billing period, so it’s possible for payments to fail after the subscription is created because of changes to the payment method. For example, a customer might close their account because they lost their card, or maybe the card has insufficient funds to cover the payment.  When payments fail, an invoice.payment_failed event is sent. If the status of the payment_intent is requires_payment_method, you need to bring the customer back to your site and collect new payment information. You can build a form similar to the one you built earlier in this guide to collect payment information. When you have the payment method ID, you can update customer with the new payment method, and assign it as the new default for the subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_invoice_api_v1_billing_stripe_retry_invoice_post(invoice_id, payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param str payment_method_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retry_invoice_api_v1_billing_stripe_retry_invoice_post_with_http_info(invoice_id, payment_method_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retry_invoice_api_v1_billing_stripe_retry_invoice_post_with_http_info(invoice_id, payment_method_id, **kwargs)  # noqa: E501
            return data

    def retry_invoice_api_v1_billing_stripe_retry_invoice_post_with_http_info(self, invoice_id, payment_method_id, **kwargs):  # noqa: E501
        """Retry Invoice  # noqa: E501

        Customers are charged at the end of the billing period, so it’s possible for payments to fail after the subscription is created because of changes to the payment method. For example, a customer might close their account because they lost their card, or maybe the card has insufficient funds to cover the payment.  When payments fail, an invoice.payment_failed event is sent. If the status of the payment_intent is requires_payment_method, you need to bring the customer back to your site and collect new payment information. You can build a form similar to the one you built earlier in this guide to collect payment information. When you have the payment method ID, you can update customer with the new payment method, and assign it as the new default for the subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retry_invoice_api_v1_billing_stripe_retry_invoice_post_with_http_info(invoice_id, payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str invoice_id: (required)
        :param str payment_method_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'payment_method_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retry_invoice_api_v1_billing_stripe_retry_invoice_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `retry_invoice_api_v1_billing_stripe_retry_invoice_post`")  # noqa: E501
        # verify the required parameter 'payment_method_id' is set
        if ('payment_method_id' not in params or
                params['payment_method_id'] is None):
            raise ValueError("Missing the required parameter `payment_method_id` when calling `retry_invoice_api_v1_billing_stripe_retry_invoice_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'invoice_id' in params:
            query_params.append(('invoice_id', params['invoice_id']))  # noqa: E501
        if 'payment_method_id' in params:
            query_params.append(('payment_method_id', params['payment_method_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/stripe/retry-invoice', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stripe_webhook_received_api_v1_billing_stripe_webhook_post(self, **kwargs):  # noqa: E501
        """Stripe Webhook Received  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stripe_webhook_received_api_v1_billing_stripe_webhook_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stripe_webhook_received_api_v1_billing_stripe_webhook_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.stripe_webhook_received_api_v1_billing_stripe_webhook_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def stripe_webhook_received_api_v1_billing_stripe_webhook_post_with_http_info(self, **kwargs):  # noqa: E501
        """Stripe Webhook Received  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stripe_webhook_received_api_v1_billing_stripe_webhook_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stripe_webhook_received_api_v1_billing_stripe_webhook_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/stripe/webhook', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_payment_method_api_v1_billing_stripe_update_payment_method_put(self, payment_method_id, **kwargs):  # noqa: E501
        """Update Payment Method  # noqa: E501

        Update payment method of user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payment_method_api_v1_billing_stripe_update_payment_method_put(payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_method_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_payment_method_api_v1_billing_stripe_update_payment_method_put_with_http_info(payment_method_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_payment_method_api_v1_billing_stripe_update_payment_method_put_with_http_info(payment_method_id, **kwargs)  # noqa: E501
            return data

    def update_payment_method_api_v1_billing_stripe_update_payment_method_put_with_http_info(self, payment_method_id, **kwargs):  # noqa: E501
        """Update Payment Method  # noqa: E501

        Update payment method of user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_payment_method_api_v1_billing_stripe_update_payment_method_put_with_http_info(payment_method_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_method_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_method_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_payment_method_api_v1_billing_stripe_update_payment_method_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_method_id' is set
        if ('payment_method_id' not in params or
                params['payment_method_id'] is None):
            raise ValueError("Missing the required parameter `payment_method_id` when calling `update_payment_method_api_v1_billing_stripe_update_payment_method_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'payment_method_id' in params:
            query_params.append(('payment_method_id', params['payment_method_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/stripe/update-payment-method', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_stripe_subscription_api_v1_billing_stripe_update_subscription_put(self, updated_price_id, **kwargs):  # noqa: E501
        """Update Stripe Subscription  # noqa: E501

        Update plan to new subscription. Can change from Explorer to Unlimited, or vice versa.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stripe_subscription_api_v1_billing_stripe_update_subscription_put(updated_price_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str updated_price_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_stripe_subscription_api_v1_billing_stripe_update_subscription_put_with_http_info(updated_price_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_stripe_subscription_api_v1_billing_stripe_update_subscription_put_with_http_info(updated_price_id, **kwargs)  # noqa: E501
            return data

    def update_stripe_subscription_api_v1_billing_stripe_update_subscription_put_with_http_info(self, updated_price_id, **kwargs):  # noqa: E501
        """Update Stripe Subscription  # noqa: E501

        Update plan to new subscription. Can change from Explorer to Unlimited, or vice versa.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stripe_subscription_api_v1_billing_stripe_update_subscription_put_with_http_info(updated_price_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str updated_price_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['updated_price_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_stripe_subscription_api_v1_billing_stripe_update_subscription_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'updated_price_id' is set
        if ('updated_price_id' not in params or
                params['updated_price_id'] is None):
            raise ValueError("Missing the required parameter `updated_price_id` when calling `update_stripe_subscription_api_v1_billing_stripe_update_subscription_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'updated_price_id' in params:
            query_params.append(('updated_price_id', params['updated_price_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/billing/stripe/update-subscription', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
