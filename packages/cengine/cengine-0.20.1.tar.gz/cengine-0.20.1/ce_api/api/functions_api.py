# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ce_api.api_client import ApiClient


class FunctionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_function_api_v1_functions_post(self, body, **kwargs):  # noqa: E501
        """Create Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_function_api_v1_functions_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FunctionCreate body: (required)
        :return: Function
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_function_api_v1_functions_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_function_api_v1_functions_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_function_api_v1_functions_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Function  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_function_api_v1_functions_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FunctionCreate body: (required)
        :return: Function
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_function_api_v1_functions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_function_api_v1_functions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/functions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Function',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_function_version_api_v1_functions_function_id_versions_post(self, body, function_id, **kwargs):  # noqa: E501
        """Create Function Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_function_version_api_v1_functions_function_id_versions_post(body, function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FunctionVersionCreate body: (required)
        :param str function_id: (required)
        :return: FunctionVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_function_version_api_v1_functions_function_id_versions_post_with_http_info(body, function_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_function_version_api_v1_functions_function_id_versions_post_with_http_info(body, function_id, **kwargs)  # noqa: E501
            return data

    def create_function_version_api_v1_functions_function_id_versions_post_with_http_info(self, body, function_id, **kwargs):  # noqa: E501
        """Create Function Version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_function_version_api_v1_functions_function_id_versions_post_with_http_info(body, function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FunctionVersionCreate body: (required)
        :param str function_id: (required)
        :return: FunctionVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'function_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_function_version_api_v1_functions_function_id_versions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_function_version_api_v1_functions_function_id_versions_post`")  # noqa: E501
        # verify the required parameter 'function_id' is set
        if ('function_id' not in params or
                params['function_id'] is None):
            raise ValueError("Missing the required parameter `function_id` when calling `create_function_version_api_v1_functions_function_id_versions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'function_id' in params:
            path_params['function_id'] = params['function_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/functions/{function_id}/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FunctionVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_function_version_api_v1_functions_function_id_versions_version_id_get(self, function_id, version_id, **kwargs):  # noqa: E501
        """Get Function Version  # noqa: E501

        Gets all a specific function-version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_version_api_v1_functions_function_id_versions_version_id_get(function_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: (required)
        :param str version_id: (required)
        :return: FunctionVersionInDB
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_function_version_api_v1_functions_function_id_versions_version_id_get_with_http_info(function_id, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_function_version_api_v1_functions_function_id_versions_version_id_get_with_http_info(function_id, version_id, **kwargs)  # noqa: E501
            return data

    def get_function_version_api_v1_functions_function_id_versions_version_id_get_with_http_info(self, function_id, version_id, **kwargs):  # noqa: E501
        """Get Function Version  # noqa: E501

        Gets all a specific function-version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_version_api_v1_functions_function_id_versions_version_id_get_with_http_info(function_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: (required)
        :param str version_id: (required)
        :return: FunctionVersionInDB
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['function_id', 'version_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_function_version_api_v1_functions_function_id_versions_version_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'function_id' is set
        if ('function_id' not in params or
                params['function_id'] is None):
            raise ValueError("Missing the required parameter `function_id` when calling `get_function_version_api_v1_functions_function_id_versions_version_id_get`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if ('version_id' not in params or
                params['version_id'] is None):
            raise ValueError("Missing the required parameter `version_id` when calling `get_function_version_api_v1_functions_function_id_versions_version_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'function_id' in params:
            path_params['function_id'] = params['function_id']  # noqa: E501
        if 'version_id' in params:
            path_params['version_id'] = params['version_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/functions/{function_id}/versions/{version_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FunctionVersionInDB',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_function_versions_api_v1_functions_function_id_versions_get(self, function_id, **kwargs):  # noqa: E501
        """Get Function Versions  # noqa: E501

        Gets all the functions of the logged in users organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_versions_api_v1_functions_function_id_versions_get(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: (required)
        :return: list[FunctionVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_function_versions_api_v1_functions_function_id_versions_get_with_http_info(function_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_function_versions_api_v1_functions_function_id_versions_get_with_http_info(function_id, **kwargs)  # noqa: E501
            return data

    def get_function_versions_api_v1_functions_function_id_versions_get_with_http_info(self, function_id, **kwargs):  # noqa: E501
        """Get Function Versions  # noqa: E501

        Gets all the functions of the logged in users organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_function_versions_api_v1_functions_function_id_versions_get_with_http_info(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: (required)
        :return: list[FunctionVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['function_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_function_versions_api_v1_functions_function_id_versions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'function_id' is set
        if ('function_id' not in params or
                params['function_id'] is None):
            raise ValueError("Missing the required parameter `function_id` when calling `get_function_versions_api_v1_functions_function_id_versions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'function_id' in params:
            path_params['function_id'] = params['function_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/functions/{function_id}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FunctionVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_functions_api_v1_functions_get(self, **kwargs):  # noqa: E501
        """Get Functions  # noqa: E501

        Gets all the functions of the logged in users organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions_api_v1_functions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Function]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_functions_api_v1_functions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_functions_api_v1_functions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_functions_api_v1_functions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Functions  # noqa: E501

        Gets all the functions of the logged in users organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_functions_api_v1_functions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Function]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_functions_api_v1_functions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/functions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Function]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_function_api_v1_functions_function_id_get(self, function_id, **kwargs):  # noqa: E501
        """Get Single Function  # noqa: E501

        Gets a single function of the logged in users organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_function_api_v1_functions_function_id_get(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: (required)
        :return: Function
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_function_api_v1_functions_function_id_get_with_http_info(function_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_function_api_v1_functions_function_id_get_with_http_info(function_id, **kwargs)  # noqa: E501
            return data

    def get_single_function_api_v1_functions_function_id_get_with_http_info(self, function_id, **kwargs):  # noqa: E501
        """Get Single Function  # noqa: E501

        Gets a single function of the logged in users organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_function_api_v1_functions_function_id_get_with_http_info(function_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str function_id: (required)
        :return: Function
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['function_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_function_api_v1_functions_function_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'function_id' is set
        if ('function_id' not in params or
                params['function_id'] is None):
            raise ValueError("Missing the required parameter `function_id` when calling `get_single_function_api_v1_functions_function_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'function_id' in params:
            path_params['function_id'] = params['function_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/functions/{function_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Function',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
