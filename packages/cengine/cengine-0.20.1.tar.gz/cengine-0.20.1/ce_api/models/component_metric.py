# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ComponentMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'last_attempt': 'datetime',
        'total_attempts': 'int',
        'cost': 'float',
        'producer_pipeline_id': 'int',
        'component_type': 'str',
        'run_metric_ids': 'list[int]',
        'metric_informations': 'list[MetricInfo]',
        'id': 'int'
    }

    attribute_map = {
        'status': 'status',
        'last_attempt': 'last_attempt',
        'total_attempts': 'total_attempts',
        'cost': 'cost',
        'producer_pipeline_id': 'producer_pipeline_id',
        'component_type': 'component_type',
        'run_metric_ids': 'run_metric_ids',
        'metric_informations': 'metric_informations',
        'id': 'id'
    }

    def __init__(self, status=None, last_attempt=None, total_attempts=None, cost=0, producer_pipeline_id=None, component_type=None, run_metric_ids=None, metric_informations=None, id=None):  # noqa: E501
        """ComponentMetric - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._last_attempt = None
        self._total_attempts = None
        self._cost = None
        self._producer_pipeline_id = None
        self._component_type = None
        self._run_metric_ids = None
        self._metric_informations = None
        self._id = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if last_attempt is not None:
            self.last_attempt = last_attempt
        if total_attempts is not None:
            self.total_attempts = total_attempts
        if cost is not None:
            self.cost = cost
        if producer_pipeline_id is not None:
            self.producer_pipeline_id = producer_pipeline_id
        if component_type is not None:
            self.component_type = component_type
        if run_metric_ids is not None:
            self.run_metric_ids = run_metric_ids
        if metric_informations is not None:
            self.metric_informations = metric_informations
        if id is not None:
            self.id = id

    @property
    def status(self):
        """Gets the status of this ComponentMetric.  # noqa: E501


        :return: The status of this ComponentMetric.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ComponentMetric.


        :param status: The status of this ComponentMetric.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def last_attempt(self):
        """Gets the last_attempt of this ComponentMetric.  # noqa: E501


        :return: The last_attempt of this ComponentMetric.  # noqa: E501
        :rtype: datetime
        """
        return self._last_attempt

    @last_attempt.setter
    def last_attempt(self, last_attempt):
        """Sets the last_attempt of this ComponentMetric.


        :param last_attempt: The last_attempt of this ComponentMetric.  # noqa: E501
        :type: datetime
        """

        self._last_attempt = last_attempt

    @property
    def total_attempts(self):
        """Gets the total_attempts of this ComponentMetric.  # noqa: E501


        :return: The total_attempts of this ComponentMetric.  # noqa: E501
        :rtype: int
        """
        return self._total_attempts

    @total_attempts.setter
    def total_attempts(self, total_attempts):
        """Sets the total_attempts of this ComponentMetric.


        :param total_attempts: The total_attempts of this ComponentMetric.  # noqa: E501
        :type: int
        """

        self._total_attempts = total_attempts

    @property
    def cost(self):
        """Gets the cost of this ComponentMetric.  # noqa: E501


        :return: The cost of this ComponentMetric.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ComponentMetric.


        :param cost: The cost of this ComponentMetric.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def producer_pipeline_id(self):
        """Gets the producer_pipeline_id of this ComponentMetric.  # noqa: E501


        :return: The producer_pipeline_id of this ComponentMetric.  # noqa: E501
        :rtype: int
        """
        return self._producer_pipeline_id

    @producer_pipeline_id.setter
    def producer_pipeline_id(self, producer_pipeline_id):
        """Sets the producer_pipeline_id of this ComponentMetric.


        :param producer_pipeline_id: The producer_pipeline_id of this ComponentMetric.  # noqa: E501
        :type: int
        """

        self._producer_pipeline_id = producer_pipeline_id

    @property
    def component_type(self):
        """Gets the component_type of this ComponentMetric.  # noqa: E501


        :return: The component_type of this ComponentMetric.  # noqa: E501
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this ComponentMetric.


        :param component_type: The component_type of this ComponentMetric.  # noqa: E501
        :type: str
        """

        self._component_type = component_type

    @property
    def run_metric_ids(self):
        """Gets the run_metric_ids of this ComponentMetric.  # noqa: E501


        :return: The run_metric_ids of this ComponentMetric.  # noqa: E501
        :rtype: list[int]
        """
        return self._run_metric_ids

    @run_metric_ids.setter
    def run_metric_ids(self, run_metric_ids):
        """Sets the run_metric_ids of this ComponentMetric.


        :param run_metric_ids: The run_metric_ids of this ComponentMetric.  # noqa: E501
        :type: list[int]
        """

        self._run_metric_ids = run_metric_ids

    @property
    def metric_informations(self):
        """Gets the metric_informations of this ComponentMetric.  # noqa: E501


        :return: The metric_informations of this ComponentMetric.  # noqa: E501
        :rtype: list[MetricInfo]
        """
        return self._metric_informations

    @metric_informations.setter
    def metric_informations(self, metric_informations):
        """Sets the metric_informations of this ComponentMetric.


        :param metric_informations: The metric_informations of this ComponentMetric.  # noqa: E501
        :type: list[MetricInfo]
        """

        self._metric_informations = metric_informations

    @property
    def id(self):
        """Gets the id of this ComponentMetric.  # noqa: E501


        :return: The id of this ComponentMetric.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComponentMetric.


        :param id: The id of this ComponentMetric.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComponentMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComponentMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
