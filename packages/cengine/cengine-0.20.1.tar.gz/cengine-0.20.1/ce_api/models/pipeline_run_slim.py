# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PipelineRunSlim(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'status': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'workers': 'int',
        'cpus_per_worker': 'int',
        'datasource_commit_id': 'str',
        'pipeline_run_type': 'str',
        'pipeline_components': 'list[PipelineComponent]',
        'processing_backend_id': 'str',
        'orchestration_backend_id': 'str',
        'training_backend_id': 'str',
        'serving_backend_id': 'str',
        'training_args': 'object',
        'serving_args': 'object'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'status': 'status',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'workers': 'workers',
        'cpus_per_worker': 'cpus_per_worker',
        'datasource_commit_id': 'datasource_commit_id',
        'pipeline_run_type': 'pipeline_run_type',
        'pipeline_components': 'pipeline_components',
        'processing_backend_id': 'processing_backend_id',
        'orchestration_backend_id': 'orchestration_backend_id',
        'training_backend_id': 'training_backend_id',
        'serving_backend_id': 'serving_backend_id',
        'training_args': 'training_args',
        'serving_args': 'serving_args'
    }

    def __init__(self, id=None, user_id=None, status=None, start_time=None, end_time=None, workers=None, cpus_per_worker=None, datasource_commit_id=None, pipeline_run_type=None, pipeline_components=None, processing_backend_id=None, orchestration_backend_id=None, training_backend_id=None, serving_backend_id=None, training_args=None, serving_args=None):  # noqa: E501
        """PipelineRunSlim - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._status = None
        self._start_time = None
        self._end_time = None
        self._workers = None
        self._cpus_per_worker = None
        self._datasource_commit_id = None
        self._pipeline_run_type = None
        self._pipeline_components = None
        self._processing_backend_id = None
        self._orchestration_backend_id = None
        self._training_backend_id = None
        self._serving_backend_id = None
        self._training_args = None
        self._serving_args = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if status is not None:
            self.status = status
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if workers is not None:
            self.workers = workers
        if cpus_per_worker is not None:
            self.cpus_per_worker = cpus_per_worker
        if datasource_commit_id is not None:
            self.datasource_commit_id = datasource_commit_id
        if pipeline_run_type is not None:
            self.pipeline_run_type = pipeline_run_type
        if pipeline_components is not None:
            self.pipeline_components = pipeline_components
        if processing_backend_id is not None:
            self.processing_backend_id = processing_backend_id
        if orchestration_backend_id is not None:
            self.orchestration_backend_id = orchestration_backend_id
        if training_backend_id is not None:
            self.training_backend_id = training_backend_id
        if serving_backend_id is not None:
            self.serving_backend_id = serving_backend_id
        if training_args is not None:
            self.training_args = training_args
        if serving_args is not None:
            self.serving_args = serving_args

    @property
    def id(self):
        """Gets the id of this PipelineRunSlim.  # noqa: E501


        :return: The id of this PipelineRunSlim.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineRunSlim.


        :param id: The id of this PipelineRunSlim.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this PipelineRunSlim.  # noqa: E501


        :return: The user_id of this PipelineRunSlim.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PipelineRunSlim.


        :param user_id: The user_id of this PipelineRunSlim.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def status(self):
        """Gets the status of this PipelineRunSlim.  # noqa: E501


        :return: The status of this PipelineRunSlim.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PipelineRunSlim.


        :param status: The status of this PipelineRunSlim.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def start_time(self):
        """Gets the start_time of this PipelineRunSlim.  # noqa: E501


        :return: The start_time of this PipelineRunSlim.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PipelineRunSlim.


        :param start_time: The start_time of this PipelineRunSlim.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this PipelineRunSlim.  # noqa: E501


        :return: The end_time of this PipelineRunSlim.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PipelineRunSlim.


        :param end_time: The end_time of this PipelineRunSlim.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def workers(self):
        """Gets the workers of this PipelineRunSlim.  # noqa: E501


        :return: The workers of this PipelineRunSlim.  # noqa: E501
        :rtype: int
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """Sets the workers of this PipelineRunSlim.


        :param workers: The workers of this PipelineRunSlim.  # noqa: E501
        :type: int
        """

        self._workers = workers

    @property
    def cpus_per_worker(self):
        """Gets the cpus_per_worker of this PipelineRunSlim.  # noqa: E501


        :return: The cpus_per_worker of this PipelineRunSlim.  # noqa: E501
        :rtype: int
        """
        return self._cpus_per_worker

    @cpus_per_worker.setter
    def cpus_per_worker(self, cpus_per_worker):
        """Sets the cpus_per_worker of this PipelineRunSlim.


        :param cpus_per_worker: The cpus_per_worker of this PipelineRunSlim.  # noqa: E501
        :type: int
        """

        self._cpus_per_worker = cpus_per_worker

    @property
    def datasource_commit_id(self):
        """Gets the datasource_commit_id of this PipelineRunSlim.  # noqa: E501


        :return: The datasource_commit_id of this PipelineRunSlim.  # noqa: E501
        :rtype: str
        """
        return self._datasource_commit_id

    @datasource_commit_id.setter
    def datasource_commit_id(self, datasource_commit_id):
        """Sets the datasource_commit_id of this PipelineRunSlim.


        :param datasource_commit_id: The datasource_commit_id of this PipelineRunSlim.  # noqa: E501
        :type: str
        """

        self._datasource_commit_id = datasource_commit_id

    @property
    def pipeline_run_type(self):
        """Gets the pipeline_run_type of this PipelineRunSlim.  # noqa: E501


        :return: The pipeline_run_type of this PipelineRunSlim.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_run_type

    @pipeline_run_type.setter
    def pipeline_run_type(self, pipeline_run_type):
        """Sets the pipeline_run_type of this PipelineRunSlim.


        :param pipeline_run_type: The pipeline_run_type of this PipelineRunSlim.  # noqa: E501
        :type: str
        """

        self._pipeline_run_type = pipeline_run_type

    @property
    def pipeline_components(self):
        """Gets the pipeline_components of this PipelineRunSlim.  # noqa: E501


        :return: The pipeline_components of this PipelineRunSlim.  # noqa: E501
        :rtype: list[PipelineComponent]
        """
        return self._pipeline_components

    @pipeline_components.setter
    def pipeline_components(self, pipeline_components):
        """Sets the pipeline_components of this PipelineRunSlim.


        :param pipeline_components: The pipeline_components of this PipelineRunSlim.  # noqa: E501
        :type: list[PipelineComponent]
        """

        self._pipeline_components = pipeline_components

    @property
    def processing_backend_id(self):
        """Gets the processing_backend_id of this PipelineRunSlim.  # noqa: E501


        :return: The processing_backend_id of this PipelineRunSlim.  # noqa: E501
        :rtype: str
        """
        return self._processing_backend_id

    @processing_backend_id.setter
    def processing_backend_id(self, processing_backend_id):
        """Sets the processing_backend_id of this PipelineRunSlim.


        :param processing_backend_id: The processing_backend_id of this PipelineRunSlim.  # noqa: E501
        :type: str
        """

        self._processing_backend_id = processing_backend_id

    @property
    def orchestration_backend_id(self):
        """Gets the orchestration_backend_id of this PipelineRunSlim.  # noqa: E501


        :return: The orchestration_backend_id of this PipelineRunSlim.  # noqa: E501
        :rtype: str
        """
        return self._orchestration_backend_id

    @orchestration_backend_id.setter
    def orchestration_backend_id(self, orchestration_backend_id):
        """Sets the orchestration_backend_id of this PipelineRunSlim.


        :param orchestration_backend_id: The orchestration_backend_id of this PipelineRunSlim.  # noqa: E501
        :type: str
        """

        self._orchestration_backend_id = orchestration_backend_id

    @property
    def training_backend_id(self):
        """Gets the training_backend_id of this PipelineRunSlim.  # noqa: E501


        :return: The training_backend_id of this PipelineRunSlim.  # noqa: E501
        :rtype: str
        """
        return self._training_backend_id

    @training_backend_id.setter
    def training_backend_id(self, training_backend_id):
        """Sets the training_backend_id of this PipelineRunSlim.


        :param training_backend_id: The training_backend_id of this PipelineRunSlim.  # noqa: E501
        :type: str
        """

        self._training_backend_id = training_backend_id

    @property
    def serving_backend_id(self):
        """Gets the serving_backend_id of this PipelineRunSlim.  # noqa: E501


        :return: The serving_backend_id of this PipelineRunSlim.  # noqa: E501
        :rtype: str
        """
        return self._serving_backend_id

    @serving_backend_id.setter
    def serving_backend_id(self, serving_backend_id):
        """Sets the serving_backend_id of this PipelineRunSlim.


        :param serving_backend_id: The serving_backend_id of this PipelineRunSlim.  # noqa: E501
        :type: str
        """

        self._serving_backend_id = serving_backend_id

    @property
    def training_args(self):
        """Gets the training_args of this PipelineRunSlim.  # noqa: E501


        :return: The training_args of this PipelineRunSlim.  # noqa: E501
        :rtype: object
        """
        return self._training_args

    @training_args.setter
    def training_args(self, training_args):
        """Sets the training_args of this PipelineRunSlim.


        :param training_args: The training_args of this PipelineRunSlim.  # noqa: E501
        :type: object
        """

        self._training_args = training_args

    @property
    def serving_args(self):
        """Gets the serving_args of this PipelineRunSlim.  # noqa: E501


        :return: The serving_args of this PipelineRunSlim.  # noqa: E501
        :rtype: object
        """
        return self._serving_args

    @serving_args.setter
    def serving_args(self, serving_args):
        """Sets the serving_args of this PipelineRunSlim.


        :param serving_args: The serving_args of this PipelineRunSlim.  # noqa: E501
        :type: object
        """

        self._serving_args = serving_args

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelineRunSlim, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineRunSlim):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
