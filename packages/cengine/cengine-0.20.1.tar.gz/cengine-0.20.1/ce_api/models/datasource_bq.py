# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DatasourceBQ(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'client_project': 'str',
        'client_dataset': 'str',
        'client_table': 'str',
        'id': 'str',
        'organization_id': 'str',
        'datasource_type': 'str',
        'created_at': 'datetime',
        'internal_project': 'str',
        'internal_dataset': 'str',
        'internal_table': 'str',
        'n_rows': 'int',
        'n_columns': 'int',
        'n_bytes': 'int'
    }

    attribute_map = {
        'name': 'name',
        'client_project': 'client_project',
        'client_dataset': 'client_dataset',
        'client_table': 'client_table',
        'id': 'id',
        'organization_id': 'organization_id',
        'datasource_type': 'datasource_type',
        'created_at': 'created_at',
        'internal_project': 'internal_project',
        'internal_dataset': 'internal_dataset',
        'internal_table': 'internal_table',
        'n_rows': 'n_rows',
        'n_columns': 'n_columns',
        'n_bytes': 'n_bytes'
    }

    def __init__(self, name=None, client_project=None, client_dataset=None, client_table=None, id=None, organization_id=None, datasource_type=None, created_at=None, internal_project=None, internal_dataset=None, internal_table=None, n_rows=None, n_columns=None, n_bytes=None):  # noqa: E501
        """DatasourceBQ - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._client_project = None
        self._client_dataset = None
        self._client_table = None
        self._id = None
        self._organization_id = None
        self._datasource_type = None
        self._created_at = None
        self._internal_project = None
        self._internal_dataset = None
        self._internal_table = None
        self._n_rows = None
        self._n_columns = None
        self._n_bytes = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if client_project is not None:
            self.client_project = client_project
        if client_dataset is not None:
            self.client_dataset = client_dataset
        if client_table is not None:
            self.client_table = client_table
        if id is not None:
            self.id = id
        if organization_id is not None:
            self.organization_id = organization_id
        if datasource_type is not None:
            self.datasource_type = datasource_type
        if created_at is not None:
            self.created_at = created_at
        if internal_project is not None:
            self.internal_project = internal_project
        if internal_dataset is not None:
            self.internal_dataset = internal_dataset
        if internal_table is not None:
            self.internal_table = internal_table
        if n_rows is not None:
            self.n_rows = n_rows
        if n_columns is not None:
            self.n_columns = n_columns
        if n_bytes is not None:
            self.n_bytes = n_bytes

    @property
    def name(self):
        """Gets the name of this DatasourceBQ.  # noqa: E501


        :return: The name of this DatasourceBQ.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatasourceBQ.


        :param name: The name of this DatasourceBQ.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def client_project(self):
        """Gets the client_project of this DatasourceBQ.  # noqa: E501


        :return: The client_project of this DatasourceBQ.  # noqa: E501
        :rtype: str
        """
        return self._client_project

    @client_project.setter
    def client_project(self, client_project):
        """Sets the client_project of this DatasourceBQ.


        :param client_project: The client_project of this DatasourceBQ.  # noqa: E501
        :type: str
        """

        self._client_project = client_project

    @property
    def client_dataset(self):
        """Gets the client_dataset of this DatasourceBQ.  # noqa: E501


        :return: The client_dataset of this DatasourceBQ.  # noqa: E501
        :rtype: str
        """
        return self._client_dataset

    @client_dataset.setter
    def client_dataset(self, client_dataset):
        """Sets the client_dataset of this DatasourceBQ.


        :param client_dataset: The client_dataset of this DatasourceBQ.  # noqa: E501
        :type: str
        """

        self._client_dataset = client_dataset

    @property
    def client_table(self):
        """Gets the client_table of this DatasourceBQ.  # noqa: E501


        :return: The client_table of this DatasourceBQ.  # noqa: E501
        :rtype: str
        """
        return self._client_table

    @client_table.setter
    def client_table(self, client_table):
        """Sets the client_table of this DatasourceBQ.


        :param client_table: The client_table of this DatasourceBQ.  # noqa: E501
        :type: str
        """

        self._client_table = client_table

    @property
    def id(self):
        """Gets the id of this DatasourceBQ.  # noqa: E501


        :return: The id of this DatasourceBQ.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatasourceBQ.


        :param id: The id of this DatasourceBQ.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this DatasourceBQ.  # noqa: E501


        :return: The organization_id of this DatasourceBQ.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this DatasourceBQ.


        :param organization_id: The organization_id of this DatasourceBQ.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def datasource_type(self):
        """Gets the datasource_type of this DatasourceBQ.  # noqa: E501


        :return: The datasource_type of this DatasourceBQ.  # noqa: E501
        :rtype: str
        """
        return self._datasource_type

    @datasource_type.setter
    def datasource_type(self, datasource_type):
        """Sets the datasource_type of this DatasourceBQ.


        :param datasource_type: The datasource_type of this DatasourceBQ.  # noqa: E501
        :type: str
        """

        self._datasource_type = datasource_type

    @property
    def created_at(self):
        """Gets the created_at of this DatasourceBQ.  # noqa: E501


        :return: The created_at of this DatasourceBQ.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DatasourceBQ.


        :param created_at: The created_at of this DatasourceBQ.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def internal_project(self):
        """Gets the internal_project of this DatasourceBQ.  # noqa: E501


        :return: The internal_project of this DatasourceBQ.  # noqa: E501
        :rtype: str
        """
        return self._internal_project

    @internal_project.setter
    def internal_project(self, internal_project):
        """Sets the internal_project of this DatasourceBQ.


        :param internal_project: The internal_project of this DatasourceBQ.  # noqa: E501
        :type: str
        """

        self._internal_project = internal_project

    @property
    def internal_dataset(self):
        """Gets the internal_dataset of this DatasourceBQ.  # noqa: E501


        :return: The internal_dataset of this DatasourceBQ.  # noqa: E501
        :rtype: str
        """
        return self._internal_dataset

    @internal_dataset.setter
    def internal_dataset(self, internal_dataset):
        """Sets the internal_dataset of this DatasourceBQ.


        :param internal_dataset: The internal_dataset of this DatasourceBQ.  # noqa: E501
        :type: str
        """

        self._internal_dataset = internal_dataset

    @property
    def internal_table(self):
        """Gets the internal_table of this DatasourceBQ.  # noqa: E501


        :return: The internal_table of this DatasourceBQ.  # noqa: E501
        :rtype: str
        """
        return self._internal_table

    @internal_table.setter
    def internal_table(self, internal_table):
        """Sets the internal_table of this DatasourceBQ.


        :param internal_table: The internal_table of this DatasourceBQ.  # noqa: E501
        :type: str
        """

        self._internal_table = internal_table

    @property
    def n_rows(self):
        """Gets the n_rows of this DatasourceBQ.  # noqa: E501


        :return: The n_rows of this DatasourceBQ.  # noqa: E501
        :rtype: int
        """
        return self._n_rows

    @n_rows.setter
    def n_rows(self, n_rows):
        """Sets the n_rows of this DatasourceBQ.


        :param n_rows: The n_rows of this DatasourceBQ.  # noqa: E501
        :type: int
        """

        self._n_rows = n_rows

    @property
    def n_columns(self):
        """Gets the n_columns of this DatasourceBQ.  # noqa: E501


        :return: The n_columns of this DatasourceBQ.  # noqa: E501
        :rtype: int
        """
        return self._n_columns

    @n_columns.setter
    def n_columns(self, n_columns):
        """Sets the n_columns of this DatasourceBQ.


        :param n_columns: The n_columns of this DatasourceBQ.  # noqa: E501
        :type: int
        """

        self._n_columns = n_columns

    @property
    def n_bytes(self):
        """Gets the n_bytes of this DatasourceBQ.  # noqa: E501


        :return: The n_bytes of this DatasourceBQ.  # noqa: E501
        :rtype: int
        """
        return self._n_bytes

    @n_bytes.setter
    def n_bytes(self, n_bytes):
        """Sets the n_bytes of this DatasourceBQ.


        :param n_bytes: The n_bytes of this DatasourceBQ.  # noqa: E501
        :type: int
        """

        self._n_bytes = n_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatasourceBQ, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasourceBQ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
