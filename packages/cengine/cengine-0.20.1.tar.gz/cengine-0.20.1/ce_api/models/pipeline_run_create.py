# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PipelineRunCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workers': 'int',
        'cpus_per_worker': 'int',
        'datasource_commit_id': 'str',
        'run_config': 'object',
        'pipeline_run_type': 'str',
        'orchestration_args': 'object',
        'processing_args': 'object',
        'additional_args': 'object',
        'orchestration_backend': 'str',
        'processing_backend': 'str'
    }

    attribute_map = {
        'workers': 'workers',
        'cpus_per_worker': 'cpus_per_worker',
        'datasource_commit_id': 'datasource_commit_id',
        'run_config': 'run_config',
        'pipeline_run_type': 'pipeline_run_type',
        'orchestration_args': 'orchestration_args',
        'processing_args': 'processing_args',
        'additional_args': 'additional_args',
        'orchestration_backend': 'orchestration_backend',
        'processing_backend': 'processing_backend'
    }

    def __init__(self, workers=None, cpus_per_worker=None, datasource_commit_id=None, run_config=None, pipeline_run_type=None, orchestration_args=None, processing_args=None, additional_args=None, orchestration_backend=None, processing_backend=None):  # noqa: E501
        """PipelineRunCreate - a model defined in Swagger"""  # noqa: E501
        self._workers = None
        self._cpus_per_worker = None
        self._datasource_commit_id = None
        self._run_config = None
        self._pipeline_run_type = None
        self._orchestration_args = None
        self._processing_args = None
        self._additional_args = None
        self._orchestration_backend = None
        self._processing_backend = None
        self.discriminator = None
        if workers is not None:
            self.workers = workers
        if cpus_per_worker is not None:
            self.cpus_per_worker = cpus_per_worker
        if datasource_commit_id is not None:
            self.datasource_commit_id = datasource_commit_id
        if run_config is not None:
            self.run_config = run_config
        if pipeline_run_type is not None:
            self.pipeline_run_type = pipeline_run_type
        if orchestration_args is not None:
            self.orchestration_args = orchestration_args
        if processing_args is not None:
            self.processing_args = processing_args
        if additional_args is not None:
            self.additional_args = additional_args
        if orchestration_backend is not None:
            self.orchestration_backend = orchestration_backend
        if processing_backend is not None:
            self.processing_backend = processing_backend

    @property
    def workers(self):
        """Gets the workers of this PipelineRunCreate.  # noqa: E501


        :return: The workers of this PipelineRunCreate.  # noqa: E501
        :rtype: int
        """
        return self._workers

    @workers.setter
    def workers(self, workers):
        """Sets the workers of this PipelineRunCreate.


        :param workers: The workers of this PipelineRunCreate.  # noqa: E501
        :type: int
        """

        self._workers = workers

    @property
    def cpus_per_worker(self):
        """Gets the cpus_per_worker of this PipelineRunCreate.  # noqa: E501


        :return: The cpus_per_worker of this PipelineRunCreate.  # noqa: E501
        :rtype: int
        """
        return self._cpus_per_worker

    @cpus_per_worker.setter
    def cpus_per_worker(self, cpus_per_worker):
        """Sets the cpus_per_worker of this PipelineRunCreate.


        :param cpus_per_worker: The cpus_per_worker of this PipelineRunCreate.  # noqa: E501
        :type: int
        """

        self._cpus_per_worker = cpus_per_worker

    @property
    def datasource_commit_id(self):
        """Gets the datasource_commit_id of this PipelineRunCreate.  # noqa: E501


        :return: The datasource_commit_id of this PipelineRunCreate.  # noqa: E501
        :rtype: str
        """
        return self._datasource_commit_id

    @datasource_commit_id.setter
    def datasource_commit_id(self, datasource_commit_id):
        """Sets the datasource_commit_id of this PipelineRunCreate.


        :param datasource_commit_id: The datasource_commit_id of this PipelineRunCreate.  # noqa: E501
        :type: str
        """

        self._datasource_commit_id = datasource_commit_id

    @property
    def run_config(self):
        """Gets the run_config of this PipelineRunCreate.  # noqa: E501


        :return: The run_config of this PipelineRunCreate.  # noqa: E501
        :rtype: object
        """
        return self._run_config

    @run_config.setter
    def run_config(self, run_config):
        """Sets the run_config of this PipelineRunCreate.


        :param run_config: The run_config of this PipelineRunCreate.  # noqa: E501
        :type: object
        """

        self._run_config = run_config

    @property
    def pipeline_run_type(self):
        """Gets the pipeline_run_type of this PipelineRunCreate.  # noqa: E501


        :return: The pipeline_run_type of this PipelineRunCreate.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_run_type

    @pipeline_run_type.setter
    def pipeline_run_type(self, pipeline_run_type):
        """Sets the pipeline_run_type of this PipelineRunCreate.


        :param pipeline_run_type: The pipeline_run_type of this PipelineRunCreate.  # noqa: E501
        :type: str
        """

        self._pipeline_run_type = pipeline_run_type

    @property
    def orchestration_args(self):
        """Gets the orchestration_args of this PipelineRunCreate.  # noqa: E501


        :return: The orchestration_args of this PipelineRunCreate.  # noqa: E501
        :rtype: object
        """
        return self._orchestration_args

    @orchestration_args.setter
    def orchestration_args(self, orchestration_args):
        """Sets the orchestration_args of this PipelineRunCreate.


        :param orchestration_args: The orchestration_args of this PipelineRunCreate.  # noqa: E501
        :type: object
        """

        self._orchestration_args = orchestration_args

    @property
    def processing_args(self):
        """Gets the processing_args of this PipelineRunCreate.  # noqa: E501


        :return: The processing_args of this PipelineRunCreate.  # noqa: E501
        :rtype: object
        """
        return self._processing_args

    @processing_args.setter
    def processing_args(self, processing_args):
        """Sets the processing_args of this PipelineRunCreate.


        :param processing_args: The processing_args of this PipelineRunCreate.  # noqa: E501
        :type: object
        """

        self._processing_args = processing_args

    @property
    def additional_args(self):
        """Gets the additional_args of this PipelineRunCreate.  # noqa: E501


        :return: The additional_args of this PipelineRunCreate.  # noqa: E501
        :rtype: object
        """
        return self._additional_args

    @additional_args.setter
    def additional_args(self, additional_args):
        """Sets the additional_args of this PipelineRunCreate.


        :param additional_args: The additional_args of this PipelineRunCreate.  # noqa: E501
        :type: object
        """

        self._additional_args = additional_args

    @property
    def orchestration_backend(self):
        """Gets the orchestration_backend of this PipelineRunCreate.  # noqa: E501


        :return: The orchestration_backend of this PipelineRunCreate.  # noqa: E501
        :rtype: str
        """
        return self._orchestration_backend

    @orchestration_backend.setter
    def orchestration_backend(self, orchestration_backend):
        """Sets the orchestration_backend of this PipelineRunCreate.


        :param orchestration_backend: The orchestration_backend of this PipelineRunCreate.  # noqa: E501
        :type: str
        """

        self._orchestration_backend = orchestration_backend

    @property
    def processing_backend(self):
        """Gets the processing_backend of this PipelineRunCreate.  # noqa: E501


        :return: The processing_backend of this PipelineRunCreate.  # noqa: E501
        :rtype: str
        """
        return self._processing_backend

    @processing_backend.setter
    def processing_backend(self, processing_backend):
        """Sets the processing_backend of this PipelineRunCreate.


        :param processing_backend: The processing_backend of this PipelineRunCreate.  # noqa: E501
        :type: str
        """

        self._processing_backend = processing_backend

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PipelineRunCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineRunCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
