# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Artifact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'is_dir': 'bool',
        'signed_url': 'list[str]',
        'children': 'list[object]'
    }

    attribute_map = {
        'name': 'name',
        'is_dir': 'is_dir',
        'signed_url': 'signed_url',
        'children': 'children'
    }

    def __init__(self, name=None, is_dir=None, signed_url=None, children=None):  # noqa: E501
        """Artifact - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._is_dir = None
        self._signed_url = None
        self._children = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if is_dir is not None:
            self.is_dir = is_dir
        if signed_url is not None:
            self.signed_url = signed_url
        if children is not None:
            self.children = children

    @property
    def name(self):
        """Gets the name of this Artifact.  # noqa: E501


        :return: The name of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Artifact.


        :param name: The name of this Artifact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_dir(self):
        """Gets the is_dir of this Artifact.  # noqa: E501


        :return: The is_dir of this Artifact.  # noqa: E501
        :rtype: bool
        """
        return self._is_dir

    @is_dir.setter
    def is_dir(self, is_dir):
        """Sets the is_dir of this Artifact.


        :param is_dir: The is_dir of this Artifact.  # noqa: E501
        :type: bool
        """

        self._is_dir = is_dir

    @property
    def signed_url(self):
        """Gets the signed_url of this Artifact.  # noqa: E501


        :return: The signed_url of this Artifact.  # noqa: E501
        :rtype: list[str]
        """
        return self._signed_url

    @signed_url.setter
    def signed_url(self, signed_url):
        """Sets the signed_url of this Artifact.


        :param signed_url: The signed_url of this Artifact.  # noqa: E501
        :type: list[str]
        """

        self._signed_url = signed_url

    @property
    def children(self):
        """Gets the children of this Artifact.  # noqa: E501


        :return: The children of this Artifact.  # noqa: E501
        :rtype: list[Object]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Artifact.


        :param children: The children of this Artifact.  # noqa: E501
        :type: list[Object]
        """

        self._children = children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Artifact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Artifact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
