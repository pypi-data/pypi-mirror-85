# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Billing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_processed_datapoints': 'int',
        'cost_total': 'float',
        'processed_datapoints_this_month': 'int',
        'cost_this_month': 'float'
    }

    attribute_map = {
        'total_processed_datapoints': 'total_processed_datapoints',
        'cost_total': 'cost_total',
        'processed_datapoints_this_month': 'processed_datapoints_this_month',
        'cost_this_month': 'cost_this_month'
    }

    def __init__(self, total_processed_datapoints=None, cost_total=None, processed_datapoints_this_month=None, cost_this_month=None):  # noqa: E501
        """Billing - a model defined in Swagger"""  # noqa: E501
        self._total_processed_datapoints = None
        self._cost_total = None
        self._processed_datapoints_this_month = None
        self._cost_this_month = None
        self.discriminator = None
        if total_processed_datapoints is not None:
            self.total_processed_datapoints = total_processed_datapoints
        if cost_total is not None:
            self.cost_total = cost_total
        if processed_datapoints_this_month is not None:
            self.processed_datapoints_this_month = processed_datapoints_this_month
        if cost_this_month is not None:
            self.cost_this_month = cost_this_month

    @property
    def total_processed_datapoints(self):
        """Gets the total_processed_datapoints of this Billing.  # noqa: E501


        :return: The total_processed_datapoints of this Billing.  # noqa: E501
        :rtype: int
        """
        return self._total_processed_datapoints

    @total_processed_datapoints.setter
    def total_processed_datapoints(self, total_processed_datapoints):
        """Sets the total_processed_datapoints of this Billing.


        :param total_processed_datapoints: The total_processed_datapoints of this Billing.  # noqa: E501
        :type: int
        """

        self._total_processed_datapoints = total_processed_datapoints

    @property
    def cost_total(self):
        """Gets the cost_total of this Billing.  # noqa: E501


        :return: The cost_total of this Billing.  # noqa: E501
        :rtype: float
        """
        return self._cost_total

    @cost_total.setter
    def cost_total(self, cost_total):
        """Sets the cost_total of this Billing.


        :param cost_total: The cost_total of this Billing.  # noqa: E501
        :type: float
        """

        self._cost_total = cost_total

    @property
    def processed_datapoints_this_month(self):
        """Gets the processed_datapoints_this_month of this Billing.  # noqa: E501


        :return: The processed_datapoints_this_month of this Billing.  # noqa: E501
        :rtype: int
        """
        return self._processed_datapoints_this_month

    @processed_datapoints_this_month.setter
    def processed_datapoints_this_month(self, processed_datapoints_this_month):
        """Sets the processed_datapoints_this_month of this Billing.


        :param processed_datapoints_this_month: The processed_datapoints_this_month of this Billing.  # noqa: E501
        :type: int
        """

        self._processed_datapoints_this_month = processed_datapoints_this_month

    @property
    def cost_this_month(self):
        """Gets the cost_this_month of this Billing.  # noqa: E501


        :return: The cost_this_month of this Billing.  # noqa: E501
        :rtype: float
        """
        return self._cost_this_month

    @cost_this_month.setter
    def cost_this_month(self, cost_this_month):
        """Sets the cost_this_month of this Billing.


        :param cost_this_month: The cost_this_month of this Billing.  # noqa: E501
        :type: float
        """

        self._cost_this_month = cost_this_month

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Billing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Billing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
