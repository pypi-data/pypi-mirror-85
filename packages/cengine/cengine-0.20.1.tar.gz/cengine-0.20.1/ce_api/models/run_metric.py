# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RunMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'actual_cost': 'float',
        'saved_cost': 'float',
        'pipeline_run_id': 'int',
        'user_id': 'int',
        'last_attempt': 'datetime',
        'component_metrics': 'list[ComponentMetric]',
        'id': 'int'
    }

    attribute_map = {
        'status': 'status',
        'actual_cost': 'actual_cost',
        'saved_cost': 'saved_cost',
        'pipeline_run_id': 'pipeline_run_id',
        'user_id': 'user_id',
        'last_attempt': 'last_attempt',
        'component_metrics': 'component_metrics',
        'id': 'id'
    }

    def __init__(self, status=None, actual_cost=0, saved_cost=0, pipeline_run_id=None, user_id=None, last_attempt=None, component_metrics=None, id=None):  # noqa: E501
        """RunMetric - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._actual_cost = None
        self._saved_cost = None
        self._pipeline_run_id = None
        self._user_id = None
        self._last_attempt = None
        self._component_metrics = None
        self._id = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if actual_cost is not None:
            self.actual_cost = actual_cost
        if saved_cost is not None:
            self.saved_cost = saved_cost
        if pipeline_run_id is not None:
            self.pipeline_run_id = pipeline_run_id
        if user_id is not None:
            self.user_id = user_id
        if last_attempt is not None:
            self.last_attempt = last_attempt
        if component_metrics is not None:
            self.component_metrics = component_metrics
        if id is not None:
            self.id = id

    @property
    def status(self):
        """Gets the status of this RunMetric.  # noqa: E501


        :return: The status of this RunMetric.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RunMetric.


        :param status: The status of this RunMetric.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def actual_cost(self):
        """Gets the actual_cost of this RunMetric.  # noqa: E501


        :return: The actual_cost of this RunMetric.  # noqa: E501
        :rtype: float
        """
        return self._actual_cost

    @actual_cost.setter
    def actual_cost(self, actual_cost):
        """Sets the actual_cost of this RunMetric.


        :param actual_cost: The actual_cost of this RunMetric.  # noqa: E501
        :type: float
        """

        self._actual_cost = actual_cost

    @property
    def saved_cost(self):
        """Gets the saved_cost of this RunMetric.  # noqa: E501


        :return: The saved_cost of this RunMetric.  # noqa: E501
        :rtype: float
        """
        return self._saved_cost

    @saved_cost.setter
    def saved_cost(self, saved_cost):
        """Sets the saved_cost of this RunMetric.


        :param saved_cost: The saved_cost of this RunMetric.  # noqa: E501
        :type: float
        """

        self._saved_cost = saved_cost

    @property
    def pipeline_run_id(self):
        """Gets the pipeline_run_id of this RunMetric.  # noqa: E501


        :return: The pipeline_run_id of this RunMetric.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_run_id

    @pipeline_run_id.setter
    def pipeline_run_id(self, pipeline_run_id):
        """Sets the pipeline_run_id of this RunMetric.


        :param pipeline_run_id: The pipeline_run_id of this RunMetric.  # noqa: E501
        :type: int
        """

        self._pipeline_run_id = pipeline_run_id

    @property
    def user_id(self):
        """Gets the user_id of this RunMetric.  # noqa: E501


        :return: The user_id of this RunMetric.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this RunMetric.


        :param user_id: The user_id of this RunMetric.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def last_attempt(self):
        """Gets the last_attempt of this RunMetric.  # noqa: E501


        :return: The last_attempt of this RunMetric.  # noqa: E501
        :rtype: datetime
        """
        return self._last_attempt

    @last_attempt.setter
    def last_attempt(self, last_attempt):
        """Sets the last_attempt of this RunMetric.


        :param last_attempt: The last_attempt of this RunMetric.  # noqa: E501
        :type: datetime
        """

        self._last_attempt = last_attempt

    @property
    def component_metrics(self):
        """Gets the component_metrics of this RunMetric.  # noqa: E501


        :return: The component_metrics of this RunMetric.  # noqa: E501
        :rtype: list[ComponentMetric]
        """
        return self._component_metrics

    @component_metrics.setter
    def component_metrics(self, component_metrics):
        """Sets the component_metrics of this RunMetric.


        :param component_metrics: The component_metrics of this RunMetric.  # noqa: E501
        :type: list[ComponentMetric]
        """

        self._component_metrics = component_metrics

    @property
    def id(self):
        """Gets the id of this RunMetric.  # noqa: E501


        :return: The id of this RunMetric.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RunMetric.


        :param id: The id of this RunMetric.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
