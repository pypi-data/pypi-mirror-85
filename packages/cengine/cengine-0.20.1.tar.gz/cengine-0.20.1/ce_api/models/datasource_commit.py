# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DatasourceCommit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'used_schema': 'object',
        'id': 'str',
        'created_at': 'datetime',
        'destination_args': 'object',
        'n_datapoints': 'int',
        'n_features': 'int',
        'n_bytes': 'int',
        'user_id': 'str',
        'datasource_id': 'str'
    }

    attribute_map = {
        'message': 'message',
        'used_schema': 'used_schema',
        'id': 'id',
        'created_at': 'created_at',
        'destination_args': 'destination_args',
        'n_datapoints': 'n_datapoints',
        'n_features': 'n_features',
        'n_bytes': 'n_bytes',
        'user_id': 'user_id',
        'datasource_id': 'datasource_id'
    }

    def __init__(self, message=None, used_schema=None, id=None, created_at=None, destination_args=None, n_datapoints=None, n_features=None, n_bytes=None, user_id=None, datasource_id=None):  # noqa: E501
        """DatasourceCommit - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._used_schema = None
        self._id = None
        self._created_at = None
        self._destination_args = None
        self._n_datapoints = None
        self._n_features = None
        self._n_bytes = None
        self._user_id = None
        self._datasource_id = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if used_schema is not None:
            self.used_schema = used_schema
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if destination_args is not None:
            self.destination_args = destination_args
        if n_datapoints is not None:
            self.n_datapoints = n_datapoints
        if n_features is not None:
            self.n_features = n_features
        if n_bytes is not None:
            self.n_bytes = n_bytes
        if user_id is not None:
            self.user_id = user_id
        if datasource_id is not None:
            self.datasource_id = datasource_id

    @property
    def message(self):
        """Gets the message of this DatasourceCommit.  # noqa: E501


        :return: The message of this DatasourceCommit.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DatasourceCommit.


        :param message: The message of this DatasourceCommit.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def used_schema(self):
        """Gets the used_schema of this DatasourceCommit.  # noqa: E501


        :return: The used_schema of this DatasourceCommit.  # noqa: E501
        :rtype: object
        """
        return self._used_schema

    @used_schema.setter
    def used_schema(self, used_schema):
        """Sets the used_schema of this DatasourceCommit.


        :param used_schema: The used_schema of this DatasourceCommit.  # noqa: E501
        :type: object
        """

        self._used_schema = used_schema

    @property
    def id(self):
        """Gets the id of this DatasourceCommit.  # noqa: E501


        :return: The id of this DatasourceCommit.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatasourceCommit.


        :param id: The id of this DatasourceCommit.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this DatasourceCommit.  # noqa: E501


        :return: The created_at of this DatasourceCommit.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DatasourceCommit.


        :param created_at: The created_at of this DatasourceCommit.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def destination_args(self):
        """Gets the destination_args of this DatasourceCommit.  # noqa: E501


        :return: The destination_args of this DatasourceCommit.  # noqa: E501
        :rtype: object
        """
        return self._destination_args

    @destination_args.setter
    def destination_args(self, destination_args):
        """Sets the destination_args of this DatasourceCommit.


        :param destination_args: The destination_args of this DatasourceCommit.  # noqa: E501
        :type: object
        """

        self._destination_args = destination_args

    @property
    def n_datapoints(self):
        """Gets the n_datapoints of this DatasourceCommit.  # noqa: E501


        :return: The n_datapoints of this DatasourceCommit.  # noqa: E501
        :rtype: int
        """
        return self._n_datapoints

    @n_datapoints.setter
    def n_datapoints(self, n_datapoints):
        """Sets the n_datapoints of this DatasourceCommit.


        :param n_datapoints: The n_datapoints of this DatasourceCommit.  # noqa: E501
        :type: int
        """

        self._n_datapoints = n_datapoints

    @property
    def n_features(self):
        """Gets the n_features of this DatasourceCommit.  # noqa: E501


        :return: The n_features of this DatasourceCommit.  # noqa: E501
        :rtype: int
        """
        return self._n_features

    @n_features.setter
    def n_features(self, n_features):
        """Sets the n_features of this DatasourceCommit.


        :param n_features: The n_features of this DatasourceCommit.  # noqa: E501
        :type: int
        """

        self._n_features = n_features

    @property
    def n_bytes(self):
        """Gets the n_bytes of this DatasourceCommit.  # noqa: E501


        :return: The n_bytes of this DatasourceCommit.  # noqa: E501
        :rtype: int
        """
        return self._n_bytes

    @n_bytes.setter
    def n_bytes(self, n_bytes):
        """Sets the n_bytes of this DatasourceCommit.


        :param n_bytes: The n_bytes of this DatasourceCommit.  # noqa: E501
        :type: int
        """

        self._n_bytes = n_bytes

    @property
    def user_id(self):
        """Gets the user_id of this DatasourceCommit.  # noqa: E501


        :return: The user_id of this DatasourceCommit.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DatasourceCommit.


        :param user_id: The user_id of this DatasourceCommit.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def datasource_id(self):
        """Gets the datasource_id of this DatasourceCommit.  # noqa: E501


        :return: The datasource_id of this DatasourceCommit.  # noqa: E501
        :rtype: str
        """
        return self._datasource_id

    @datasource_id.setter
    def datasource_id(self, datasource_id):
        """Sets the datasource_id of this DatasourceCommit.


        :param datasource_id: The datasource_id of this DatasourceCommit.  # noqa: E501
        :type: str
        """

        self._datasource_id = datasource_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatasourceCommit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasourceCommit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
