# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['mcwiki']

package_data = \
{'': ['*']}

install_requires = \
['beautifulsoup4>=4.9.1,<5.0.0', 'requests>=2.24.0,<3.0.0']

setup_kwargs = {
    'name': 'mcwiki',
    'version': '0.1.1',
    'description': 'A scraping library for the Minecraft Wiki',
    'long_description': '# mcwiki\n\n[![Build Status](https://travis-ci.com/vberlier/mcwiki.svg?branch=main)](https://travis-ci.com/vberlier/mcwiki)\n[![PyPI](https://img.shields.io/pypi/v/mcwiki.svg)](https://pypi.org/project/mcwiki/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mcwiki.svg)](https://pypi.org/project/mcwiki/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)\n\n> A scraping library for the [Minecraft Wiki](https://minecraft.gamepedia.com/Minecraft_Wiki).\n\n```python\nimport mcwiki\n\npage = mcwiki.load("Data Pack")\nprint(page["pack.mcmeta"].extract(mcwiki.TREE))\n```\n\n```\n[TAG_Compound]\nThe root object.\n└─ pack\n   [TAG_Compound]\n   Holds the data pack information.\n   ├─ description\n   │  [TAG_String, TAG_List, TAG_Compound]\n   │  A JSON text that appears when hovering over the data pack\'s name in\n   │  the list given by the /datapack list command, or when viewing the pack\n   │  in the Create World screen.\n   └─ pack_format\n      [TAG_Int]\n      Pack version. If this number does not match the current required\n      number, the data pack displays a warning and requires additional\n      confirmation to load the pack. Requires 4 for 1.13–1.14.4, 5 for\n      1.15–1.16.1 and 6 for 1.16.2–1.16.3.\n```\n\n## Introduction\n\nThe Minecraft Wiki is a well-maintained source of information but is a bit too organic to be used as anything more than a reference. This project tries its best to make it possible to locate and extract the information you\'re interested in and use it as a programmatic source of truth for developing Minecraft-related tooling.\n\n### Features\n\n- Easily navigate through page sections\n- Extract paragraphs, code blocks and recursive tree-like hierarchies\n- Create custom extractors or extend the provided ones\n\n## Installation\n\nThe package can be installed with `pip`.\n\n```bash\n$ pip install mcwiki\n```\n\n## Getting Started\n\nThe `load` function allows you to load a page from the Minecraft Wiki. The page can be specified by providing a URL or simply the title of the page.\n\n```python\nmcwiki.load("https://minecraft.gamepedia.com/Data_Pack")\nmcwiki.load("Data Pack")\n```\n\nYou can use the `load_file` function to read from a page downloaded locally or the `from_markup` function if you already have the html loaded in a string.\n\n```python\nmcwiki.load_file("Data_Pack.html")\nmcwiki.from_markup("<!DOCTYPE html>\\n<html ...")\n```\n\nPage sections can then be manipulated like dictionaries. Keys are case-insensitive and are associated to subsections.\n\n```python\npage = mcwiki.load("https://minecraft.gamepedia.com/Advancement/JSON_format")\n\nprint(page["List of triggers"])\n```\n\n```\n<PageSection [\'minecraft:bee_nest_destroyed\', \'minecraft:bred_animals\', ...]>\n```\n\n## Extracting Data\n\nThere are 3 built-in extractors. Extractors are instantiated with a CSS selector and define a `process` method that produces an item for each element returned by the selector.\n\n| Extractor    | Type                   | Extracted Item                                            |\n| ------------ | ---------------------- | --------------------------------------------------------- |\n| `PARAGRAPH`  | `TextExtractor("p")`   | String containing the text content of a paragraph         |\n| `CODE_BLOCK` | `TextExtractor("pre")` | String containing the text content of a code block        |\n| `TREE`       | `TreeExtractor()`      | An instance of `mcwiki.Tree` containing the treeview data |\n\nPage sections can invoke extractors by using the `extract` and `extract_all` methods. The `extract` method will return the first item in the page section or `None` if the extractor couldn\'t extract anything.\n\n```python\nprint(page.extract(mcwiki.PARAGRAPH))\n```\n\n```\nCustom advancements in data packs of a Minecraft world store the advancement data for that world as separate JSON files.\n```\n\nYou can use the `index` argument to specify which paragraph to extract.\n\n```python\nprint(page.extract(mcwiki.PARAGRAPH, index=1))\n```\n\n```\nAll advancement JSON files are structured according to the following format:\n```\n\nThe `extract_all` method will return a lazy sequence-like container of all the items the extractor could extract from the page section.\n\n```python\nfor paragraph in page.extract_all(mcwiki.PARAGRAPH):\n    print(paragraph)\n```\n\nYou can use the `limit` argument or slice the returned sequence to limit the number of extracted items.\n\n```python\n# Both yield exactly the same list\nparagraphs = page.extract_all(mcwiki.PARAGRAPH)[:10]\nparagraphs = list(page.extract_all(mcwiki.PARAGRAPH, limit=10))\n```\n\n## Tree Structures\n\nThe `TREE` extractor returns recursive tree-like hierarchies. You can use the `children` property to iterate through the direct children of a tree.\n\n```python\ndef print_nodes(tree: mcwiki.Tree):\n    for key, node in tree.children:\n        print(key, node.text, node.icons)\n        print_nodes(node.content)\n\nprint_nodes(section.extract(mcwiki.TREE))\n```\n\nFolded entries are automatically fetched, inlined, and cached. This means that iterating over the `children` property can yield a node that\'s already been visited so make sure to handle infinite recursions where appropriate.\n\nTree nodes have 3 attributes that can all be empty:\n\n- The `text` attribute holds the text content of the node\n- The `icons` attribute is a tuple that stores the names of the icons associated to the node\n- The `content` attribute is a tree containing the children of the node\n\nYou can transform the tree into a shallow dictionary with the `as_dict` method.\n\n```python\n# Both yield exactly the same dictionary\nnodes = tree.as_dict()\nnodes = dict(tree.children)\n```\n\n## Contributing\n\nContributions are welcome. Make sure to first open an issue discussing the problem or the new feature before creating a pull request. The project uses [`poetry`](https://python-poetry.org).\n\n```bash\n$ poetry install\n```\n\nYou can run the tests with `poetry run pytest`.\n\n```bash\n$ poetry run pytest\n```\n\nThe project must type-check with [`mypy`](http://mypy-lang.org) and [`pylint`](https://www.pylint.org) shouldn\'t report any error.\n\n```bash\n$ poetry run mypy\n$ poetry run pylint mcwiki tests\n```\n\nThe code follows the [`black`](https://github.com/psf/black) code style. Import statements are sorted with [`isort`](https://pycqa.github.io/isort/).\n\n```bash\n$ poetry run isort mcwiki tests\n$ poetry run black mcwiki tests\n$ poetry run black --check mcwiki tests\n```\n\n---\n\nLicense - [MIT](https://github.com/vberlier/mcwiki/blob/master/LICENSE)\n',
    'author': 'Valentin Berlier',
    'author_email': 'berlier.v@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/vberlier/mcwiki',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
