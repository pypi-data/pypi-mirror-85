# Nemo config file
# YAML format 
# - use null to return None in Python
# - note that YAML is fussy about large numbers: use e.g. 1.0e+14 for M500MSun (not 1e14)

# Valid units are uK or Jy/sr
# this should be a list of maps at different frequencies
# NOTE: surveyMask is optional
unfilteredMaps:
    - {mapFileName: "../maps/y-maps/release_v0.2.3/act_planck/tilec_deep56_comptony_map_deprojects_nothing_v0.2.3_act_planck.fits",
       weightsFileName: null,
       obsFreqGHz: null, 'units': "yc",
       #RADecSection: [358.6, 16.8, -6.0, 2.9], # small test
       RADecSection: [351.2, 42.9, -7.6, 4.0],  # full footprint inside survey mask
       beamFileName: "../Beams/181222/mr3c_s15_pa3_f090_nohwp_night_beam_profile_jitter_deep56_181222.txt",
       applyBeamConvolution: True}

# Masks
pointSourceMask: null
surveyMask: "../maps/y-maps/release_v0.2.3/tilec_deep56_surveyMask.fits.gz"

# Detection/catalog options
# Set useInterpolator: True for sub-pixel flux and SNR measurements
thresholdSigma: 4.0
minObjPix: 1
rejectBorder: 0
useInterpolator: True
findCenterOfMass: True
objIdent: 'ACT-CL'
longNames: False
catalogCuts: ['SNR > 4.0']

# Photometry options
# use photFilter to choose which filter to include in the catalog as fixed filter scale measurement (fixed_delta_T_c, fixed_y_c etc.) 
photFilter: 'Arnaud_M2e14_z0p4'

# Optionally override the GNFW parameters - if not present, Arnaud et al. (2010) parameters are used
# The example below is for the Planck Pressure Profile (PPP)
#GNFWParams: {P0: 6.41, c500: 1.81, gamma: 0.31, alpha: 1.33, beta: 4.13, tol: 1e-7, npts: 100}

# Mass measurement options - used by nemoMass and nemoSelFn scripts
# Writes out .fits file to nemoOutDir/nemoOutDir_M500.fits
# redshiftCatalog:  A .fits table containing name, RADeg, decDeg, redshift, redshiftErr columns
# forcedPhotometry: If True, calc mass based on extracted y0~ in 'photFilter' map at RADeg, decDeg as given in redshiftCatalog
#                   If False, cross match redshiftCatalog with optimal catalog made by nemo
# Q:                If 'H13', use fit to Q from results presented in H13
#                   If 'fit', use fit to (theta, Q) done by nemo for 'photFilter' kernel
# tenToA0, B0, Mpivot, sigma_int: Fixed scaling relation options (see H13 or ACTPol paper)
# rescaleFactor, rescaleFactorErr: For MCal masses, as in the ACTPol paper (i.e., just rescales M500 results by 1/rescaleFactor)
massOptions: {tenToA0: 4.95e-5, 
              B0: 0.08, 
              Mpivot: 3.0e+14, 
              sigma_int: 0.2,
              rescaleFactor: 0.68, 
              rescaleFactorErr: 0.11,
              redshiftCatalog: "MFMF-S16-MJH_redshifts.fits"} 

# Selection function options - only used by the nemoSelFn script
# NOTE: could eventually add 'completenessFraction' to 'massLimitMaps', which is why that's a dictionary list
selFnOptions: {fixedSNRCut: 5.0, 
               massLimitMaps: [{z: 0.5}]}

# Filter definitions             
allFilters: {class: "ArnaudModelMatchedFilter",
             params: {noiseParams: {method: "dataMap",
                                    noiseGridArcmin: 20.},
                      outputUnits: 'yc'}}

# mapFilters is a list of all the different filters to apply
# (keys in mapFilters with the same name as those in allFilters take priority)
mapFilters:
    - {label: "Arnaud_M2e14_z0p1",
       params: {M500MSun: 2.0e+14, z: 0.1}}
    - {label: "Arnaud_M2e14_z0p2",
       params: {M500MSun: 2.0e+14, z: 0.2}}
    - {label: "Arnaud_M2e14_z0p4",
       params: {M500MSun: 2.0e+14, z: 0.4}}
    - {label: "Arnaud_M2e14_z0p8",
       params: {M500MSun: 2.0e+14, z: 0.8}}
    - {label: "Arnaud_M2e14_z1p2",
       params: {M500MSun: 2.0e+14, z: 1.2}}
    
# Set this to True to generate a sky sim (with noise), run all the filters over it, and measure contamination
# Set numSkySims to number required - we need to average over many as results vary a fair bit
estimateContaminationFromSkySim: False
numSkySims: 1

# Set this to True to estimate contamination by running cluster finder over inverted maps
# This is sensitive to how well point source masking is done
estimateContaminationFromInvertedMaps: False
    
# Run position recovery test
positionRecoveryTest: False
