<?xml version='1.0' encoding='US-ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" uuid="{fe2e5327-f4aa-474d-a6d5-e6d02f946445}">
  <label></label>
  <ports/>
  <flow cls="Lambda" uuid="{862b362e-f3ec-41e5-8b24-8406d481ad74}" x="2825.0" y="1950.0">
    <label>Apply mask to
original image</label>
    <aggregation type="json">{"selected_uuids": [], "override": true, "conf_view": "TabBuilder"}</aggregation>
    <ports>
      <input index="0" key="Port" parent="False" scheme="hdf5" type="(image, image)" uuid="{edec59ed-f149-4b99-8336-411524b63865}" x="1525.0" y="1975.0">
        <label>Port</label>
      </input>
      <output index="0" key="Port" parent="False" scheme="hdf5" type="image" uuid="{8568fed5-b700-4f2f-81f5-98d21e95b996}" x="2000.0" y="1975.0">
        <label>Port</label>
      </output>
    </ports>
    <basic_ports>
      <output key="Function" scheme="hdf5" type="(image, image) -&gt; image" type_base="&lt;a&gt;" uuid="{dcd8b1f9-d125-4492-a158-3e5f7c9ed1d8}">
        <label>Lambda function</label>
      </output>
    </basic_ports>
    <node id="syip.general_filters" uuid="{68c2f272-cdf9-4c06-8dca-c500016369dc}" x="1875.0" y="1975.0">
      <label>Filter image</label>
      <version>0.1</version>
      <parameters type="json">
      {
        "algorithm": {
          "editor": null,
          "label": "Algorithm",
          "order": 0,
          "type": "string",
          "value": "center image"
        },
        "border mode": {
          "editor": null,
          "label": "border mode",
          "order": 6,
          "type": "string",
          "value": "constant"
        },
        "k": {
          "editor": null,
          "label": "k",
          "order": 2,
          "type": "float",
          "value": 0.05
        },
        "maximum": {
          "editor": null,
          "label": "maximum",
          "order": 5,
          "type": "float",
          "value": 1.0
        },
        "minimum": {
          "editor": null,
          "label": "minimum",
          "order": 7,
          "type": "float",
          "value": 0.0
        },
        "offset": {
          "editor": null,
          "label": "offset",
          "order": 8,
          "type": "float",
          "value": 0.0
        },
        "scale": {
          "editor": null,
          "label": "scale",
          "order": 1,
          "type": "float",
          "value": 1.0
        },
        "sigma": {
          "editor": null,
          "label": "sigma",
          "order": 9,
          "type": "float",
          "value": 1.0
        },
        "sigma-x": {
          "editor": null,
          "label": "sigma-x",
          "order": 4,
          "type": "float",
          "value": 1.0
        },
        "sigma-y": {
          "editor": null,
          "label": "sigma-y",
          "order": 3,
          "type": "float",
          "value": 1.0
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{1bfe5763-13fd-4bc1-b4bb-ea2a177b086c}">
          <label>source image to filter</label>
        </input>
        <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{fe780e3e-2ead-49ae-b805-3ad07edc47ed}">
          <label>result after filtering</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.tuple.untuple2" uuid="{c6c0496e-c7fb-43d8-bd9a-eb413d065737}" x="1625.0" y="1975.0">
      <label>Untuple2</label>
      <version>1.0</version>
      <parameters type="json">{"type": "group"}</parameters>
      <ports>
        <input key="input" scheme="hdf5" type="(image, image)" type_base="(&lt;a&gt;, &lt;b&gt;)" uuid="{bfd9f70c-9c88-4142-8989-996052b6e497}">
          <label>Input</label>
        </input>
        <output key="output" scheme="hdf5" type="image" type_base="&lt;a&gt;" uuid="{51f24257-08cc-46e6-9bcb-12029e9a6b52}">
          <label>Output</label>
        </output>
        <output key="output" scheme="hdf5" type="image" type_base="&lt;b&gt;" uuid="{4581e274-8792-4fc2-8ca8-613021486fb9}">
          <label>Output</label>
        </output>
      </ports>
    </node>
    <node id="syip.overlay" uuid="{f6fb85bf-7ebf-41bd-a20b-e7bf99451631}" x="1750.0" y="1975.0">
      <label>Overlay images</label>
      <version>0.1</version>
      <parameters type="json">
      {
        "algorithm": {
          "editor": null,
          "label": "",
          "order": 0,
          "type": "string",
          "value": "multiplicative"
        },
        "type": "group",
        "use alpha": {
          "editor": null,
          "label": "",
          "order": 1,
          "type": "boolean",
          "value": false
        },
        "x-offset": {
          "editor": null,
          "label": "",
          "order": 2,
          "type": "integer",
          "value": 0
        },
        "y-offset": {
          "editor": null,
          "label": "",
          "order": 3,
          "type": "integer",
          "value": 0
        }
      }
      </parameters>
      <ports>
        <input key="images" scheme="hdf5" type="image" type_base="image" uuid="{164cd64c-467c-4959-b69b-2bf8b3679625}">
          <label>Input images</label>
        </input>
        <input key="images" scheme="hdf5" type="image" type_base="image" uuid="{f2ee127a-fd1e-42d0-86fc-a37acec262f5}">
          <label>Input images</label>
        </input>
        <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{d902bc06-0285-4f71-a3ea-0909da22f132}">
          <label>result after filtering</label>
        </output>
      </ports>
    </node>
    <connection type="image" uuid="{57304f65-ac99-48eb-b642-03d75d796f95}">
      <source node="{c6c0496e-c7fb-43d8-bd9a-eb413d065737}" port="{51f24257-08cc-46e6-9bcb-12029e9a6b52}"/>
      <destination node="{f6fb85bf-7ebf-41bd-a20b-e7bf99451631}" port="{164cd64c-467c-4959-b69b-2bf8b3679625}"/>
    </connection>
    <connection type="(image, image)" uuid="{7231c76d-4558-489f-b603-16de3520ffb4}">
      <source node="{862b362e-f3ec-41e5-8b24-8406d481ad74}" port="{edec59ed-f149-4b99-8336-411524b63865}"/>
      <destination node="{c6c0496e-c7fb-43d8-bd9a-eb413d065737}" port="{bfd9f70c-9c88-4142-8989-996052b6e497}"/>
    </connection>
    <connection type="image" uuid="{9a8247ca-4548-401f-9703-2908bb47cf18}">
      <source node="{f6fb85bf-7ebf-41bd-a20b-e7bf99451631}" port="{d902bc06-0285-4f71-a3ea-0909da22f132}"/>
      <destination node="{68c2f272-cdf9-4c06-8dca-c500016369dc}" port="{1bfe5763-13fd-4bc1-b4bb-ea2a177b086c}"/>
    </connection>
    <connection type="image" uuid="{bc9dcddb-3bc9-46fc-a13f-55ce9a44a5b1}">
      <source node="{c6c0496e-c7fb-43d8-bd9a-eb413d065737}" port="{4581e274-8792-4fc2-8ca8-613021486fb9}"/>
      <destination node="{f6fb85bf-7ebf-41bd-a20b-e7bf99451631}" port="{f2ee127a-fd1e-42d0-86fc-a37acec262f5}"/>
    </connection>
    <connection type="image" uuid="{db1336f1-7b25-454a-842e-f72cd571bc18}">
      <source node="{68c2f272-cdf9-4c06-8dca-c500016369dc}" port="{fe780e3e-2ead-49ae-b805-3ad07edc47ed}"/>
      <destination node="{862b362e-f3ec-41e5-8b24-8406d481ad74}" port="{8568fed5-b700-4f2f-81f5-98d21e95b996}"/>
    </connection>
  </flow>
  <node id="org.sysess.sympathy.list.itemtolist" uuid="{049e48bf-1247-4165-91ea-649d3ad6a4da}" x="2275.0" y="2275.0">
    <label>Item to List</label>
    <version>1.0</version>
    <parameters type="json">
    {
      "n": {
        "editor": null,
        "label": "Repeat number of times",
        "order": 0,
        "type": "integer",
        "value": 100
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="item" scheme="hdf5" type="image" type_base="&lt;a&gt;" uuid="{93adf674-5abc-4c7f-b7d8-4f21cf22f8cf}">
        <label>Input Item</label>
      </input>
      <output key="list" scheme="hdf5" type="[image]" type_base="[&lt;a&gt;]" uuid="{256eef58-0501-4158-aed1-5f70d16d5dcb}">
        <label>Item as List</label>
      </output>
    </ports>
  </node>
  <node id="syip.imagemorphology" uuid="{15f62870-b333-4b78-87d6-0519395a29de}" x="2375.0" y="2075.0">
    <label>Binary closing</label>
    <version>0.1</version>
    <parameters type="json">
    {
      "algorithm": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "binary, closing"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="target" scheme="hdf5" type="image" type_base="image" uuid="{5454c005-0804-49c9-8dda-c3f8875871b5}">
        <label>Target image</label>
      </input>
      <input key="structuring_element" scheme="hdf5" type="image" type_base="image" uuid="{388176c7-5183-4c42-bdd3-93135a8a0c6e}">
        <label>Structuring element</label>
      </input>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{16daeb3f-8d23-4f9a-a9c2-987cba0cc9f2}">
        <label>Resulting image</label>
      </output>
    </ports>
  </node>
  <node id="syip.imagegenerate" uuid="{5ec1da2c-499e-4e52-8594-9eb060f50a9a}" x="2225.0" y="2175.0">
    <label>Structure
element</label>
    <version>0.1</version>
    <parameters type="json">
    {
      "algorithm": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "disk"
      },
      "channels": {
        "editor": null,
        "label": "",
        "order": 1,
        "type": "integer",
        "value": 1
      },
      "height": {
        "editor": null,
        "label": "",
        "order": 5,
        "type": "integer",
        "value": 512
      },
      "other size": {
        "editor": null,
        "label": "",
        "order": 4,
        "type": "integer",
        "value": 5
      },
      "size": {
        "editor": null,
        "label": "",
        "order": 3,
        "type": "integer",
        "value": 5
      },
      "type": "group",
      "width": {
        "editor": null,
        "label": "",
        "order": 2,
        "type": "integer",
        "value": 512
      }
    }
    </parameters>
    <ports>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{3b5b4576-a095-42c1-ab62-ff6c107eeeac}">
        <label>Resulting image</label>
      </output>
    </ports>
  </node>
  <node id="syip.threshold" uuid="{6ad78ce5-77cc-4976-a352-88f9991a683e}" x="2225.0" y="2075.0">
    <label>Threshold image</label>
    <version>0.1</version>
    <parameters type="json">
    {
      "algorithm": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "adaptive"
      },
      "auto threshold method": {
        "editor": null,
        "label": "",
        "order": 2,
        "type": "string",
        "value": "otsu"
      },
      "kernel size": {
        "editor": null,
        "label": "",
        "order": 5,
        "type": "integer",
        "value": 3
      },
      "offset": {
        "editor": null,
        "label": "",
        "order": 3,
        "type": "float",
        "value": -0.1
      },
      "sigma": {
        "editor": null,
        "label": "",
        "order": 6,
        "type": "float",
        "value": 21.0
      },
      "threshold": {
        "editor": null,
        "label": "",
        "order": 4,
        "type": "float",
        "value": 0.15
      },
      "threshold method": {
        "editor": null,
        "label": "",
        "order": 1,
        "type": "string",
        "value": "gaussian"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{8f22510b-4f3e-44a5-ab9e-215d2c90aab7}">
        <label>source image to filter</label>
      </input>
      <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{835a3baa-66c6-4663-8ffb-49ee58b75f48}">
        <label>result after filtering</label>
      </output>
    </ports>
  </node>
  <node id="syip.imagemorphology" uuid="{9446cab8-b8b4-4ee7-a0fd-11f8213db595}" x="2525.0" y="2075.0">
    <label>Binary opening</label>
    <version>0.1</version>
    <parameters type="json">
    {
      "algorithm": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "binary, opening"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="target" scheme="hdf5" type="image" type_base="image" uuid="{4f1e4bea-e5b8-4c62-86ef-15522ab4768f}">
        <label>Target image</label>
      </input>
      <input key="structuring_element" scheme="hdf5" type="image" type_base="image" uuid="{1a031ee2-3190-4021-b8f5-88ffc43be4c3}">
        <label>Structuring element</label>
      </input>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{4f1d014e-7ddc-4f1d-a2db-62e3a1c0dd79}">
        <label>Resulting image</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.tuple.ziptuple2" uuid="{95328b99-0f03-4983-bbe8-663fc6415ac6}" x="2900.0" y="2275.0">
    <label>Zip Inputs to Lambda</label>
    <version>1.0</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="input" scheme="hdf5" type="[image]" type_base="[&lt;a&gt;]" uuid="{3c37e913-1fba-4a68-a35d-254a25105138}">
        <label>Input</label>
      </input>
      <input key="input" scheme="hdf5" type="[image]" type_base="[&lt;b&gt;]" uuid="{da1f5351-ddf9-44e2-9e99-d2f18e6210d9}">
        <label>Input</label>
      </input>
      <output key="output" scheme="hdf5" type="[(image, image)]" type_base="[(&lt;a&gt;, &lt;b&gt;)]" uuid="{60d0ff81-0ea0-4b0e-bbc6-80f5e7b4abe4}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.map" uuid="{adb74e2a-ac45-46c7-b5b2-6102c98402db}" x="3025.0" y="2075.0">
    <label>Map</label>
    <version>1.0</version>
    <parameters type="json">
    {
      "fail_strategy": {
        "editor": {
          "display": null,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Action on exception",
        "list": ["Error", "Create Empty Item", "Skip Item"],
        "mode": "selected",
        "order": 0,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": ["Error"]
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="Function" scheme="hdf5" type="(image, image) -&gt; image" type_base="&lt;a&gt; -&gt; &lt;b&gt;" uuid="{c805232f-fd8c-4266-9567-96ff013b0b76}">
        <label>Lambda Function to Map</label>
      </input>
      <input key="List" scheme="hdf5" type="[(image, image)]" type_base="[&lt;a&gt;]" uuid="{fa24db4e-6e7c-4897-9deb-640310ff02e5}">
        <label>Argument List</label>
      </input>
      <output key="List" scheme="hdf5" type="[image]" type_base="[&lt;b&gt;]" uuid="{7e264d4e-d0a3-4ce0-982e-ee87999c2b4e}">
        <label>Output List</label>
      </output>
    </ports>
  </node>
  <node id="syip.image2list" uuid="{ca1449ef-e909-44f6-ad7a-14b0bf7bd0c3}" x="2825.0" y="2075.0">
    <label>List objects 
as a mask</label>
    <version>0.1</version>
    <parameters type="json">
    {
      "algorithm": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "from labels"
      },
      "do background": {
        "editor": null,
        "label": "",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{c6835cbe-9b34-432b-88c5-82cf5754d234}">
        <label>source image</label>
      </input>
      <output key="results" scheme="hdf5" type="[image]" type_base="[image]" uuid="{d7f31608-b4c1-4fb8-be05-347a34e22569}">
        <label>Resulting list of images</label>
      </output>
    </ports>
  </node>
  <node id="syip.exampleimage" uuid="{ebf5f23b-35df-4242-8198-dd79154e90ba}" x="2075.0" y="2075.0">
    <label>Example image</label>
    <version>0.1</version>
    <parameters type="json">
    {
      "source": {
        "editor": {
          "options": ["astronaut", "camera", "checkerboard", "chelsea (cat)", "clock", "coffee", "coins", "horse", "hubble deep field", "immunohistochemistry", "moon", "rocket", "text"],
          "type": "combobox"
        },
        "label": "Image:",
        "order": 0,
        "type": "string",
        "value": "coins"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{40a2f887-65b0-44da-9b23-f17b84b70af6}">
        <label>Output image</label>
      </output>
    </ports>
  </node>
  <node id="syip.imagegenerate" uuid="{f54e7512-cd51-47c6-b4bd-fb4de4ce50bb}" x="2375.0" y="2175.0">
    <label>Structure
element</label>
    <version>0.1</version>
    <parameters type="json">
    {
      "algorithm": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "disk"
      },
      "channels": {
        "editor": null,
        "label": "",
        "order": 1,
        "type": "integer",
        "value": 1
      },
      "height": {
        "editor": null,
        "label": "",
        "order": 5,
        "type": "integer",
        "value": 512
      },
      "other size": {
        "editor": null,
        "label": "",
        "order": 4,
        "type": "integer",
        "value": 5
      },
      "size": {
        "editor": null,
        "label": "",
        "order": 3,
        "type": "integer",
        "value": 11
      },
      "type": "group",
      "width": {
        "editor": null,
        "label": "",
        "order": 2,
        "type": "integer",
        "value": 512
      }
    }
    </parameters>
    <ports>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{d03d2670-ce4a-4423-9097-8276f4c298a1}">
        <label>Resulting image</label>
      </output>
    </ports>
  </node>
  <node id="syip.morphology_single_input" uuid="{fa596a1d-0ad4-4ec8-bbb7-2d0dca6179ec}" x="2675.0" y="2075.0">
    <label>Morphology (single input)</label>
    <version>0.1</version>
    <parameters type="json">
    {
      "algorithm": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "labeling"
      },
      "diagonal neighborhood": {
        "editor": null,
        "label": "",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "n": {
        "editor": null,
        "label": "",
        "order": 2,
        "type": "integer",
        "value": 12
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{8d9a794a-e969-49cc-8259-064386e04e15}">
        <label>source image to filter</label>
      </input>
      <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{563cbd42-adcf-476d-98d5-6817e03dc6ce}">
        <label>result after filtering</label>
      </output>
    </ports>
  </node>
  <connection type="[image]" uuid="{1a0c5840-f90d-4c09-8c2b-d400574c9143}">
    <source node="{049e48bf-1247-4165-91ea-649d3ad6a4da}" port="{256eef58-0501-4158-aed1-5f70d16d5dcb}"/>
    <destination node="{95328b99-0f03-4983-bbe8-663fc6415ac6}" port="{da1f5351-ddf9-44e2-9e99-d2f18e6210d9}"/>
  </connection>
  <connection type="image" uuid="{2c4533a9-90a2-4347-b21f-f101d7d6b06a}">
    <source node="{ebf5f23b-35df-4242-8198-dd79154e90ba}" port="{40a2f887-65b0-44da-9b23-f17b84b70af6}"/>
    <destination node="{6ad78ce5-77cc-4976-a352-88f9991a683e}" port="{8f22510b-4f3e-44a5-ab9e-215d2c90aab7}"/>
  </connection>
  <connection type="image" uuid="{4561464d-ebc8-441d-9f56-7972333f1333}">
    <source node="{6ad78ce5-77cc-4976-a352-88f9991a683e}" port="{835a3baa-66c6-4663-8ffb-49ee58b75f48}"/>
    <destination node="{15f62870-b333-4b78-87d6-0519395a29de}" port="{5454c005-0804-49c9-8dda-c3f8875871b5}"/>
  </connection>
  <connection type="image" uuid="{4a90e8c5-91c6-4926-9fca-4cf44d05d06b}">
    <source node="{15f62870-b333-4b78-87d6-0519395a29de}" port="{16daeb3f-8d23-4f9a-a9c2-987cba0cc9f2}"/>
    <destination node="{9446cab8-b8b4-4ee7-a0fd-11f8213db595}" port="{4f1e4bea-e5b8-4c62-86ef-15522ab4768f}"/>
  </connection>
  <connection type="(image, image) -&gt; image" uuid="{75dc8b37-8ffe-4463-bedf-41b9e9380042}">
    <source node="{862b362e-f3ec-41e5-8b24-8406d481ad74}" port="{dcd8b1f9-d125-4492-a158-3e5f7c9ed1d8}"/>
    <destination node="{adb74e2a-ac45-46c7-b5b2-6102c98402db}" port="{c805232f-fd8c-4266-9567-96ff013b0b76}"/>
  </connection>
  <connection type="image" uuid="{a47e7776-7fee-4919-ad3e-f2d9f8313c9b}">
    <source node="{fa596a1d-0ad4-4ec8-bbb7-2d0dca6179ec}" port="{563cbd42-adcf-476d-98d5-6817e03dc6ce}"/>
    <destination node="{ca1449ef-e909-44f6-ad7a-14b0bf7bd0c3}" port="{c6835cbe-9b34-432b-88c5-82cf5754d234}"/>
  </connection>
  <connection type="[(image, image)]" uuid="{b6374eef-7588-4c24-87bd-2cacbc648a68}">
    <source node="{95328b99-0f03-4983-bbe8-663fc6415ac6}" port="{60d0ff81-0ea0-4b0e-bbc6-80f5e7b4abe4}"/>
    <destination node="{adb74e2a-ac45-46c7-b5b2-6102c98402db}" port="{fa24db4e-6e7c-4897-9deb-640310ff02e5}"/>
  </connection>
  <connection type="[image]" uuid="{c9968e97-5003-4013-b32b-168ff178e30a}">
    <source node="{ca1449ef-e909-44f6-ad7a-14b0bf7bd0c3}" port="{d7f31608-b4c1-4fb8-be05-347a34e22569}"/>
    <destination node="{95328b99-0f03-4983-bbe8-663fc6415ac6}" port="{3c37e913-1fba-4a68-a35d-254a25105138}"/>
  </connection>
  <connection type="image" uuid="{cc994193-3af8-496e-b152-8c5ad4447b82}">
    <source node="{5ec1da2c-499e-4e52-8594-9eb060f50a9a}" port="{3b5b4576-a095-42c1-ab62-ff6c107eeeac}"/>
    <destination node="{15f62870-b333-4b78-87d6-0519395a29de}" port="{388176c7-5183-4c42-bdd3-93135a8a0c6e}"/>
  </connection>
  <connection type="image" uuid="{eac69d87-c825-4803-8971-1c8bc0d32a0c}">
    <source node="{ebf5f23b-35df-4242-8198-dd79154e90ba}" port="{40a2f887-65b0-44da-9b23-f17b84b70af6}"/>
    <destination node="{049e48bf-1247-4165-91ea-649d3ad6a4da}" port="{93adf674-5abc-4c7f-b7d8-4f21cf22f8cf}"/>
  </connection>
  <connection type="image" uuid="{ef04b082-0646-4a93-a36d-f0d3827775f2}">
    <source node="{f54e7512-cd51-47c6-b4bd-fb4de4ce50bb}" port="{d03d2670-ce4a-4423-9097-8276f4c298a1}"/>
    <destination node="{9446cab8-b8b4-4ee7-a0fd-11f8213db595}" port="{1a031ee2-3190-4021-b8f5-88ffc43be4c3}"/>
  </connection>
  <connection type="image" uuid="{f432a12c-ab51-4a8a-8d22-178c35409b7b}">
    <source node="{9446cab8-b8b4-4ee7-a0fd-11f8213db595}" port="{4f1d014e-7ddc-4f1d-a2db-62e3a1c0dd79}"/>
    <destination node="{fa596a1d-0ad4-4ec8-bbb7-2d0dca6179ec}" port="{8d9a794a-e969-49cc-8259-064386e04e15}"/>
  </connection>
  <text color="Beige" height="150.0" uuid="{38c7a8b0-7b82-49b8-a0dc-037410d4026f}" width="400.0" x="2075.0" y="1850.0">Example that shows how to iterate over each found object in an image using lambda expression. 

Preprocess image by thresholding/morphology and identify objects using labeling. Lambda expression combines found bitmasks with original image and centers in image. </text>
</flow>
