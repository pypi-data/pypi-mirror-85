<?xml version='1.0' encoding='ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" id="" is_locked="False" uuid="{9d7a8b8d-13a6-4913-aca6-fc67b567e471}" width="50.0" x="0.0" y="0.0">
  <label></label>
  <description></description>
  <author></author>
  <copyright></copyright>
  <version></version>
  <min_version></min_version>
  <aggregation type="json">null</aggregation>
  <libraries type="json">[]</libraries>
  <pythonpaths type="json">[]</pythonpaths>
  <overrides type="json">{}</overrides>
  <environment type="json">{}</environment>
  <parameters type="json">{"environment": {}}</parameters>
  <ports/>
  <node id="syip.exampleimage" uuid="{1a28790a-a0e4-434f-8599-f21b83528686}" x="1300.0" y="1950.0">
    <label>Example Image</label>
    <description>Loads an image from the built-in default example images in scikit-image</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "source": {"description": "Selected predefined image", "label": "Image", "order": 0, "type": "string", "value": "coffee", "editor": {"display": null, "include_empty": false, "type": "combobox", "options": ["astronaut", "camera", "candy", "checkerboard", "chelsea (cat)", "clock", "coffee", "coins", "horse", "hubble deep field", "immunohistochemistry", "moon", "rocket", "text"]}}}</parameters>
    <ports>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{e7375330-7d01-42c5-a0c3-382aac7bb139}">
        <label>Output image</label>
        <description>Output image</description>
      </output>
    </ports>
  </node>
  <node id="syip.splitchannels" uuid="{302913c9-5178-4e00-8c60-f4c9ee98ef2b}" x="1675.0" y="1800.0">
    <label>Split Image Channels:

Hue, Sat (top)
Value (bottom)</label>
    <description>Copies the given channels from the input image to the first output image, remaining channels are copied to second output image</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "selected_channels": {"description": "Comma separated list of channels to send to first image output.\n\nCommon channel numbers and names:\n   0 (red/gray), 1 (green), 2 (blue).\n   Alpha is always last channel.", "editor": null, "label": "selected channels", "order": 0, "type": "string", "value": "hue, saturation"}}</parameters>
    <ports>
      <input key="input" scheme="hdf5" type="image" type_base="image" uuid="{acce82d7-494e-433a-af30-c6221d7639ff}">
        <label>Input image</label>
        <description>Input image</description>
      </input>
      <output key="output1" scheme="hdf5" type="image" type_base="image" uuid="{69770816-14a6-43c3-82a8-b73ff3ef7cd4}">
        <label>Image with selected channels</label>
        <description>Image with selected channels</description>
      </output>
      <output key="output2" scheme="hdf5" type="image" type_base="image" uuid="{4c67180b-4237-4b66-939c-23ed147fb6db}">
        <label>All non-selected channels</label>
        <description>All non-selected channels</description>
      </output>
    </ports>
  </node>
  <node id="syip.concatchannels" uuid="{5be05a54-ea8d-46c8-8139-bf6728b440bb}" x="2100.0" y="1800.0">
    <label>Merge Image Channels</label>
    <description>Creates a new image with all the channels in the two input images</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="input1" scheme="hdf5" type="image" type_base="image" uuid="{16a6595b-d5d4-422d-b056-35c68728980d}">
        <label>Input image</label>
        <description>Input image</description>
      </input>
      <input key="input2" scheme="hdf5" type="image" type_base="image" uuid="{07a50456-e6a5-4aa4-9ffa-e93acda9a8d5}">
        <label>Input image</label>
        <description>Input image</description>
      </input>
      <output key="output" scheme="hdf5" type="image" type_base="image" uuid="{14430ca9-dc5a-48a3-9f23-aba96fded566}">
        <label>Resulting image with all channels</label>
        <description>Resulting image with all channels</description>
      </output>
    </ports>
  </node>
  <node id="syip.overlay" uuid="{5e7b4636-501c-46a5-92c9-ff62993800ee}" x="2425.0" y="1950.0">
    <label>Overlay Images

50% top image, 50% bottom image</label>
    <description>Combines two images by layering the first (top port) image on top of the other (bottom port) image
, with choice for combining operator. Images must have the same number of channels</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "layer"}, "alpha": {"description": "", "editor": null, "label": "", "order": 1, "type": "float", "value": 0.5}, "use alpha": {"description": "", "editor": null, "label": "", "order": 2, "type": "boolean", "value": false}, "use alpha channel": {"description": "", "editor": null, "label": "", "order": 2, "type": "boolean", "value": false}}</parameters>
    <ports>
      <input key="images" scheme="hdf5" type="image" type_base="image" uuid="{6355278f-de5b-408f-a459-b17aa5fe0297}">
        <label>Input images</label>
        <description>Input images</description>
      </input>
      <input key="images" scheme="hdf5" type="image" type_base="image" uuid="{d91f1a47-3194-4f1b-b3f2-c0b593aa2855}">
        <label>Input images</label>
        <description>Input images</description>
      </input>
      <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{a41fd79e-f8d4-4250-b4c9-454c4b867f26}">
        <label>result after filtering</label>
        <description>result after filtering</description>
      </output>
    </ports>
  </node>
  <node id="syip.color_space_conversion" uuid="{75bf465f-9ba3-437e-82b2-72bcd7ce900a}" x="2275.0" y="1800.0">
    <label>Color space conversion

HSV to RGB</label>
    <description>Converts each pixel in a multi-channel image into another colour space</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "hsv2rgb"}, "cmap": {"description": "", "editor": null, "label": "", "order": 1, "type": "string", "value": "viridis"}}</parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{92236196-7d35-45c4-8a4d-d292c8ec040e}">
        <label>source image to filter</label>
        <description>source image to filter</description>
      </input>
      <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{f1ad2dc1-01c9-410a-9c5c-b217347d9abc}">
        <label>result after filtering</label>
        <description>result after filtering</description>
      </output>
    </ports>
  </node>
  <node id="syip.color_space_conversion" uuid="{8aa8fa50-17c7-4bee-939d-f33f0c507ba5}" x="1500.0" y="1800.0">
    <label>Color space conversion

RGB to HSV</label>
    <description>Converts each pixel in a multi-channel image into another colour space</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "rgb2hsv"}, "cmap": {"description": "", "editor": null, "label": "", "order": 1, "type": "string", "value": "viridis"}}</parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{827c5ae3-5ce4-43bc-a350-225f5af949f4}">
        <label>source image to filter</label>
        <description>source image to filter</description>
      </input>
      <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{15fb2784-df0a-491f-b58c-f1c816fbfc15}">
        <label>result after filtering</label>
        <description>result after filtering</description>
      </output>
    </ports>
  </node>
  <node id="syip.color_range_conversion" uuid="{9049d898-517e-430b-bbf2-9a604f811e04}" x="1875.0" y="1850.0">
    <label>Color range conversion

Histogram equalization</label>
    <description>Changes the range and distribution of values for all pixels</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "algorithm": {"description": "", "editor": null, "label": "", "order": 0, "type": "string", "value": "histogram equalization"}, "cutoff": {"description": "", "editor": null, "label": "", "order": 1, "type": "float", "value": 0.5}, "inverse": {"description": "", "editor": null, "label": "", "order": 2, "type": "boolean", "value": false}, "adaptive kernel size": {"description": "", "editor": null, "label": "", "order": 3, "type": "integer", "value": 64}, "scale": {"description": "", "editor": null, "label": "", "order": 4, "type": "float", "value": 1.0}, "bins": {"description": "", "editor": null, "label": "", "order": 5, "type": "integer", "value": 768}, "sigma": {"description": "", "editor": null, "label": "", "order": 6, "type": "float", "value": 1.0}, "gamma": {"description": "", "editor": null, "label": "", "order": 7, "type": "float", "value": 1.0}, "gain": {"description": "", "editor": null, "label": "", "order": 8, "type": "float", "value": 10.0}}</parameters>
    <ports>
      <input key="source" scheme="hdf5" type="image" type_base="image" uuid="{8c67bb0b-50e5-48e7-9898-522cc08d3207}">
        <label>source image to filter</label>
        <description>source image to filter</description>
      </input>
      <output key="result" scheme="hdf5" type="image" type_base="image" uuid="{86005c93-41df-411d-8bab-27bd8ff1b430}">
        <label>result after filtering</label>
        <description>result after filtering</description>
      </output>
    </ports>
  </node>
  <connection type="image" uuid="{15cc53dc-de99-4add-9571-3814cbe48e30}">
    <source node="{1a28790a-a0e4-434f-8599-f21b83528686}" port="{e7375330-7d01-42c5-a0c3-382aac7bb139}"/>
    <destination node="{5e7b4636-501c-46a5-92c9-ff62993800ee}" port="{d91f1a47-3194-4f1b-b3f2-c0b593aa2855}"/>
  </connection>
  <connection type="image" uuid="{5909952b-91f8-43b5-9691-8b395a3b7098}">
    <source node="{302913c9-5178-4e00-8c60-f4c9ee98ef2b}" port="{4c67180b-4237-4b66-939c-23ed147fb6db}"/>
    <destination node="{9049d898-517e-430b-bbf2-9a604f811e04}" port="{8c67bb0b-50e5-48e7-9898-522cc08d3207}"/>
  </connection>
  <connection type="image" uuid="{7803b3f3-bb68-40eb-a7e4-5afe1973da46}">
    <source node="{5be05a54-ea8d-46c8-8139-bf6728b440bb}" port="{14430ca9-dc5a-48a3-9f23-aba96fded566}"/>
    <destination node="{75bf465f-9ba3-437e-82b2-72bcd7ce900a}" port="{92236196-7d35-45c4-8a4d-d292c8ec040e}"/>
  </connection>
  <connection type="image" uuid="{8056ea2c-e315-40af-a5af-9b2071e863a5}">
    <source node="{75bf465f-9ba3-437e-82b2-72bcd7ce900a}" port="{f1ad2dc1-01c9-410a-9c5c-b217347d9abc}"/>
    <destination node="{5e7b4636-501c-46a5-92c9-ff62993800ee}" port="{6355278f-de5b-408f-a459-b17aa5fe0297}"/>
  </connection>
  <connection type="image" uuid="{9b47c5b8-fd2e-4fb0-b6fa-1a8f5ca08acd}">
    <source node="{8aa8fa50-17c7-4bee-939d-f33f0c507ba5}" port="{15fb2784-df0a-491f-b58c-f1c816fbfc15}"/>
    <destination node="{302913c9-5178-4e00-8c60-f4c9ee98ef2b}" port="{acce82d7-494e-433a-af30-c6221d7639ff}"/>
  </connection>
  <connection type="image" uuid="{af23444c-b7d7-4173-b610-cf5df3faf92e}">
    <source node="{9049d898-517e-430b-bbf2-9a604f811e04}" port="{86005c93-41df-411d-8bab-27bd8ff1b430}"/>
    <destination node="{5be05a54-ea8d-46c8-8139-bf6728b440bb}" port="{07a50456-e6a5-4aa4-9ffa-e93acda9a8d5}"/>
  </connection>
  <connection type="image" uuid="{fa0eb71b-e0bd-449a-aaa9-7d99e31392bb}">
    <source node="{302913c9-5178-4e00-8c60-f4c9ee98ef2b}" port="{69770816-14a6-43c3-82a8-b73ff3ef7cd4}"/>
    <destination node="{5be05a54-ea8d-46c8-8139-bf6728b440bb}" port="{16a6595b-d5d4-422d-b056-35c68728980d}"/>
  </connection>
  <connection type="image" uuid="{fdd8f941-62f0-4476-8001-7ab6250aa58e}">
    <source node="{1a28790a-a0e4-434f-8599-f21b83528686}" port="{e7375330-7d01-42c5-a0c3-382aac7bb139}"/>
    <destination node="{8aa8fa50-17c7-4bee-939d-f33f0c507ba5}" port="{827c5ae3-5ce4-43bc-a350-225f5af949f4}"/>
  </connection>
  <text color="Beige" height="100.0" uuid="{29aae7cf-841e-4c1d-81a3-bfa17eab967d}" width="700.0" x="1450.0" y="1675.0">Use a "histogram equalization" to stretch the light/dark values. This is done in the Value channel of the Hue-Saturation-Value colour space, and afterwards converted back to RGB.

Finally we mix in only 50% of this image onto the original to make the effect more subtle.</text>
  <text color="Beige" height="125.0" uuid="{8eb7dd9d-cf76-4586-b76f-ae12b92c49ad}" width="275.0" x="1250.0" y="2050.0">RGB images like Coffee or Chelsea work good for this example. 

Astronaut image already have a good colour range. </text>
</flow>
