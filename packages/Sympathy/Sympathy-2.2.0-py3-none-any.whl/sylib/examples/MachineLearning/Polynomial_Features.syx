<?xml version='1.0' encoding='ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" id="" is_locked="False" uuid="{2b2b1170-6db4-415f-907a-ce0566e18c77}" width="50.0" x="0.0" y="0.0">
  <label></label>
  <description></description>
  <author></author>
  <copyright></copyright>
  <version></version>
  <source></source>
  <min_version></min_version>
  <aggregation type="json"><![CDATA[null]]></aggregation>
  <libraries type="json"><![CDATA[[]]]></libraries>
  <pythonpaths type="json"><![CDATA[[]]]></pythonpaths>
  <overrides type="json"><![CDATA[{}]]></overrides>
  <parameters type="json"><![CDATA[{}]]></parameters>
  <ports/>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.example_datasets" uuid="{013bd3fe-be0c-4656-b458-a58c5eb93d83}" width="50.0" x="2025.0" y="2150.0">
    <label>Example datasets</label>
    <description>Exposes the example datasets from sklearn</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "dataset": {"description": "Choose from one of the default toy datasets", "label": "Dataset", "order": 0, "type": "string", "value": "Iris", "editor": {"type": "combobox", "options": ["Digits", "Boston", "Diabetes", "linnerud", "Iris"]}}, "classnames": {"description": "Attempts to use class names as Y", "editor": null, "label": "Class names", "order": 1, "type": "boolean", "value": true}}]]></parameters>
    <ports>
      <output key="X" scheme="hdf5" type="table" type_base="table" uuid="{8854e8ac-3f78-471b-b735-a2f80282be92}">
        <label>X</label>
        <description>X</description>
      </output>
      <output key="Y" scheme="hdf5" type="table" type_base="table" uuid="{92ddb1c7-95d7-494e-af9c-1bb03a3d5047}">
        <label>Y</label>
        <description>Y</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.fit" port_format="1.1" uuid="{02894b6b-c376-43f6-8951-c0eb2d1a5a56}" width="50.0" x="2329.0" y="1841.5">
    <label>Fit</label>
    <description>Trains a model to predict Y given X</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{7424af0f-f96d-4990-a4db-cabc70043ab0}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{b1088b60-2ad6-4dbd-ba00-0962947e2b3d}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y0" scheme="hdf5" type="table" type_base="table" uuid="{8bbe9c7e-ebae-484a-a523-35fe23f3f20b}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{8dafde70-8c27-4939-9ada-fba1289e5d7a}">
        <label>Output model</label>
        <description>Output model</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.example_datasets" uuid="{1ccd7f36-a1a9-40d6-8297-77e3fd93096a}" width="50.0" x="1275.0" y="1875.0">
    <label>Example datasets</label>
    <description>Exposes the example datasets from sklearn</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "dataset": {"description": "Choose from one of the default toy datasets", "label": "Dataset", "order": 0, "type": "string", "value": "Iris", "editor": {"type": "combobox", "options": ["Digits", "Boston", "Diabetes", "linnerud", "Iris"]}}, "classnames": {"description": "Attempts to use class names as Y", "editor": null, "label": "Class names", "order": 1, "type": "boolean", "value": true}}]]></parameters>
    <ports>
      <output key="X" scheme="hdf5" type="table" type_base="table" uuid="{a35d7038-54ab-4ce7-931e-2fc72f1f778f}">
        <label>X</label>
        <description>X</description>
      </output>
      <output key="Y" scheme="hdf5" type="table" type_base="table" uuid="{26e65000-f4ab-4225-868d-23af0aea073a}">
        <label>Y</label>
        <description>Y</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.logisticregression" uuid="{370dcf9d-a8c1-4967-befc-5bfa2f3f6431}" width="50.0" x="1425.0" y="1775.0">
    <label>Logistic Regression</label>
    <description>Support vector machine (SVM) based classifier</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "warm_start": {"description": "When set to True, reuse the solution of the previous call to fit as\ninitialization, otherwise, just erase the previous solution.\nUseless for liblinear solver.\n\n.. versionadded:: 0.17\n   *warm_start* to support *lbfgs*, *newton-cg*, *sag* solvers.\n", "editor": null, "label": "warm_start", "order": 0, "type": "string", "value": "False"}, "C": {"description": "Inverse of regularization strength; must be a positive float.\nLike in support vector machines, smaller values specify stronger\nregularization.\n", "editor": null, "label": "C", "order": 1, "type": "string", "value": "1.0"}, "n_jobs": {"description": "Number of CPU cores used during the cross-validation loop. If given\na value of -1, all cores are used.\n", "editor": null, "label": "n_jobs", "order": 2, "type": "string", "value": "1"}, "intercept_scaling": {"description": "Useful only when the solver 'liblinear' is used\nand self.fit_intercept is set to True. In this case, x becomes\n[x, self.intercept_scaling],\ni.e. a \"synthetic\" feature with constant value equal to\nintercept_scaling is appended to the instance vector.\nThe intercept becomes ``intercept_scaling * synthetic_feature_weight``.\n\nNote! the synthetic feature weight is subject to l1/l2 regularization\nas all other features.\nTo lessen the effect of regularization on synthetic feature weight\n(and therefore on the intercept) intercept_scaling has to be increased.\n", "editor": null, "label": "intercept_scaling", "order": 3, "type": "string", "value": "1.0"}, "fit_intercept": {"description": "Specifies if a constant (a.k.a. bias or intercept) should be\nadded to the decision function.\n", "editor": null, "label": "fit_intercept", "order": 4, "type": "string", "value": "True"}, "random_state": {"description": "The seed of the pseudo random number generator to use when\nshuffling the data. Used only in solvers 'sag' and 'liblinear'.\n", "editor": null, "label": "random_state", "order": 5, "type": "string", "value": "None"}, "max_iter": {"description": "Useful only for the newton-cg, sag and lbfgs solvers.\nMaximum number of iterations taken for the solvers to converge.\n", "editor": null, "label": "max_iter", "order": 6, "type": "string", "value": "100"}, "penalty": {"description": "Used to specify the norm used in the penalization. The 'newton-cg',\n'sag' and 'lbfgs' solvers support only l2 penalties.\n", "editor": null, "label": "penalty", "order": 7, "type": "string", "value": "l2"}, "multi_class": {"description": "Multiclass option can be either 'ovr' or 'multinomial'. If the option\nchosen is 'ovr', then a binary problem is fit for each label. Else\nthe loss minimised is the multinomial loss fit across\nthe entire probability distribution. Works only for the 'newton-cg',\n'sag' and 'lbfgs' solver.\n\n.. versionadded:: 0.18\n   Stochastic Average Gradient descent solver for 'multinomial' case.\n", "editor": null, "label": "multi_class", "order": 8, "type": "string", "value": "ovr"}, "tol": {"description": "Tolerance for stopping criteria.\n", "editor": null, "label": "tol", "order": 9, "type": "string", "value": "0.0001"}, "dual": {"description": "Dual or primal formulation. Dual formulation is only implemented for\nl2 penalty with liblinear solver. Prefer dual=False when\nn_samples > n_features.\n", "editor": null, "label": "dual", "order": 10, "type": "string", "value": "False"}, "solver": {"description": "Algorithm to use in the optimization problem.\n\n- For small datasets, 'liblinear' is a good choice, whereas 'sag' is\n    faster for large ones.\n- For multiclass problems, only 'newton-cg', 'sag' and 'lbfgs' handle\n    multinomial loss; 'liblinear' is limited to one-versus-rest\n    schemes.\n- 'newton-cg', 'lbfgs' and 'sag' only handle L2 penalty.\n\nNote that 'sag' fast convergence is only guaranteed on features with\napproximately the same scale. You can preprocess the data with a\nscaler from sklearn.preprocessing.\n\n.. versionadded:: 0.17\n   Stochastic Average Gradient descent solver.\n", "editor": null, "label": "solver", "order": 11, "type": "string", "value": "liblinear"}, "class_weight": {"description": "Weights associated with classes in the form ``{class_label: weight}``.\nIf not given, all classes are supposed to have weight one.\n\nThe \"balanced\" mode uses the values of y to automatically adjust\nweights inversely proportional to class frequencies in the input data\nas ``n_samples / (n_classes * np.bincount(y))``.\n\nNote that these weights will be multiplied with sample_weight (passed\nthrough the fit method) if sample_weight is specified.\n\n.. versionadded:: 0.17\n   *class_weight='balanced'* instead of deprecated\n   *class_weight='auto'*.\n", "editor": null, "label": "class_weight", "order": 12, "type": "string", "value": "None"}}]]></parameters>
    <ports>
      <output key="model" scheme="hdf5" type="model" type_base="model" uuid="{5e6e46c4-cef3-433d-b26a-883ea1c12008}">
        <label>Model</label>
        <description>Model</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.simple_split" uuid="{4f8ad601-6e6a-4bce-99c3-fe3a99738861}" width="50.0" x="2175.0" y="1900.0">
    <label>Simple train-test partitioning</label>
    <description>Splits input data into a training and a test dataset</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "test_size": {"description": "Size of test data as fraction (< 1) of all data", "editor": null, "label": "Test size", "order": 0, "type": "float", "value": 0.25}, "stratify": {"description": "Stratify data using Y as class labels", "editor": null, "label": "Stratify", "order": 1, "type": "boolean", "value": false}}]]></parameters>
    <ports>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{5438012d-a386-45b9-a2e3-046b9482bb41}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y" scheme="hdf5" type="table" type_base="table" uuid="{fcd1809d-a1a7-4b06-a24e-a83d961b9010}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <output key="X_train" scheme="hdf5" type="table" type_base="table" uuid="{a07a650a-35d2-4d90-9c8a-24265067ab2c}">
        <label>X_train</label>
        <description>X_train</description>
      </output>
      <output key="Y_train" scheme="hdf5" type="table" type_base="table" uuid="{480dfcf0-fed6-40e5-8d38-9e819963252a}">
        <label>Y_train</label>
        <description>Y_train</description>
      </output>
      <output key="X_test" scheme="hdf5" type="table" type_base="table" uuid="{b145587c-cbf2-4dfe-80ce-e9b9b3c59b36}">
        <label>X_test</label>
        <description>X_test</description>
      </output>
      <output key="Y_test" scheme="hdf5" type="table" type_base="table" uuid="{d5422767-e985-4695-befd-5ade999b5746}">
        <label>Y_test</label>
        <description>Y_test</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.polynomial_features" uuid="{6b798993-5138-4e9b-abb8-3d31f8590120}" width="50.0" x="2025.0" y="2075.0">
    <label>Polynomial Features</label>
    <description>Replaces missing values in a dataset with a computed value infered from the remained of the dataset. </description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "include_bias": {"description": "If True (default), then include a bias column, the feature in which\nall polynomial powers are zero (i.e. a column of ones - acts as an\nintercept term in a linear model).\n", "editor": null, "label": "include_bias", "order": 0, "type": "string", "value": "True"}, "interaction_only": {"description": "If true, only interaction features are produced: features that are\nproducts of at most ``degree`` *distinct* input features (so not\n``x ** 2``, ``x * x ** 3``, etc.).\n", "editor": null, "label": "interaction_only", "order": 1, "type": "string", "value": "False"}, "degree": {"description": "The degree of the polynomial features. Default = 2.\n", "editor": null, "label": "degree", "order": 2, "type": "string", "value": "2"}}]]></parameters>
    <ports>
      <output key="model" scheme="hdf5" type="model" type_base="model" uuid="{ec10a6df-7827-43d6-837b-0443f065b1af}">
        <label>Model</label>
        <description>Model</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.logisticregression" uuid="{8e49050b-14fd-4d69-8998-f2756b1648f9}" width="50.0" x="2025.0" y="1800.0">
    <label>Logistic Regression</label>
    <description>Support vector machine (SVM) based classifier</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "warm_start": {"description": "When set to True, reuse the solution of the previous call to fit as\ninitialization, otherwise, just erase the previous solution.\nUseless for liblinear solver.\n\n.. versionadded:: 0.17\n   *warm_start* to support *lbfgs*, *newton-cg*, *sag* solvers.\n", "editor": null, "label": "warm_start", "order": 0, "type": "string", "value": "False"}, "C": {"description": "Inverse of regularization strength; must be a positive float.\nLike in support vector machines, smaller values specify stronger\nregularization.\n", "editor": null, "label": "C", "order": 1, "type": "string", "value": "1.0"}, "n_jobs": {"description": "Number of CPU cores used during the cross-validation loop. If given\na value of -1, all cores are used.\n", "editor": null, "label": "n_jobs", "order": 2, "type": "string", "value": "1"}, "intercept_scaling": {"description": "Useful only when the solver 'liblinear' is used\nand self.fit_intercept is set to True. In this case, x becomes\n[x, self.intercept_scaling],\ni.e. a \"synthetic\" feature with constant value equal to\nintercept_scaling is appended to the instance vector.\nThe intercept becomes ``intercept_scaling * synthetic_feature_weight``.\n\nNote! the synthetic feature weight is subject to l1/l2 regularization\nas all other features.\nTo lessen the effect of regularization on synthetic feature weight\n(and therefore on the intercept) intercept_scaling has to be increased.\n", "editor": null, "label": "intercept_scaling", "order": 3, "type": "string", "value": "1.0"}, "fit_intercept": {"description": "Specifies if a constant (a.k.a. bias or intercept) should be\nadded to the decision function.\n", "editor": null, "label": "fit_intercept", "order": 4, "type": "string", "value": "True"}, "random_state": {"description": "The seed of the pseudo random number generator to use when\nshuffling the data. Used only in solvers 'sag' and 'liblinear'.\n", "editor": null, "label": "random_state", "order": 5, "type": "string", "value": "None"}, "max_iter": {"description": "Useful only for the newton-cg, sag and lbfgs solvers.\nMaximum number of iterations taken for the solvers to converge.\n", "editor": null, "label": "max_iter", "order": 6, "type": "string", "value": "100"}, "penalty": {"description": "Used to specify the norm used in the penalization. The 'newton-cg',\n'sag' and 'lbfgs' solvers support only l2 penalties.\n", "editor": null, "label": "penalty", "order": 7, "type": "string", "value": "l2"}, "multi_class": {"description": "Multiclass option can be either 'ovr' or 'multinomial'. If the option\nchosen is 'ovr', then a binary problem is fit for each label. Else\nthe loss minimised is the multinomial loss fit across\nthe entire probability distribution. Works only for the 'newton-cg',\n'sag' and 'lbfgs' solver.\n\n.. versionadded:: 0.18\n   Stochastic Average Gradient descent solver for 'multinomial' case.\n", "editor": null, "label": "multi_class", "order": 8, "type": "string", "value": "ovr"}, "tol": {"description": "Tolerance for stopping criteria.\n", "editor": null, "label": "tol", "order": 9, "type": "string", "value": "0.0001"}, "dual": {"description": "Dual or primal formulation. Dual formulation is only implemented for\nl2 penalty with liblinear solver. Prefer dual=False when\nn_samples > n_features.\n", "editor": null, "label": "dual", "order": 10, "type": "string", "value": "False"}, "solver": {"description": "Algorithm to use in the optimization problem.\n\n- For small datasets, 'liblinear' is a good choice, whereas 'sag' is\n    faster for large ones.\n- For multiclass problems, only 'newton-cg', 'sag' and 'lbfgs' handle\n    multinomial loss; 'liblinear' is limited to one-versus-rest\n    schemes.\n- 'newton-cg', 'lbfgs' and 'sag' only handle L2 penalty.\n\nNote that 'sag' fast convergence is only guaranteed on features with\napproximately the same scale. You can preprocess the data with a\nscaler from sklearn.preprocessing.\n\n.. versionadded:: 0.17\n   Stochastic Average Gradient descent solver.\n", "editor": null, "label": "solver", "order": 11, "type": "string", "value": "liblinear"}, "class_weight": {"description": "Weights associated with classes in the form ``{class_label: weight}``.\nIf not given, all classes are supposed to have weight one.\n\nThe \"balanced\" mode uses the values of y to automatically adjust\nweights inversely proportional to class frequencies in the input data\nas ``n_samples / (n_classes * np.bincount(y))``.\n\nNote that these weights will be multiplied with sample_weight (passed\nthrough the fit method) if sample_weight is specified.\n\n.. versionadded:: 0.17\n   *class_weight='balanced'* instead of deprecated\n   *class_weight='auto'*.\n", "editor": null, "label": "class_weight", "order": 12, "type": "string", "value": "None"}}]]></parameters>
    <ports>
      <output key="model" scheme="hdf5" type="model" type_base="model" uuid="{07d6c8a0-7580-4cf1-9a4c-1aea1e73c965}">
        <label>Model</label>
        <description>Model</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.fit_transform" uuid="{9504b114-e2eb-4246-a16d-ddb6203b862f}" width="50.0" x="2175.0" y="2100.0">
    <label>Fit transform</label>
    <description>Fits a transform model to the given data and computes the transformed data</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "names method": {"description": "Method used to generate output names", "label": "Output names", "order": 0, "type": "string", "value": "From model", "editor": {"type": "combobox", "options": ["Copy from input", "By index", "From model"]}}}]]></parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{5206fb34-1740-4569-84db-23e4730b6c54}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{b4f2479f-c1a6-463e-be43-d917aa6f1567}">
        <label>Input table</label>
        <description>Input table</description>
      </input>
      <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{238d0908-9dae-445c-ad9b-df7b09619b68}">
        <label>Output model</label>
        <description>Output model</description>
      </output>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{447c3017-d54e-42e5-99ab-bf41654cba63}">
        <label>Output table</label>
        <description>Output table</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.polynomial_features" uuid="{a1e80ea9-f433-4385-b0ca-e5601023fe8b}" width="50.0" x="2025.0" y="1700.0">
    <label>Polynomial Features</label>
    <description>Replaces missing values in a dataset with a computed value infered from the remained of the dataset. </description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "include_bias": {"description": "If True (default), then include a bias column, the feature in which\nall polynomial powers are zero (i.e. a column of ones - acts as an\nintercept term in a linear model).\n", "editor": null, "label": "include_bias", "order": 0, "type": "string", "value": "True"}, "interaction_only": {"description": "If true, only interaction features are produced: features that are\nproducts of at most ``degree`` *distinct* input features (so not\n``x ** 2``, ``x * x ** 3``, etc.).\n", "editor": null, "label": "interaction_only", "order": 1, "type": "string", "value": "False"}, "degree": {"description": "The degree of the polynomial features. Default = 2.\n", "editor": null, "label": "degree", "order": 2, "type": "string", "value": "2"}}]]></parameters>
    <ports>
      <output key="model" scheme="hdf5" type="model" type_base="model" uuid="{1e6c6cad-e1d4-4dd8-8532-350ee93b3f85}">
        <label>Model</label>
        <description>Model</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.score" uuid="{b1520c2b-3360-4d92-a603-e3a325336d5b}" width="50.0" x="2479.0" y="1916.5">
    <label>Score</label>
    <description>Predicts Y' from X and compares with input Y. Returns mean accuracy (sum(Y' == Y) / rows)</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{389b006e-3426-4906-8cc1-ba325c19f04b}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{74ada421-fe68-4be2-ae1c-27ac1f0e1838}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y" scheme="hdf5" type="table" type_base="table" uuid="{3e9761b2-d933-4f40-9207-1031753074f4}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <output key="Score" scheme="hdf5" type="table" type_base="table" uuid="{8b87342e-c655-458b-8195-10dc8f81c49d}">
        <label>Score</label>
        <description>Score</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.example_datasets" uuid="{c90f4929-47f6-43b0-bd51-310e14dfd673}" width="50.0" x="2025.0" y="1900.0">
    <label>Example datasets</label>
    <description>Exposes the example datasets from sklearn</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "dataset": {"description": "Choose from one of the default toy datasets", "label": "Dataset", "order": 0, "type": "string", "value": "Iris", "editor": {"type": "combobox", "options": ["Digits", "Boston", "Diabetes", "linnerud", "Iris"]}}, "classnames": {"description": "Attempts to use class names as Y", "editor": null, "label": "Class names", "order": 1, "type": "boolean", "value": true}}]]></parameters>
    <ports>
      <output key="X" scheme="hdf5" type="table" type_base="table" uuid="{367faaf1-f3c8-4971-b915-4452e7171778}">
        <label>X</label>
        <description>X</description>
      </output>
      <output key="Y" scheme="hdf5" type="table" type_base="table" uuid="{1269f4a2-777d-428e-8a57-3f52c9ae8729}">
        <label>Y</label>
        <description>Y</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.simple_split" uuid="{d3280d05-491b-49a7-b3a9-9d9ecb53f09c}" width="50.0" x="1425.0" y="1875.0">
    <label>Simple train-test partitioning</label>
    <description>Splits input data into a training and a test dataset</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "test_size": {"description": "Size of test data as fraction (< 1) of all data", "editor": null, "label": "Test size", "order": 0, "type": "float", "value": 0.25}, "stratify": {"description": "Stratify data using Y as class labels", "editor": null, "label": "Stratify", "order": 1, "type": "boolean", "value": false}}]]></parameters>
    <ports>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{3e9445f2-2117-44f5-adf4-ec569d6de096}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y" scheme="hdf5" type="table" type_base="table" uuid="{51bc568e-c751-4976-bb39-8c1e87e5b0a0}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <output key="X_train" scheme="hdf5" type="table" type_base="table" uuid="{a257af79-810b-4e4a-b736-c0f05f33e6c0}">
        <label>X_train</label>
        <description>X_train</description>
      </output>
      <output key="Y_train" scheme="hdf5" type="table" type_base="table" uuid="{d32a72ac-8d5a-4557-bc03-2f0ea895c422}">
        <label>Y_train</label>
        <description>Y_train</description>
      </output>
      <output key="X_test" scheme="hdf5" type="table" type_base="table" uuid="{e74a2361-5f79-4ee9-ad7c-752b4573a50d}">
        <label>X_test</label>
        <description>X_test</description>
      </output>
      <output key="Y_test" scheme="hdf5" type="table" type_base="table" uuid="{8c8c1adf-aa0f-455d-9bb7-d9d4db699aba}">
        <label>Y_test</label>
        <description>Y_test</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.pipeline" port_format="1.1" uuid="{e78a3d78-2301-44bd-8721-7300809c8e68}" width="50.0" x="2175.0" y="1775.0">
    <label>Pipeline</label>
    <description>Applies one model on the output of another</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "names": {"description": "Comma separated list of model names, eg. Rescale, SVC", "editor": null, "label": "Model names: ", "order": 0, "type": "string", "value": "A, B"}, "flatten": {"description": "Flattens multiple pipeline objects into a single pipeline containing all models", "editor": null, "label": "Flatten: ", "order": 1, "type": "boolean", "value": true}}]]></parameters>
    <ports>
      <input key="models" scheme="hdf5" type="model" type_base="model" uuid="{e3aff659-46a5-4ab0-b838-266f4c37362f}">
        <label>models</label>
        <description>models</description>
      </input>
      <input key="models" scheme="hdf5" type="model" type_base="model" uuid="{6ef81d1d-f4c4-4cb5-bb8a-96302e2561b2}">
        <label>models</label>
        <description>models</description>
      </input>
      <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{8c8f1722-bc8f-41b4-b01e-4e1d253b8f27}">
        <label>Output model</label>
        <description>Output model</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.score" uuid="{f9aa8fd6-40f3-4cbf-888a-8863429c7e51}" width="50.0" x="1725.0" y="1900.0">
    <label>Score</label>
    <description>Predicts Y' from X and compares with input Y. Returns mean accuracy (sum(Y' == Y) / rows)</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{49a49224-966f-47c9-83c3-abd595d62f76}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{868bfb38-ad19-45e9-9c73-dde14dab7bde}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y" scheme="hdf5" type="table" type_base="table" uuid="{465e443e-b1f1-475a-936f-9a678d33582c}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <output key="Score" scheme="hdf5" type="table" type_base="table" uuid="{f7d21afc-fde0-464d-b71a-ba54e0e6e3ea}">
        <label>Score</label>
        <description>Score</description>
      </output>
    </ports>
  </node>
  <node height="50.0" id="org.sysess.sympathy.machinelearning.fit" port_format="1.1" uuid="{fbd4d1c0-2126-4a6b-b0a0-efbec1cc581c}" width="50.0" x="1575.0" y="1825.0">
    <label>Fit</label>
    <description>Trains a model to predict Y given X</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{94d49e38-5be6-4d00-912d-0106a7d61c27}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{17f9f2a9-ae7c-417d-bdf6-af298fb18780}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y0" scheme="hdf5" type="table" type_base="table" uuid="{408ca316-50eb-41c1-9d69-cb7e0164e39f}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{f5d5bfae-3cbf-4881-b4d0-433e7d34330f}">
        <label>Output model</label>
        <description>Output model</description>
      </output>
    </ports>
  </node>
  <connection type="model" uuid="{0645a8dc-dbef-47d3-84ee-bccc21121033}">
    <source node="{8e49050b-14fd-4d69-8998-f2756b1648f9}" port="{07d6c8a0-7580-4cf1-9a4c-1aea1e73c965}"/>
    <destination node="{e78a3d78-2301-44bd-8721-7300809c8e68}" port="{6ef81d1d-f4c4-4cb5-bb8a-96302e2561b2}"/>
  </connection>
  <connection type="model" uuid="{13216172-3875-4f39-916a-3716d80dcdad}">
    <source node="{e78a3d78-2301-44bd-8721-7300809c8e68}" port="{8c8f1722-bc8f-41b4-b01e-4e1d253b8f27}"/>
    <destination node="{02894b6b-c376-43f6-8951-c0eb2d1a5a56}" port="{7424af0f-f96d-4990-a4db-cabc70043ab0}"/>
  </connection>
  <connection type="model" uuid="{13f66acd-fa10-454f-9cd2-cd9238d28abc}">
    <source node="{02894b6b-c376-43f6-8951-c0eb2d1a5a56}" port="{8dafde70-8c27-4939-9ada-fba1289e5d7a}"/>
    <destination node="{b1520c2b-3360-4d92-a603-e3a325336d5b}" port="{389b006e-3426-4906-8cc1-ba325c19f04b}"/>
  </connection>
  <connection type="table" uuid="{1aee211f-e906-4732-b17c-fe7437e8a846}">
    <source node="{d3280d05-491b-49a7-b3a9-9d9ecb53f09c}" port="{e74a2361-5f79-4ee9-ad7c-752b4573a50d}"/>
    <destination node="{f9aa8fd6-40f3-4cbf-888a-8863429c7e51}" port="{868bfb38-ad19-45e9-9c73-dde14dab7bde}"/>
  </connection>
  <connection type="table" uuid="{25f528dd-0f34-4669-aafe-d266a5aa79f5}">
    <source node="{c90f4929-47f6-43b0-bd51-310e14dfd673}" port="{1269f4a2-777d-428e-8a57-3f52c9ae8729}"/>
    <destination node="{4f8ad601-6e6a-4bce-99c3-fe3a99738861}" port="{fcd1809d-a1a7-4b06-a24e-a83d961b9010}"/>
  </connection>
  <connection type="table" uuid="{2c04aac0-ceee-4784-abcd-11c22cbc4d63}">
    <source node="{d3280d05-491b-49a7-b3a9-9d9ecb53f09c}" port="{d32a72ac-8d5a-4557-bc03-2f0ea895c422}"/>
    <destination node="{fbd4d1c0-2126-4a6b-b0a0-efbec1cc581c}" port="{408ca316-50eb-41c1-9d69-cb7e0164e39f}"/>
  </connection>
  <connection type="table" uuid="{4c15becc-9b97-4954-bbf1-9f96be543bc7}">
    <source node="{4f8ad601-6e6a-4bce-99c3-fe3a99738861}" port="{d5422767-e985-4695-befd-5ade999b5746}"/>
    <destination node="{b1520c2b-3360-4d92-a603-e3a325336d5b}" port="{3e9761b2-d933-4f40-9207-1031753074f4}"/>
  </connection>
  <connection type="table" uuid="{4d1d929b-1fea-4a53-8c8e-32e6731d0602}">
    <source node="{1ccd7f36-a1a9-40d6-8297-77e3fd93096a}" port="{a35d7038-54ab-4ce7-931e-2fc72f1f778f}"/>
    <destination node="{d3280d05-491b-49a7-b3a9-9d9ecb53f09c}" port="{3e9445f2-2117-44f5-adf4-ec569d6de096}"/>
  </connection>
  <connection type="table" uuid="{6636d5e1-ea9d-4718-b14c-161a469622be}">
    <source node="{d3280d05-491b-49a7-b3a9-9d9ecb53f09c}" port="{a257af79-810b-4e4a-b736-c0f05f33e6c0}"/>
    <destination node="{fbd4d1c0-2126-4a6b-b0a0-efbec1cc581c}" port="{17f9f2a9-ae7c-417d-bdf6-af298fb18780}"/>
  </connection>
  <connection type="model" uuid="{7b411f6c-9f49-4969-a4d1-127c1782e2b1}">
    <source node="{fbd4d1c0-2126-4a6b-b0a0-efbec1cc581c}" port="{f5d5bfae-3cbf-4881-b4d0-433e7d34330f}"/>
    <destination node="{f9aa8fd6-40f3-4cbf-888a-8863429c7e51}" port="{49a49224-966f-47c9-83c3-abd595d62f76}"/>
  </connection>
  <connection type="table" uuid="{8c25ec1f-a98e-4440-bf98-17f6c8bf6fb5}">
    <source node="{4f8ad601-6e6a-4bce-99c3-fe3a99738861}" port="{b145587c-cbf2-4dfe-80ce-e9b9b3c59b36}"/>
    <destination node="{b1520c2b-3360-4d92-a603-e3a325336d5b}" port="{74ada421-fe68-4be2-ae1c-27ac1f0e1838}"/>
  </connection>
  <connection type="table" uuid="{96f169a6-8a9d-44a0-abe7-a35ae2a35145}">
    <source node="{013bd3fe-be0c-4656-b458-a58c5eb93d83}" port="{8854e8ac-3f78-471b-b735-a2f80282be92}"/>
    <destination node="{9504b114-e2eb-4246-a16d-ddb6203b862f}" port="{b4f2479f-c1a6-463e-be43-d917aa6f1567}"/>
  </connection>
  <connection type="table" uuid="{97f54a58-3969-4101-bfb3-50c3f1b3d61f}">
    <source node="{4f8ad601-6e6a-4bce-99c3-fe3a99738861}" port="{a07a650a-35d2-4d90-9c8a-24265067ab2c}"/>
    <destination node="{02894b6b-c376-43f6-8951-c0eb2d1a5a56}" port="{b1088b60-2ad6-4dbd-ba00-0962947e2b3d}"/>
  </connection>
  <connection type="table" uuid="{9c0d16df-c227-45c2-9fe6-63002e8ac7c2}">
    <source node="{4f8ad601-6e6a-4bce-99c3-fe3a99738861}" port="{480dfcf0-fed6-40e5-8d38-9e819963252a}"/>
    <destination node="{02894b6b-c376-43f6-8951-c0eb2d1a5a56}" port="{8bbe9c7e-ebae-484a-a523-35fe23f3f20b}"/>
  </connection>
  <connection type="model" uuid="{9f5a9208-cfae-4d95-80a4-f912508c696c}">
    <source node="{6b798993-5138-4e9b-abb8-3d31f8590120}" port="{ec10a6df-7827-43d6-837b-0443f065b1af}"/>
    <destination node="{9504b114-e2eb-4246-a16d-ddb6203b862f}" port="{5206fb34-1740-4569-84db-23e4730b6c54}"/>
  </connection>
  <connection type="table" uuid="{a4ff9ba0-fdc2-47b4-aa96-1589c5e7383c}">
    <source node="{c90f4929-47f6-43b0-bd51-310e14dfd673}" port="{367faaf1-f3c8-4971-b915-4452e7171778}"/>
    <destination node="{4f8ad601-6e6a-4bce-99c3-fe3a99738861}" port="{5438012d-a386-45b9-a2e3-046b9482bb41}"/>
  </connection>
  <connection type="table" uuid="{afafd6d8-ed7e-4902-9bf7-f20e1cd90f27}">
    <source node="{d3280d05-491b-49a7-b3a9-9d9ecb53f09c}" port="{8c8c1adf-aa0f-455d-9bb7-d9d4db699aba}"/>
    <destination node="{f9aa8fd6-40f3-4cbf-888a-8863429c7e51}" port="{465e443e-b1f1-475a-936f-9a678d33582c}"/>
  </connection>
  <connection type="model" uuid="{b58a33f0-33ea-4dfc-98f2-3fc7fc36eebe}">
    <source node="{a1e80ea9-f433-4385-b0ca-e5601023fe8b}" port="{1e6c6cad-e1d4-4dd8-8532-350ee93b3f85}"/>
    <destination node="{e78a3d78-2301-44bd-8721-7300809c8e68}" port="{e3aff659-46a5-4ab0-b838-266f4c37362f}"/>
  </connection>
  <connection type="table" uuid="{c626239a-5c85-49a9-93a2-972904c71e1b}">
    <source node="{1ccd7f36-a1a9-40d6-8297-77e3fd93096a}" port="{26e65000-f4ab-4225-868d-23af0aea073a}"/>
    <destination node="{d3280d05-491b-49a7-b3a9-9d9ecb53f09c}" port="{51bc568e-c751-4976-bb39-8c1e87e5b0a0}"/>
  </connection>
  <connection type="model" uuid="{eb409f09-3527-4104-9ca4-df267e5bd874}">
    <source node="{370dcf9d-a8c1-4967-befc-5bfa2f3f6431}" port="{5e6e46c4-cef3-433d-b26a-883ea1c12008}"/>
    <destination node="{fbd4d1c0-2126-4a6b-b0a0-efbec1cc581c}" port="{94d49e38-5be6-4d00-912d-0106a7d61c27}"/>
  </connection>
  <text color="Beige" height="100.0" uuid="{29414974-04a5-42a6-b558-c0990f253727}" width="275.0" x="2275.0" y="2050.0">Example of the extended features. 

Includes all polynoms of degree 2. 
eg.  width*height, and width*width</text>
  <text color="Beige" height="75.0" uuid="{84886620-767a-4719-b344-1ad8bfe3e9a3}" width="250.0" x="2000.0" y="1575.0">By adding non-linear features as polynoms we raise the score to about 100%</text>
  <text color="Beige" height="75.0" uuid="{f84a0761-0e92-4791-ba14-5b2f4a947b0a}" width="250.0" x="1300.0" y="1675.0">Simple logistic regression scores less than about 90%</text>
</flow>
