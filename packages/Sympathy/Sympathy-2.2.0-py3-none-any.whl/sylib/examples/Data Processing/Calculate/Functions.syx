<?xml version='1.0' encoding='US-ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" uuid="{4ae9288a-6ef6-41a3-8d1a-6f0f19c973f4}" width="50.0" x="0.0" y="0.0" id="">
  <label></label>
  <description></description>
  <author></author>
  <copyright></copyright>
  <version></version>
  <min_version></min_version>
  <icon/>
  <aggregation type="json">null</aggregation>
  <libraries type="json">[]</libraries>
  <pythonpaths type="json">[]</pythonpaths>
  <parameters type="json">{}</parameters>
  <ports/>
  <node id="org.sysess.sympathy.data.fx" uuid="{040a62ee-68a6-4900-8af6-476f342a4c28}" x="1825.0" y="1875.0">
    <label>F(x)</label>
    <description>Select and apply functions to item.</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "copy_input": {"description": "If enabled the incoming data will be copied to the output before running the nodes.", "editor": null, "label": "Copy input", "order": 0, "type": "boolean", "value": false}, "selected_functions": {"description": "Choose one or many of the listed functions to apply to the content of the incoming item.", "label": "Select functions", "order": 1, "passthrough": false, "type": "list", "list": ["Fx", "FxList"], "value": [0], "value_names": ["Fx"], "editor": {"buttons": true, "filter": true, "passthrough": true, "selection": "multi", "type": "listview"}}}</parameters>
    <ports>
      <input key="port1" scheme="text" type="datasource" type_base="datasource" uuid="{de9c6deb-7382-424c-ad7f-a70a3101d5e1}">
        <label>Path to Python file with scripted functions.</label>
        <description>Path to Python file with scripted functions.</description>
      </input>
      <input key="port2" scheme="hdf5" type="[table]" type_base="&lt;a&gt;" uuid="{fb97938e-5d5c-4cf2-baa0-64defd950e21}">
        <label>Item with data to apply functions on</label>
        <description>Item with data to apply functions on</description>
      </input>
      <output key="port3" scheme="hdf5" type="[table]" type_base="&lt;a&gt;" uuid="{b1a3747a-4ccf-464e-ba83-45c104c644a3}">
        <label>Item with the results from the applied functions</label>
        <description>Item with the results from the applied functions</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.datasources.filedatasource" uuid="{c7898676-c099-4012-a272-c2d193218c2f}" x="1625.0" y="1875.0">
    <label>Datasource</label>
    <description>Select a data source.</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
    <copyright>(C) 2013 Combine Control Systems AB</copyright>
    <version>1.1</version>
    <parameters type="json">{"type": "group", "filename": {"description": "A filename including path if needed", "label": "Filename", "order": 0, "type": "string", "value": "Example files/function_example_scripts.py", "editor": {"type": "filename", "filter": ["Any files (*)"]}}, "db_sqlalchemy_engine_url": {"description": "SQLAlchemy engine URL for connecting to the database", "editor": null, "label": "SQLAlchemy engine URL", "order": 1, "type": "string", "value": "mssql+pyodbc:///"}, "db_method": {"description": "Select which Database connection method that you want to use.", "label": "Database connection method", "order": 2, "type": "string", "value": "ODBC", "editor": {"type": "combobox", "options": ["ODBC", "SQLAlchemy"]}}, "db_driver": {"description": "Database driver to use.", "label": "Database driver", "order": 3, "passthrough": false, "type": "list", "list": ["SQL Server"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}, "db_servername": {"description": "A valid name to a database server.", "editor": null, "label": "Server name", "order": 4, "type": "string", "value": ""}, "db_databasename": {"description": "The name of the database.", "editor": null, "label": "Database name", "order": 5, "type": "string", "value": ""}, "db_user": {"description": "A valid database user.", "editor": null, "label": "User", "order": 6, "type": "string", "value": ""}, "db_password": {"description": "A valid password for the selected user.", "editor": null, "label": "Password", "order": 7, "type": "string", "value": ""}, "db_connection_string": {"description": "A connection string that will override other settings.", "editor": null, "label": "Connection string", "order": 8, "type": "string", "value": ""}, "datasource_type": {"description": "Type of datasource.", "editor": null, "label": "Datasource type", "order": 9, "passthrough": false, "type": "list", "list": ["File", "Database"], "value": [0], "value_names": []}}</parameters>
    <ports>
      <output key="port1" scheme="text" type="datasource" type_base="datasource" uuid="{56b3bd3e-c150-4901-9b3b-7b436fd5fded}">
        <label>Datasource with path to file</label>
        <description>Datasource with path to file</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.generate.signaltables" uuid="{e2fea923-c648-4fc5-bd7e-eeaa1144ce37}" x="1625.0" y="2000.0">
    <label>Generate Signal Tables</label>
    <description></description>
    <author>Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(C) 2016 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "table_params": {"label": "Table", "order": 0, "type": "page", "column_entries": {"description": "The number of column entries to be generated.", "label": "Column entries", "order": 0, "type": "integer", "value": 2, "editor": {"max": 1000000, "min": 0, "step": 1, "type": "spinbox"}}, "column_length": {"description": "The length of columns to be generated.", "label": "Column length", "order": 1, "type": "integer", "value": 100, "editor": {"max": 100000000, "min": 0, "step": 1, "type": "spinbox"}}, "length": {"description": "The length of table list to be generated.", "label": "Table list length", "order": 2, "type": "integer", "value": 5, "editor": {"max": 10000, "min": 0, "step": 1, "type": "spinbox"}}}, "signal_params": {"label": "Signal", "order": 1, "type": "page", "signal_type": {"description": "The signal to be generated.", "label": "Signal type", "order": 0, "passthrough": false, "type": "list", "list": ["cosines", "sinus", "tangent"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}, "amplitude": {"description": "The amplitude of the signal to be generated.", "editor": null, "label": "Amplitude", "order": 1, "type": "float", "value": 1.0}, "frequency": {"description": "The frequency of the signal to be generated.", "editor": null, "label": "Frequency", "order": 2, "type": "float", "value": 0.01}, "period": {"description": "The period of the signal to be generated.", "editor": null, "label": "Period", "order": 3, "type": "float", "value": 100.0}, "use_period": {"description": "Use Period [Checked] or Frequency [Unchecked] to generate the signal.", "editor": null, "label": "Period or Frequency", "order": 4, "type": "boolean", "value": true}, "phase_offset": {"description": "The phase offset of the signal to be generated.", "editor": null, "label": "Phase offset", "order": 5, "type": "float", "value": 0.0}, "add_noise": {"description": "If random noise should be added to the signals.", "editor": null, "label": "Add random noise", "order": 6, "type": "boolean", "value": false}, "noise_amplitude": {"description": "The amplitude of the noise.", "label": "Amplitude of noise", "order": 7, "type": "float", "value": 0.01, "editor": {"decimals": 2, "step": 0.05, "type": "spinbox"}}, "index_column": {"description": "Add an index column to the beginning of the table.", "editor": null, "label": "First column as index", "order": 8, "type": "boolean", "value": true}}}</parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="[table]" type_base="[table]" uuid="{762edb2a-2e05-473c-9e33-a2c18e2d18f5}">
        <label>Signal Tables</label>
        <description>Signal Tables</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.generic.fxlist" uuid="{fa107c7a-7702-4091-b11e-6af8a96d8097}" x="1825.0" y="2000.0">
    <label>F(x) List</label>
    <description>Select and apply functions to List.</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "copy_input": {"description": "If enabled the incoming data will be copied to the output before running the nodes.", "editor": null, "label": "Copy input", "order": 0, "type": "boolean", "value": false}, "selected_functions": {"description": "Choose one or many of the listed functions to apply to the content of the incoming item.", "label": "Select functions", "order": 1, "passthrough": false, "type": "list", "list": ["FxList"], "value": [0], "value_names": ["FxList"], "editor": {"buttons": true, "filter": true, "passthrough": true, "selection": "multi", "type": "listview"}}}</parameters>
    <ports>
      <input key="port1" scheme="text" type="datasource" type_base="datasource" uuid="{fac6a417-7d46-402d-9c17-3102663ec085}">
        <label>Path to Python file with scripted functions.</label>
        <description>Path to Python file with scripted functions.</description>
      </input>
      <input key="port2" scheme="hdf5" type="[table]" type_base="[&lt;a&gt;]" uuid="{f6a71fd2-6b1e-44d2-9558-bab218c4f81e}">
        <label>List with data to apply functions on</label>
        <description>List with data to apply functions on</description>
      </input>
      <output key="port3" scheme="hdf5" type="[table]" type_base="[&lt;a&gt;]" uuid="{d0adfcee-1edf-47df-acd7-09285d8ca27f}">
        <label>List with function(s) applied</label>
        <description>List with function(s) applied</description>
      </output>
    </ports>
  </node>
  <connection type="datasource" uuid="{9ffe087b-c2cd-40cf-801a-3c7df502e9ca}">
    <source node="{c7898676-c099-4012-a272-c2d193218c2f}" port="{56b3bd3e-c150-4901-9b3b-7b436fd5fded}"/>
    <destination node="{fa107c7a-7702-4091-b11e-6af8a96d8097}" port="{fac6a417-7d46-402d-9c17-3102663ec085}"/>
  </connection>
  <connection type="[table]" uuid="{a346d272-f6fe-4ad0-b1ee-18148d0570f0}">
    <source node="{e2fea923-c648-4fc5-bd7e-eeaa1144ce37}" port="{762edb2a-2e05-473c-9e33-a2c18e2d18f5}"/>
    <destination node="{fa107c7a-7702-4091-b11e-6af8a96d8097}" port="{f6a71fd2-6b1e-44d2-9558-bab218c4f81e}"/>
  </connection>
  <connection type="[table]" uuid="{dbbaaae9-c447-42d6-9884-94d1720e6708}">
    <source node="{e2fea923-c648-4fc5-bd7e-eeaa1144ce37}" port="{762edb2a-2e05-473c-9e33-a2c18e2d18f5}"/>
    <destination node="{040a62ee-68a6-4900-8af6-476f342a4c28}" port="{fb97938e-5d5c-4cf2-baa0-64defd950e21}"/>
  </connection>
  <connection type="datasource" uuid="{e76c599b-cbc4-4773-8c71-2afc43648dde}">
    <source node="{c7898676-c099-4012-a272-c2d193218c2f}" port="{56b3bd3e-c150-4901-9b3b-7b436fd5fded}"/>
    <destination node="{040a62ee-68a6-4900-8af6-476f342a4c28}" port="{de9c6deb-7382-424c-ad7f-a70a3101d5e1}"/>
  </connection>
  <text color="Beige" height="125.0" uuid="{34b4adc5-9a5f-4880-b37a-c54c91b8d970}" width="125.0" x="1775.0" y="1725.0">Press 'Edit source file' in the configuration window to see what the functions do.</text>
  <text color="Beige" height="75.0" uuid="{b8b3b627-3958-44b6-9bfc-76f275f70151}" width="200.0" x="1975.0" y="1850.0">The script is applied on every element in a list. In the script arg points to a single element.</text>
  <text color="Beige" height="100.0" uuid="{d0446e4b-b182-4c4c-b1f7-198c9d67e07d}" width="200.0" x="1975.0" y="1975.0">All items in the input data can be accessed in the script. E.g., for a list the whole list can be accessed in the arg variable.</text>
  <text color="Beige" height="50.0" uuid="{43b9165f-735c-4c92-8d1a-ec9971cb2bb7}" width="275.0" x="1600.0" y="2100.0">
- Node example: *org.sysess.sympathy.data.fx*
- Node example: *org.sysess.sympathy.data.generic.fxlist*</text>
</flow>
