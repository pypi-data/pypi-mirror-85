#ifndef BH_API_H
#define BH_API_H

/* This file is auto generated by `setup.py`. See the `write_header()` function */

/* Bohrium C Bridge: data types. Auto generated! */

#ifndef BHC_TYPES_H
#define BHC_TYPES_H

#include <stdint.h>

typedef unsigned char bhc_bool;
typedef int8_t        bhc_int8;
typedef int16_t       bhc_int16;
typedef int32_t       bhc_int32;
typedef int64_t       bhc_int64;
typedef uint8_t       bhc_uint8;
typedef uint16_t      bhc_uint16;
typedef uint32_t      bhc_uint32;
typedef uint64_t      bhc_uint64;
typedef float         bhc_float32;
typedef double        bhc_float64;
typedef struct { bhc_float32 real, imag; } bhc_complex64;
typedef struct { bhc_float64 real, imag; } bhc_complex128;
typedef struct { bhc_uint64 start, key; } bhc_r123;

typedef union {
    bhc_bool bool8;
    bhc_int8 int8;
    bhc_int16 int16;
    bhc_int32 int32;
    bhc_int64 int64;
    bhc_uint8 uint8;
    bhc_uint16 uint16;
    bhc_uint32 uint32;
    bhc_uint64 uint64;
    bhc_float32 float32;
    bhc_float64 float64;
    bhc_complex64 complex64;
    bhc_complex128 complex128;
    bhc_r123 r123;
} bhc_scalar_union; 

#ifdef __cplusplus
extern "C" {
#endif

// Forward declaration of array types:
struct bhc_ndarray_complex64;
struct bhc_ndarray_complex128;
struct bhc_ndarray_uint64;
struct bhc_ndarray_float64;
struct bhc_ndarray_int64;
struct bhc_ndarray_uint8;
struct bhc_ndarray_float32;
struct bhc_ndarray_int32;
struct bhc_ndarray_uint16;
struct bhc_ndarray_int8;
struct bhc_ndarray_int16;
struct bhc_ndarray_bool8;
struct bhc_ndarray_uint32;

// Pointer shorthands:
typedef struct bhc_ndarray_complex64* bhc_ndarray_complex64_p;
typedef struct bhc_ndarray_complex128* bhc_ndarray_complex128_p;
typedef struct bhc_ndarray_uint64* bhc_ndarray_uint64_p;
typedef struct bhc_ndarray_float64* bhc_ndarray_float64_p;
typedef struct bhc_ndarray_int64* bhc_ndarray_int64_p;
typedef struct bhc_ndarray_uint8* bhc_ndarray_uint8_p;
typedef struct bhc_ndarray_float32* bhc_ndarray_float32_p;
typedef struct bhc_ndarray_int32* bhc_ndarray_int32_p;
typedef struct bhc_ndarray_uint16* bhc_ndarray_uint16_p;
typedef struct bhc_ndarray_int8* bhc_ndarray_int8_p;
typedef struct bhc_ndarray_int16* bhc_ndarray_int16_p;
typedef struct bhc_ndarray_bool8* bhc_ndarray_bool8_p;
typedef struct bhc_ndarray_uint32* bhc_ndarray_uint32_p;

// Type enum:
typedef enum {
    BH_COMPLEX64 = 11, 
    BH_COMPLEX128 = 12, 
    BH_UINT64 = 8, 
    BH_FLOAT64 = 10, 
    BH_INT64 = 4, 
    BH_UINT8 = 5, 
    BH_FLOAT32 = 9, 
    BH_INT32 = 3, 
    BH_UINT16 = 6, 
    BH_INT8 = 1, 
    BH_INT16 = 2, 
    BH_BOOL = 0, 
    BH_UINT32 = 7, 
} bhc_dtype; // Fits 5-bits

// Opcodes enum:
typedef enum {
    BHC_ADD = 1, 
    BHC_SUBTRACT = 2, 
    BHC_MULTIPLY = 3, 
    BHC_DIVIDE = 4, 
    BHC_POWER = 5, 
    BHC_ABSOLUTE = 6, 
    BHC_GREATER = 7, 
    BHC_GREATER_EQUAL = 8, 
    BHC_LESS = 9, 
    BHC_LESS_EQUAL = 10, 
    BHC_EQUAL = 11, 
    BHC_NOT_EQUAL = 12, 
    BHC_LOGICAL_AND = 13, 
    BHC_LOGICAL_OR = 14, 
    BHC_LOGICAL_XOR = 15, 
    BHC_LOGICAL_NOT = 16, 
    BHC_MAXIMUM = 17, 
    BHC_MINIMUM = 18, 
    BHC_BITWISE_AND = 19, 
    BHC_BITWISE_OR = 20, 
    BHC_BITWISE_XOR = 21, 
    BHC_INVERT = 22, 
    BHC_LEFT_SHIFT = 23, 
    BHC_RIGHT_SHIFT = 24, 
    BHC_COS = 25, 
    BHC_SIN = 26, 
    BHC_TAN = 27, 
    BHC_COSH = 28, 
    BHC_SINH = 29, 
    BHC_TANH = 30, 
    BHC_ARCSIN = 31, 
    BHC_ARCCOS = 32, 
    BHC_ARCTAN = 33, 
    BHC_ARCSINH = 34, 
    BHC_ARCCOSH = 35, 
    BHC_ARCTANH = 36, 
    BHC_ARCTAN2 = 37, 
    BHC_EXP = 38, 
    BHC_EXP2 = 39, 
    BHC_EXPM1 = 40, 
    BHC_LOG = 41, 
    BHC_LOG2 = 42, 
    BHC_LOG10 = 43, 
    BHC_LOG1P = 44, 
    BHC_SQRT = 45, 
    BHC_CEIL = 46, 
    BHC_TRUNC = 47, 
    BHC_FLOOR = 48, 
    BHC_RINT = 49, 
    BHC_MOD = 50, 
    BHC_ISNAN = 51, 
    BHC_ISINF = 52, 
    BHC_IDENTITY = 53, 
    BHC_FREE = 55, 
    BHC_NONE = 57, 
    BHC_TALLY = 58, 
    BHC_ADD_REDUCE = 59, 
    BHC_MULTIPLY_REDUCE = 60, 
    BHC_MINIMUM_REDUCE = 61, 
    BHC_MAXIMUM_REDUCE = 62, 
    BHC_LOGICAL_AND_REDUCE = 63, 
    BHC_BITWISE_AND_REDUCE = 64, 
    BHC_LOGICAL_OR_REDUCE = 65, 
    BHC_BITWISE_OR_REDUCE = 66, 
    BHC_LOGICAL_XOR_REDUCE = 67, 
    BHC_BITWISE_XOR_REDUCE = 68, 
    BHC_RANDOM = 71, 
    BHC_RANGE = 72, 
    BHC_REAL = 73, 
    BHC_IMAG = 74, 
    BHC_ADD_ACCUMULATE = 75, 
    BHC_MULTIPLY_ACCUMULATE = 76, 
    BHC_SIGN = 77, 
    BHC_GATHER = 79, 
    BHC_SCATTER = 80, 
    BHC_REMAINDER = 81, 
    BHC_COND_SCATTER = 82, 
    BHC_ISFINITE = 83, 
    BHC_CONJ = 84, 
} bhc_opcode;

#ifdef __cplusplus
}
#endif

#endif /* !defined(BHC_TYPES_H) */    


#ifdef __cplusplus
extern "C" {
#endif

/* C API functions */
#define BhAPI_flush_NUM 0
#define BhAPI_flush_RETURN void
#define BhAPI_flush_PROTO (void)
#define BhAPI_flush_count_NUM 1
#define BhAPI_flush_count_RETURN int
#define BhAPI_flush_count_PROTO (void)
#define BhAPI_flush_and_repeat_NUM 2
#define BhAPI_flush_and_repeat_RETURN void
#define BhAPI_flush_and_repeat_PROTO (uint64_t nrepeats)
#define BhAPI_flush_and_repeat_condition_NUM 3
#define BhAPI_flush_and_repeat_condition_RETURN void
#define BhAPI_flush_and_repeat_condition_PROTO (uint64_t nrepeats, bhc_ndarray_bool8_p condition)
#define BhAPI_message_NUM 4
#define BhAPI_message_RETURN const char *
#define BhAPI_message_PROTO (const char *msg)
#define BhAPI_getDeviceContext_NUM 5
#define BhAPI_getDeviceContext_RETURN void *
#define BhAPI_getDeviceContext_PROTO (void)
#define BhAPI_set_device_context_NUM 6
#define BhAPI_set_device_context_RETURN void
#define BhAPI_set_device_context_PROTO (uint64_t device_context)
#define BhAPI_new_NUM 7
#define BhAPI_new_RETURN void *
#define BhAPI_new_PROTO (bhc_dtype dtype, uint64_t size)
#define BhAPI_destroy_NUM 8
#define BhAPI_destroy_RETURN void
#define BhAPI_destroy_PROTO (bhc_dtype dtype, void *ary)
#define BhAPI_view_NUM 9
#define BhAPI_view_RETURN void *
#define BhAPI_view_PROTO (bhc_dtype dtype, void *src, int64_t rank, int64_t start, const int64_t *shape,                        const int64_t *stride)
#define BhAPI_sync_NUM 10
#define BhAPI_sync_RETURN void
#define BhAPI_sync_PROTO (bhc_dtype dtype, const void *ary)
#define BhAPI_add_reset_NUM 11
#define BhAPI_add_reset_RETURN void
#define BhAPI_add_reset_PROTO (bhc_dtype dtype, const void *ary1, size_t dim, size_t reset_max)
#define BhAPI_op_NUM 12
#define BhAPI_op_RETURN void
#define BhAPI_op_PROTO (bhc_opcode opcode, const bhc_dtype types[], const bhc_bool constants[], void *operands[])
#define BhAPI_random123_NUM 13
#define BhAPI_random123_RETURN void
#define BhAPI_random123_PROTO (void *out, uint64_t seed, uint64_t key)
#define BhAPI_extmethod_NUM 14
#define BhAPI_extmethod_RETURN int
#define BhAPI_extmethod_PROTO (bhc_dtype dtype, const char *name, const void *out, const void *in1, const void *in2)
#define BhAPI_data_get_NUM 15
#define BhAPI_data_get_RETURN void *
#define BhAPI_data_get_PROTO (bhc_dtype dtype, const void *ary, bhc_bool copy2host, bhc_bool force_alloc,                            bhc_bool nullify)
#define BhAPI_data_set_NUM 16
#define BhAPI_data_set_RETURN void
#define BhAPI_data_set_PROTO (bhc_dtype dtype, const void *ary, bhc_bool host_ptr, void *data)
#define BhAPI_data_copy_NUM 17
#define BhAPI_data_copy_RETURN void
#define BhAPI_data_copy_PROTO (bhc_dtype dtype, const void *src, const void *dst, const char *param)
#define BhAPI_slide_view_NUM 18
#define BhAPI_slide_view_RETURN void
#define BhAPI_slide_view_PROTO (bhc_dtype dtype, const void *ary1, size_t dim, int slide, int view_shape, int array_shape,                             int array_stride, int step_delay)
#define BhAPI_mem_signal_init_NUM 19
#define BhAPI_mem_signal_init_RETURN void
#define BhAPI_mem_signal_init_PROTO (void)
#define BhAPI_mem_signal_shutdown_NUM 20
#define BhAPI_mem_signal_shutdown_RETURN void
#define BhAPI_mem_signal_shutdown_PROTO (void)
#define BhAPI_mem_signal_attach_NUM 21
#define BhAPI_mem_signal_attach_RETURN void
#define BhAPI_mem_signal_attach_PROTO (void *idx, void *addr, uint64_t size,                                    int (*callback)(void *fault_address, void *segment_idx))
#define BhAPI_mem_signal_detach_NUM 22
#define BhAPI_mem_signal_detach_RETURN void
#define BhAPI_mem_signal_detach_PROTO (const void *addr)
#define BhAPI_mem_signal_exist_NUM 23
#define BhAPI_mem_signal_exist_RETURN int
#define BhAPI_mem_signal_exist_PROTO (const void *addr)
#define BhAPI_user_kernel_NUM 24
#define BhAPI_user_kernel_RETURN const char*
#define BhAPI_user_kernel_PROTO (const char* kernel, int nop, void *operands[],                                     const char* compile_cmd, const char* tag, const char* param)


/* Total number of C API pointers */
#define BhAPI_num_of_pointers 25

#ifdef BhAPI_MODULE
/* This section is used when compiling _bh_api.c */

static BhAPI_flush_RETURN BhAPI_flush BhAPI_flush_PROTO;
static BhAPI_flush_count_RETURN BhAPI_flush_count BhAPI_flush_count_PROTO;
static BhAPI_flush_and_repeat_RETURN BhAPI_flush_and_repeat BhAPI_flush_and_repeat_PROTO;
static BhAPI_flush_and_repeat_condition_RETURN BhAPI_flush_and_repeat_condition BhAPI_flush_and_repeat_condition_PROTO;
static BhAPI_message_RETURN BhAPI_message BhAPI_message_PROTO;
static BhAPI_getDeviceContext_RETURN BhAPI_getDeviceContext BhAPI_getDeviceContext_PROTO;
static BhAPI_set_device_context_RETURN BhAPI_set_device_context BhAPI_set_device_context_PROTO;
static BhAPI_new_RETURN BhAPI_new BhAPI_new_PROTO;
static BhAPI_destroy_RETURN BhAPI_destroy BhAPI_destroy_PROTO;
static BhAPI_view_RETURN BhAPI_view BhAPI_view_PROTO;
static BhAPI_sync_RETURN BhAPI_sync BhAPI_sync_PROTO;
static BhAPI_add_reset_RETURN BhAPI_add_reset BhAPI_add_reset_PROTO;
static BhAPI_op_RETURN BhAPI_op BhAPI_op_PROTO;
static BhAPI_random123_RETURN BhAPI_random123 BhAPI_random123_PROTO;
static BhAPI_extmethod_RETURN BhAPI_extmethod BhAPI_extmethod_PROTO;
static BhAPI_data_get_RETURN BhAPI_data_get BhAPI_data_get_PROTO;
static BhAPI_data_set_RETURN BhAPI_data_set BhAPI_data_set_PROTO;
static BhAPI_data_copy_RETURN BhAPI_data_copy BhAPI_data_copy_PROTO;
static BhAPI_slide_view_RETURN BhAPI_slide_view BhAPI_slide_view_PROTO;
static BhAPI_mem_signal_init_RETURN BhAPI_mem_signal_init BhAPI_mem_signal_init_PROTO;
static BhAPI_mem_signal_shutdown_RETURN BhAPI_mem_signal_shutdown BhAPI_mem_signal_shutdown_PROTO;
static BhAPI_mem_signal_attach_RETURN BhAPI_mem_signal_attach BhAPI_mem_signal_attach_PROTO;
static BhAPI_mem_signal_detach_RETURN BhAPI_mem_signal_detach BhAPI_mem_signal_detach_PROTO;
static BhAPI_mem_signal_exist_RETURN BhAPI_mem_signal_exist BhAPI_mem_signal_exist_PROTO;
static BhAPI_user_kernel_RETURN BhAPI_user_kernel BhAPI_user_kernel_PROTO;


static void init_c_api_struct(void *c_api_struct[]) {
    c_api_struct[BhAPI_flush_NUM] = (void *)BhAPI_flush;
    c_api_struct[BhAPI_flush_count_NUM] = (void *)BhAPI_flush_count;
    c_api_struct[BhAPI_flush_and_repeat_NUM] = (void *)BhAPI_flush_and_repeat;
    c_api_struct[BhAPI_flush_and_repeat_condition_NUM] = (void *)BhAPI_flush_and_repeat_condition;
    c_api_struct[BhAPI_message_NUM] = (void *)BhAPI_message;
    c_api_struct[BhAPI_getDeviceContext_NUM] = (void *)BhAPI_getDeviceContext;
    c_api_struct[BhAPI_set_device_context_NUM] = (void *)BhAPI_set_device_context;
    c_api_struct[BhAPI_new_NUM] = (void *)BhAPI_new;
    c_api_struct[BhAPI_destroy_NUM] = (void *)BhAPI_destroy;
    c_api_struct[BhAPI_view_NUM] = (void *)BhAPI_view;
    c_api_struct[BhAPI_sync_NUM] = (void *)BhAPI_sync;
    c_api_struct[BhAPI_add_reset_NUM] = (void *)BhAPI_add_reset;
    c_api_struct[BhAPI_op_NUM] = (void *)BhAPI_op;
    c_api_struct[BhAPI_random123_NUM] = (void *)BhAPI_random123;
    c_api_struct[BhAPI_extmethod_NUM] = (void *)BhAPI_extmethod;
    c_api_struct[BhAPI_data_get_NUM] = (void *)BhAPI_data_get;
    c_api_struct[BhAPI_data_set_NUM] = (void *)BhAPI_data_set;
    c_api_struct[BhAPI_data_copy_NUM] = (void *)BhAPI_data_copy;
    c_api_struct[BhAPI_slide_view_NUM] = (void *)BhAPI_slide_view;
    c_api_struct[BhAPI_mem_signal_init_NUM] = (void *)BhAPI_mem_signal_init;
    c_api_struct[BhAPI_mem_signal_shutdown_NUM] = (void *)BhAPI_mem_signal_shutdown;
    c_api_struct[BhAPI_mem_signal_attach_NUM] = (void *)BhAPI_mem_signal_attach;
    c_api_struct[BhAPI_mem_signal_detach_NUM] = (void *)BhAPI_mem_signal_detach;
    c_api_struct[BhAPI_mem_signal_exist_NUM] = (void *)BhAPI_mem_signal_exist;
    c_api_struct[BhAPI_user_kernel_NUM] = (void *)BhAPI_user_kernel;

}

#else
/* This section is used in modules that use _bh_api.c's API */

#define BhAPI_flush (*(BhAPI_flush_RETURN (*)BhAPI_flush_PROTO) PyBhAPI[BhAPI_flush_NUM])
#define BhAPI_flush_count (*(BhAPI_flush_count_RETURN (*)BhAPI_flush_count_PROTO) PyBhAPI[BhAPI_flush_count_NUM])
#define BhAPI_flush_and_repeat (*(BhAPI_flush_and_repeat_RETURN (*)BhAPI_flush_and_repeat_PROTO) PyBhAPI[BhAPI_flush_and_repeat_NUM])
#define BhAPI_flush_and_repeat_condition (*(BhAPI_flush_and_repeat_condition_RETURN (*)BhAPI_flush_and_repeat_condition_PROTO) PyBhAPI[BhAPI_flush_and_repeat_condition_NUM])
#define BhAPI_message (*(BhAPI_message_RETURN (*)BhAPI_message_PROTO) PyBhAPI[BhAPI_message_NUM])
#define BhAPI_getDeviceContext (*(BhAPI_getDeviceContext_RETURN (*)BhAPI_getDeviceContext_PROTO) PyBhAPI[BhAPI_getDeviceContext_NUM])
#define BhAPI_set_device_context (*(BhAPI_set_device_context_RETURN (*)BhAPI_set_device_context_PROTO) PyBhAPI[BhAPI_set_device_context_NUM])
#define BhAPI_new (*(BhAPI_new_RETURN (*)BhAPI_new_PROTO) PyBhAPI[BhAPI_new_NUM])
#define BhAPI_destroy (*(BhAPI_destroy_RETURN (*)BhAPI_destroy_PROTO) PyBhAPI[BhAPI_destroy_NUM])
#define BhAPI_view (*(BhAPI_view_RETURN (*)BhAPI_view_PROTO) PyBhAPI[BhAPI_view_NUM])
#define BhAPI_sync (*(BhAPI_sync_RETURN (*)BhAPI_sync_PROTO) PyBhAPI[BhAPI_sync_NUM])
#define BhAPI_add_reset (*(BhAPI_add_reset_RETURN (*)BhAPI_add_reset_PROTO) PyBhAPI[BhAPI_add_reset_NUM])
#define BhAPI_op (*(BhAPI_op_RETURN (*)BhAPI_op_PROTO) PyBhAPI[BhAPI_op_NUM])
#define BhAPI_random123 (*(BhAPI_random123_RETURN (*)BhAPI_random123_PROTO) PyBhAPI[BhAPI_random123_NUM])
#define BhAPI_extmethod (*(BhAPI_extmethod_RETURN (*)BhAPI_extmethod_PROTO) PyBhAPI[BhAPI_extmethod_NUM])
#define BhAPI_data_get (*(BhAPI_data_get_RETURN (*)BhAPI_data_get_PROTO) PyBhAPI[BhAPI_data_get_NUM])
#define BhAPI_data_set (*(BhAPI_data_set_RETURN (*)BhAPI_data_set_PROTO) PyBhAPI[BhAPI_data_set_NUM])
#define BhAPI_data_copy (*(BhAPI_data_copy_RETURN (*)BhAPI_data_copy_PROTO) PyBhAPI[BhAPI_data_copy_NUM])
#define BhAPI_slide_view (*(BhAPI_slide_view_RETURN (*)BhAPI_slide_view_PROTO) PyBhAPI[BhAPI_slide_view_NUM])
#define BhAPI_mem_signal_init (*(BhAPI_mem_signal_init_RETURN (*)BhAPI_mem_signal_init_PROTO) PyBhAPI[BhAPI_mem_signal_init_NUM])
#define BhAPI_mem_signal_shutdown (*(BhAPI_mem_signal_shutdown_RETURN (*)BhAPI_mem_signal_shutdown_PROTO) PyBhAPI[BhAPI_mem_signal_shutdown_NUM])
#define BhAPI_mem_signal_attach (*(BhAPI_mem_signal_attach_RETURN (*)BhAPI_mem_signal_attach_PROTO) PyBhAPI[BhAPI_mem_signal_attach_NUM])
#define BhAPI_mem_signal_detach (*(BhAPI_mem_signal_detach_RETURN (*)BhAPI_mem_signal_detach_PROTO) PyBhAPI[BhAPI_mem_signal_detach_NUM])
#define BhAPI_mem_signal_exist (*(BhAPI_mem_signal_exist_RETURN (*)BhAPI_mem_signal_exist_PROTO) PyBhAPI[BhAPI_mem_signal_exist_NUM])
#define BhAPI_user_kernel (*(BhAPI_user_kernel_RETURN (*)BhAPI_user_kernel_PROTO) PyBhAPI[BhAPI_user_kernel_NUM])


#ifdef NO_IMPORT_BH_API
    extern void **PyBhAPI;
#else
    void **PyBhAPI;
    /* Return -1 on error, 0 on success.
     * PyCapsule_Import will set an exception if there's an error.
     */
    static int
    import_bh_api(void)
    {
        PyBhAPI = (void **)PyCapsule_Import("bohrium_api._C_API", 0);
        return (PyBhAPI != NULL) ? 0 : -1;
    }
#endif
#endif

#ifdef __cplusplus
}
#endif
#endif /* !defined(BH_API_H) */
