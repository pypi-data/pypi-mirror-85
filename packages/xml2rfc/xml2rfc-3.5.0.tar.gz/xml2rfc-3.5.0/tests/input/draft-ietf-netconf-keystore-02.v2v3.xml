<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->
<rfc ipr="trust200902" obsoletes="" updates="" submissionType="IETF" xml:lang="en" version="3" category="info">
  <front>
    <title>Keystore Model</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-keystore-02"/>
    <seriesInfo name="std" value=""/>
    <author initials="K.W." surname="Watsen" fullname="Kent Watsen">
      <organization>Juniper Networks</organization>
      <address>
        <email>kwatsen@juniper.net</email>
      </address>
    </author>
    <date/>
    <area>Operations</area>
    <workgroup>NETCONF Working Group</workgroup>
    <abstract>
      <t>This document defines a YANG data module for a system-level keystore mechanism, that might be used to hold onto private keys and certificates that are trusted by the system advertising support for this module.</t>
    </abstract>
    <note>
      <name>Editorial Note (To be removed by RFC Editor)</name>
      <t>This draft contains many placeholder values that need to be replaced with finalized values at the time of publication.  This note summarizes all of the substitutions that are needed.  No other RFC Editor instructions are specified elsewhere in this document.</t>
      <t>Artwork in this document contains shorthand references to drafts in progress.  Please apply the following replacements: </t>
      <ul spacing="compact">
        <li><tt>VVVV</tt> --&gt; the assigned RFC value for this draft</li>
      </ul>
      <t>Artwork in this document contains placeholder values for the date of publication of this draft.  Please apply the following replacement: </t>
      <ul spacing="compact">
        <li><tt>2017-06-13</tt> --&gt; the publication date of this draft</li>
      </ul>
      <t>The following Appendix section is to be removed prior to publication: </t>
      <ul spacing="compact">
        <li>Appendix A.  Change Log</li>
      </ul>
    </note>
  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction</name>
      <t>This document defines a YANG <xref target="RFC6020" format="default"/> data module for a system-level keystore mechanism, which can be used to hold onto private keys and certificates that are trusted by the system advertising support for this module.</t>
      <t>This module provides a centralized location for security sensitive data, so that the data can be then referenced by other modules.  There are two types of data that are maintained by this module: </t>
      <ul spacing="compact">
        <li>Private keys, and any associated public certificates.</li>
        <li>Sets of trusted certificates.</li>
      </ul>
      <t>This document extends special consideration for systems that have Trusted Protection Modules (TPMs).  These systems are unique in that the TPM must be directed to generate new private keys (it is not possible to load a private key into a TPM) and it is not possible to backup/restore the TPM's private keys as configuration.</t>
      <t>It is not required that a system has an operating system level keystore utility to implement this module.</t>
      <section numbered="true" toc="default">
        <name>Requirements Language</name>
        <t>The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 <xref target="RFC2119" format="default"/>.</t>
      </section>
      <section anchor="tree-diagrams" numbered="true" toc="default">
        <name>Tree Diagram Notation</name>
        <t>A simplified graphical representation of the data models is used in this document.  The meaning of the symbols in these diagrams is as follows: </t>
        <ul spacing="compact">
          <li>Brackets "[" and "]" enclose list keys.</li>
          <li>Braces "{" and "}" enclose feature names, and indicate that the named feature must be present for the subtree to be present.</li>
          <li>Abbreviations before data node names: "rw" means configuration (read-write) and "ro" state data (read-only).</li>
          <li>Symbols after data node names: "?" means an optional node, "!" means a presence container, and "*" denotes a list and leaf-list.</li>
          <li>Parentheses enclose choice and case nodes, and case nodes are also marked with a colon (":").</li>
          <li>Ellipsis ("...") stands for contents of subtrees that are not shown.</li>
        </ul>
      </section>
    </section>
    <section anchor="keystore-model" numbered="true" toc="default">
      <name>The Keystore Model</name>
      <t>The keystore module defined in this section provides a configurable object having the following characteristics: </t>
      <ul spacing="compact">
        <li>A semi-configurable list of private keys, each with one or more associated certificates.  Private keys MUST be either preinstalled (e.g., a key associated to an IDevID <xref target="Std-802.1AR-2009" format="default"/> certificate), be generated by request, or be loaded by request.  Each private key is MAY have associated certificates, either preinstalled or configured after creation.</li>
        <li>A configurable list of lists of trust anchor certificates.  This enables the server to have use-case specific trust anchors.  For instance, one list of trust anchors might be used to authenticate management connections (e.g., client certificate-based authentication for NETCONF or RESTCONF connections), and a different list of trust anchors might be used for when connecting to a specific Internet-based service (e.g., a zero touch bootstrap server).</li>
        <li>An RPC to generate a certificate signing request for an existing private key, a passed subject, and an optional attributes.  The signed certificate returned from an external certificate authority (CA) can be later set using a standard configuration change request (e.g., &lt;edit-config&gt;).</li>
        <li>An RPC to request the server to generate a new private key using the specified algorithm and key length.</li>
        <li>An RPC to request the server to load a new private key.</li>
      </ul>
      <section numbered="true" toc="default">
        <name>Overview</name>
        <t>The keystore module has the following tree diagram.  Please see <xref target="tree-diagrams" format="default"/> for information on how to interpret this diagram.  </t>
        <figure>
          <artwork name="" type="" align="left" alt=""><![CDATA[
module: ietf-keystore
    +--rw keystore
       +--rw keys
       |  +--rw key* [name]
       |  |  +--rw name                                    string
       |  |  +--rw algorithm-identifier                    identityref
       |  |  +--rw private-key                             union
       |  |  +--ro public-key                              binary
       |  |  +--rw certificates
       |  |  |  +--rw certificate* [name]
       |  |  |     +--rw name     string
       |  |  |     +--rw value?   binary
       |  |  +---x generate-certificate-signing-request
       |  |     +---w input
       |  |     |  +---w subject       binary
       |  |     |  +---w attributes?   binary
       |  |     +--ro output
       |  |        +--ro certificate-signing-request    binary
       |  +---x generate-private-key
       |     +---w input
       |        +---w name         string
       |        +---w algorithm    identityref
       +--rw trusted-certificates* [name]
       |  +--rw name                   string
       |  +--rw description?           string
       |  +--rw trusted-certificate* [name]
       |     +--rw name           string
       |     +--rw certificate?   binary
       +--rw trusted-host-keys* [name]
          +--rw name                string
          +--rw description?        string
          +--rw trusted-host-key* [name]
             +--rw name        string
             +--rw host-key    binary

  notifications:
    +---n certificate-expiration
       +--ro certificate        instance-identifier
       +--ro expiration-date    yang:date-and-time
]]></artwork>
        </figure>
      </section>
      <section numbered="true" toc="default">
        <name>Example Usage</name>
        <t>The following example illustrates what a fully configured keystore object might look like.  The private-key shown below is consistent with the generate-private-key and generate-certificate-signing-request examples above.  This example also assumes that the resulting CA-signed certificate has been configured back onto the server.  Lastly, this example shows that three lists of trusted certificates having been configured.</t>
        <figure>
          <artwork name="" type="" align="left" alt=""><![CDATA[
<keystore xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore">

  <!-- private keys and associated certificates -->
  <keys>
    <key>
      <name>ex-rsa-key</name>
      <algorithm-identifier>rsa1024</algorithm-identifier>
      <private-key>Base64-encoded RSA Private Key</private-key>
      <public-key>Base64-encoded RSA Public Key</public-key>
      <certificates>
        <certificate>
          <name>ex-rsa-cert</name>
          <value>Base64-encoded PKCS#7</value>
        </certificate>
      </certificates>
    </key>
 
    <key>
      <name>tls-ec-key</name>
      <algorithm-identifier>secp256r1</algorithm-identifier>
      <private-key>Base64-encoded EC Private Key</private-key>
      <public-key>Base64-encoded EC Public Key</public-key>
      <certificates>
        <certificate>
          <name>tls-ec-cert</name>
          <value>Base64-encoded PKCS#7</value>
        </certificate>
      </certificates>
    </key>

    <key>
      <name>tpm-protected-key</name>
      <algorithm-identifier>rsa2048</algorithm-identifier>
      <private-key>Base64-encoded RSA Private Key</private-key>
      <public-key>Base64-encoded RSA Public Key</public-key>
      <certificates>
        <certificate>
          <name>builtin-idevid-cert</name>
          <value>Base64-encoded PKCS#7</value>
        </certificate>
        <certificate>
          <name>my-ldevid-cert</name>
          <value>Base64-encoded PKCS#7</value>
        </certificate>
      </certificates>
    </key>
  </keys>

  <!-- trusted netconf/restconf client certificates -->
  <trusted-certificates>
    <name>explicitly-trusted-client-certs</name>
    <description>
      Specific client authentication certificates for explicitly
      trusted clients.  These are needed for client certificates
      that are not signed by a trusted CA.
    </description>
    <trusted-certificate>
      <name>George Jetson</name>
      <certificate>Base64-encoded X.509v3</certificate>
    </trusted-certificate>
  </trusted-certificates>

  <trusted-certificates>
    <name>explicitly-trusted-server-certs</name>
    <description>
      Specific server authentication certificates for explicitly
      trusted servers.  These are needed for server certificates
      that are not signed by a trusted CA.
    </description>
    <trusted-certificate>
      <name>Fred Flintstone</name>
      <certificate>Base64-encoded X.509v3</certificate>
    </trusted-certificate>
  </trusted-certificates>

  <!-- trust anchors (CA certs) for authenticating clients -->
  <trusted-certificates>
    <name>deployment-specific-ca-certs</name>
    <description>
      Trust anchors (i.e. CA certs) that are used to authenticate 
      client connections.  Clients are authenticated if their
      certificate has a chain of trust to one of these configured
      CA certificates.
    </description>
    <trusted-certificate>
      <name>ca.example.com</name>
      <certificate>Base64-encoded X.509v3</certificate>
    </trusted-certificate>
  </trusted-certificates>

  <!-- trust anchors for random HTTPS servers on Internet -->
  <trusted-certificates>
    <name>common-ca-certs</name>
    <description>
      Trusted certificates to authenticate common HTTPS servers.
      These certificates are similar to those that might be
      shipped with a web browser.
    </description>
    <trusted-certificate>
      <name>ex-certificate-authority</name>
      <certificate>Base64-encoded X.509v3</certificate>
    </trusted-certificate>
  </trusted-certificates>

  <!-- trusted SSH host keys -->
  <trusted-host-keys>
    <name>explicitly-trusted-ssh-host-keys</name>
    <description>
      Trusted SSH host keys used to authenticate SSH servers.
      These host keys would be analogous to those stored in
      a known_hosts file in OpenSSH.
    </description>
    <trusted-host-key>
      <name>corp-fw1</name>
      <host-key>Base64-encoded OneAsymmetricKey</host-key>
    </trusted-host-key>
  </trusted-host-keys>

</keystore>
]]></artwork>
        </figure>
        <t>The following example illustrates the "generate-certificate-signing-request" action in use with the NETCONF protocol.</t>
        <figure>
          <artwork name="" type="" align="left" alt=""><![CDATA[
REQUEST
-------

  <rpc message-id="101"
    xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
    <action xmlns="urn:ietf:params:xml:ns:yang:1">
      <keystore 
        xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore">
        <keys>
          <key>
            <name>ex-key-sect571r1</name>
            <generate-certificate-signing-request>
              <subject>
               cztvaWRoc2RmZ2tqaHNkZmdramRzZnZzZGtmam5idnNvO2R
               manZvO3NkZmJpdmhzZGZpbHVidjtvc2lkZmhidml1bHNlmO
               Z2aXNiZGZpYmhzZG87ZmJvO3NkZ25iO29pLmR6Zgo=
              </subject>
              <attributes>
               bwtakWRoc2RmZ2tqaHNkZmdramRzZnZzZGtmam5idnNvut4
               arnZvO3NkZmJpdmhzZGZpbHVidjtvc2lkZmhidml1bHNkYm
               Z2aXNiZGZpYmhzZG87ZmJvO3NkZ25iO29pLmC6Rhp=
              </attributes>
            </generate-certificate-signing-request>
          </key>
        </keys>
      </keystore>
    </action>
  </rpc>


RESPONSE
--------

  <rpc-reply message-id="101"
     xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
     <certificate-signing-request
       xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore">
       LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNrekNDQWZ5Z
       0F3SUJBZ0lKQUpRT2t3bGpNK2pjTUEwR0NTcUdTSWIzRFFFQkJRVU
       FNRFF4Q3pBSkJnTlYKQkFZVEFsVlRNUkF3RGdZRFZRUUtFd2RsZUd
       GdGNHeGxNUk13RVFZRFZRUURFd3BEVWt3Z1NYTnpkV1Z5TUI0WApE
       diR1V4RXpBUkJnTlZCQU1UQ2tOU1RDQkpjM04xWlhJd2daOHdEUVl
       KS29aSWh2Y04KQVFFQkJRQURnWTBBTUlHSkFvR0JBTXVvZmFPNEV3
       El1QWMrQ1RsTkNmc0d6cEw1Um5ydXZsOFRIcUJTdGZQY3N0Zk1KT1
       FaNzlnNlNWVldsMldzaHE1bUViCkJNNitGNzdjbTAvU25FcFE0TnV
       bXBDT2YKQWdNQkFBR2pnYXd3Z2Frd0hRWURWUjBPQkJZRUZKY1o2W
       URiR0lPNDB4ajlPb3JtREdsRUNCVTFNR1FHQTFVZApJd1JkTUZ1QU
       ZKY1o2WURiR0lPNDB4ajlPb3JtREdsRUNCVTFvVGlrTmpBME1Rc3d
       mMKTUE0R0ExVWREd0VCL3dRRUF3SUNCREFTQmdOVkhSTUJBZjhFQ0
       RBR0FRSC9BZ0VBTUEwR0NTcUdTSWIzRFFFQgpCUVVBQTRHQkFMMmx
       rWmFGNWcyaGR6MVNhZnZPbnBneHA4eG00SHRhbStadHpLazFlS3Bx
       TXp4YXJCbFpDSHlLCklVbC9GVzRtV1RQS1VDeEtFTE40NEY2Zmk2d
       c4d0tSSElkYW1WL0pGTmlQS0VXSTF4K1I1aDZmazcrQzQ1QXg1RWV
       SWHgzZjdVM2xZTgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
     </certificate-signing-request>
  </rpc-reply>

]]></artwork>
        </figure>
        <t>The following example illustrates the "generate-private-key" action in use with the RESTCONF protocol and JSON encoding.</t>
        <figure>
          <artwork name="" type="" align="left" alt=""><![CDATA[
REQUEST
-------

  ['\' line wrapping added for formatting only]
  
  POST https://example.com/restconf/data/ietf-keystore:keystore/\
  keys/generate-private-key HTTP/1.1
  HOST: example.com
  Content-Type: application/yang.operation+json
  
  {
    "ietf-keystore:input" : {
      "name" : "ex-key-sect571r1",
      "algorithm" : "sect571r1"
    }
  }


RESPONSE
--------

  HTTP/1.1 204 No Content
  Date: Mon, 31 Oct 2015 11:01:00 GMT
  Server: example-server

]]></artwork>
        </figure>
        <t>The following example illustrates a "certificate-expiration" notification in XML.</t>
        <figure>
          <artwork name="" type="" align="left" alt=""><![CDATA[
['\' line wrapping added for formatting only]

<notification
  xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
  <eventTime>2016-07-08T00:01:00Z</eventTime>
  <certificate-expiration 
    xmlns="urn:ietf:params:xml:ns:yang:ietf-keystore">
    <certificate>/ks:keystore/ks:private-keys/ks:private-key\
    /ks:certificate-chains/ks:certificate-chain/ks:certificate[3]\
    </certificate>
    <expiration-date>2016-08-08T14:18:53-05:00</expiration-date>
  </certificate-expiration>
</notification>
]]></artwork>
        </figure>
      </section>
      <section anchor="keystore-yang-module" numbered="true" toc="default">
        <name>YANG Module</name>
        <t>This YANG module makes extensive use of data types defined in <xref target="RFC5280" format="default"/> and <xref target="RFC5958" format="default"/>.</t>
        <figure>
          <sourcecode name="ietf-keystore@2017-06-13.yang" type="">

module ietf-keystore {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-keystore";
  prefix "ks";

  import ietf-yang-types {
    prefix yang;
    reference 
      "RFC 6991: Common YANG Data Types";
  }

  import ietf-netconf-acm {
    prefix nacm;
    reference
      "RFC 6536: Network Configuration Protocol (NETCONF) Access
       Control Model";
  }

  organization
   "IETF NETCONF (Network Configuration) Working Group";

  contact
   "WG Web:   &lt;http://tools.ietf.org/wg/netconf/&gt;
    WG List:  &lt;mailto:netconf@ietf.org&gt;

    Author:   Kent Watsen
              &lt;mailto:kwatsen@juniper.net&gt;";


  description
   "This module defines a keystore to centralize management
    of security credentials.

    Copyright (c) 2014 IETF Trust and the persons identified
    as authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with
    or without modification, is permitted pursuant to, and
    subject to the license terms contained in, the Simplified
    BSD License set forth in Section 4.c of the IETF Trust's
    Legal Provisions Relating to IETF Documents
    (http://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC VVVV; see
    the RFC itself for full legal notices.";

  revision "2017-06-13" {
    description
     "Initial version";
    reference
     "RFC VVVV: NETCONF Server and RESTCONF Server Configuration 
                Models";
  }

  // Identities

  identity key-algorithm {
    description
      "Base identity from which all key-algorithms are derived.";
  }

  identity rsa1024 {
    base key-algorithm;
    description
      "The RSA algorithm using a 1024-bit key.";
    reference
      "RFC3447: Public-Key Cryptography Standards (PKCS) #1:
                RSA Cryptography Specifications Version 2.1.";
  }

  identity rsa2048 {
    base key-algorithm;
    description
      "The RSA algorithm using a 2048-bit key.";
    reference
      "RFC3447: Public-Key Cryptography Standards (PKCS) #1:
                RSA Cryptography Specifications Version 2.1.";
  }

  identity rsa3072 {
    base key-algorithm;
    description
      "The RSA algorithm using a 3072-bit key.";
    reference
      "RFC3447: Public-Key Cryptography Standards (PKCS) #1:
                RSA Cryptography Specifications Version 2.1.";
  }

  identity rsa4096 {
    base key-algorithm;
    description
      "The RSA algorithm using a 4096-bit key.";
    reference
      "RFC3447: Public-Key Cryptography Standards (PKCS) #1:
                RSA Cryptography Specifications Version 2.1.";
  }

  identity rsa7680 {
    base key-algorithm;
    description
      "The RSA algorithm using a 7680-bit key.";
    reference
      "RFC3447: Public-Key Cryptography Standards (PKCS) #1:
                RSA Cryptography Specifications Version 2.1.";
  }

  identity rsa15360 {
    base key-algorithm;
    description
      "The RSA algorithm using a 15360-bit key.";
    reference
      "RFC3447: Public-Key Cryptography Standards (PKCS) #1:
                RSA Cryptography Specifications Version 2.1.";
  }

  identity secp192r1 {
    base key-algorithm;
    description
      "The secp192r1 algorithm.";
    reference
      "RFC5480: 
         Elliptic Curve Cryptography Subject Public Key Information.";
  }

  identity secp256r1 {
    base key-algorithm;
    description
      "The secp256r1 algorithm.";
    reference
      "RFC5480: 
         Elliptic Curve Cryptography Subject Public Key Information.";
  }

  identity secp384r1 {
    base key-algorithm;
    description
      "The secp384r1 algorithm.";
    reference
      "RFC5480: 
         Elliptic Curve Cryptography Subject Public Key Information.";
  }

  identity secp521r1 {
    base key-algorithm;
    description
      "The secp521r1 algorithm.";
    reference
      "RFC5480: 
         Elliptic Curve Cryptography Subject Public Key Information.";
  }

  // data model

  container keystore {
    nacm:default-deny-write;
    description
      "The keystore contains both active material (e.g., private keys
       and passwords) and passive material (e.g., trust anchors).

       The active material can be used to support either a server (e.g.,
       a TLS/SSH server's private) or a client (a private key used for
       TLS/SSH client-certificate based authentication, or a password
       used for SSH/HTTP-client authentication).

       The passive material can be used to support either a server 
       (e.g., client certificates to trust) or clients (e.g., server
       certificates to trust).";

    container keys {
      description
        "A list of keys maintained by the keystore.";
      list key {
        key name;
        description
          "A key maintained by the keystore.";
        leaf name {
          type string;
          description
            "An arbitrary name for the key.";
        }
        leaf algorithm-identifier {
          type identityref {
            base "key-algorithm";
          }
          mandatory true;
          description
            "Identifies which algorithm is to be used to generate the
             key."; 
             // no 'params' like in RFC 5912? - none are set for
             // algs we care about, but what about the future?
        }
        leaf private-key {
          nacm:default-deny-all;
          type union {
            type binary;
            type enumeration {
              enum "INACCESSIBLE" {
                description
                 "The private key is inaccessible due to being protected
                  by a cryptographic hardware module (e.g., a TPM).";
              }
            }
          }
          mandatory true;
          description
            "A binary string that contains the value of the private
             key. The interpretation of the content is defined in the
             registration of the key algorithm.  For example, a DSA key
             is an INTEGER, an RSA key is represented as RSAPrivateKey
             as defined in [RFC3447], and an Elliptic Curve Cryptography
             (ECC) key is represented as ECPrivateKey as defined in
             [RFC5915]"; // text lifted from RFC5958
        }

        // no key usage (ref: RFC 5912, pg 101 -- too X.509 specific?)

        leaf public-key {
          type binary;
          config false;
          mandatory true;
          description
            "A binary string that contains the value of the public
             key. The interpretation of the content is defined in the
             registration of the key algorithm.  For example, a DSA key
             is an INTEGER, an RSA key is represented as RSAPublicKey
             as defined in [RFC3447], and an Elliptic Curve Cryptography
             (ECC) key is represented using the 'publicKey' described in
             [RFC5915]";
        }
        container certificates {
          description
            "Certificates associated with this private key.  More
             than one certificate per key is enabled to support, 
             for instance, a TPM-protected key that has associated
             both IDevID and LDevID certificates.";
          list certificate {
            key name;
            description
              "A certificate for this private key.";
            leaf name {
              type string;
              description
                "An arbitrary name for the certificate.  The name
                 must be a unique across all keys, not just within
                 this key.";
            }
            leaf value {
              type binary;
              description
               "An unsigned PKCS #7 SignedData structure, as specified
                by Section 9.1 in RFC 2315, containing just certificates
                (no content, signatures, or CRLs), encoded using ASN.1
                distinguished encoding rules (DER), as specified in
                ITU-T X.690.
        
                This structure contains, in order, the certificate
                itself and all intermediate certificates leading up
                to a trust anchor certificate.  The certificate MAY
                optionally include the trust anchor certificate.";
              reference
                "RFC 2315:
                   PKCS #7: Cryptographic Message Syntax Version 1.5.
                 ITU-T X.690:
                   Information technology – ASN.1 encoding rules:
                   Specification of Basic Encoding Rules (BER),
                   Canonical Encoding Rules (CER) and Distinguished
                   Encoding Rules (DER).";
            }
          }
        }
        action generate-certificate-signing-request {
          description
            "Generates a certificate signing request structure for
             the associated private key using the passed subject and
             attribute values.  The specified assertions need to be
             appropriate for the certificate's use.  For example,
             an entity certificate for a TLS server SHOULD have
             values that enable clients to satisfy RFC 6125
             processing.";
          input {
            leaf subject {
              type binary;
              mandatory true;
              description
                "The 'subject' field from the CertificationRequestInfo
                 structure as specified by RFC 2986, Section 4.1 encoded
                 using the ASN.1 distinguished encoding rules (DER), as
                 specified in ITU-T X.690.";
              reference
                "RFC 2986:
                   PKCS #10: Certification Request Syntax Specification
                   Version 1.7.
                 ITU-T X.690:
                    Information technology – ASN.1 encoding rules:
                    Specification of Basic Encoding Rules (BER), 
                    Canonical Encoding Rules (CER) and Distinguished
                    Encoding Rules (DER).";
            } 
            leaf attributes {
              type binary;
              description 
               "The 'attributes' field from the CertificationRequestInfo
                structure as specified by RFC 2986, Section 4.1 encoded
                using the ASN.1 distinguished encoding rules (DER), as
                specified in ITU-T X.690.";
              reference
                "RFC 2986:
                   PKCS #10: Certification Request Syntax Specification
                   Version 1.7.
                 ITU-T X.690:
                    Information technology – ASN.1 encoding rules:
                    Specification of Basic Encoding Rules (BER), 
                    Canonical Encoding Rules (CER) and Distinguished
                    Encoding Rules (DER).";
            }
          }
          output {
            leaf certificate-signing-request {
              type binary;
              mandatory true;
              description
                "A CertificationRequest structure as specified by RFC
                 2986, Section 4.1 encoded using the ASN.1 distinguished
                 encoding rules (DER), as specified in ITU-T X.690.";
              reference
                "RFC 2986:
                   PKCS #10: Certification Request Syntax Specification
                   Version 1.7.
                 ITU-T X.690:
                    Information technology – ASN.1 encoding rules:
                    Specification of Basic Encoding Rules (BER), 
                    Canonical Encoding Rules (CER) and Distinguished
                    Encoding Rules (DER).";

            }
          }
        }
      } // end key

      action generate-private-key {
        description
          "Requests the device to generate a private key using the
           specified key algorithm.  This action is primarily to
           support cryptographic processors that MUST generate
           the private key themselves.  The resulting key is
           considered operational state and hence initially only
           present in the &lt;operational&gt; datastore, as defined in
           [I-D.netmod-revised-datastores].";
        input {
          leaf name {
            type string;
            mandatory true;
            description
              "The name this private-key should have when listed
               in /keys/key.  As such, the passed value MUST NOT
               match any existing 'name' value.";
          }
          leaf algorithm {
            type identityref {
              base "key-algorithm";
            }
            mandatory true;
            description
              "The algorithm to be used when generating the key.";
          }
        }
      } // end generate-private-key
    } // end keys

    list trusted-certificates {
      key name;
      description
        "A list of trusted certificates.  These certificates
         can be used by a server to authenticate clients, or by
         clients to authenticate servers.  The certificates may
         be endpoint specific or for certificate authorities,
         to authenticate many clients at once.  Each list of
         certificates SHOULD be specific to a purpose, as the
         list as a whole may be referenced by other modules.
         For instance, a NETCONF server model might point to
         a list of certificates to use when authenticating
         client certificates.";
      leaf name {
        type string;
        description
          "An arbitrary name for this list of trusted certificates.";
      }
      leaf description {
        type string;
        description
          "An arbitrary description for this list of trusted
           certificates.";
      }
      list trusted-certificate {
        key name;
        description
          "A trusted certificate for a specific use.  Note, this
           'certificate' is a list in order to encode any 
           associated intermediate certificates.";
        leaf name {
          type string;
          description
            "An arbitrary name for this trusted certificate. Must
             be unique across all lists of trusted certificates
             (not just this list) so that a leafref to it from
             another module can resolve to unique values.";
        }
        leaf certificate {  // rename to 'data'?
          type binary;
          description
            "An X.509 v3 certificate structure as specified by RFC
             5280, Section 4 encoded using the ASN.1 distinguished
             encoding rules (DER), as specified in ITU-T X.690.";
          reference
            "RFC 5280:
               Internet X.509 Public Key Infrastructure Certificate
               and Certificate Revocation List (CRL) Profile.
             ITU-T X.690:
                Information technology – ASN.1 encoding rules:
                Specification of Basic Encoding Rules (BER), 
                Canonical Encoding Rules (CER) and Distinguished
                Encoding Rules (DER).";
        }
      }
    }

    list trusted-host-keys {
      key name;
      description
        "A list of trusted host-keys.  These host-keys can be used
         by clients to authenticate SSH servers.  The host-keys are
         endpoint specific.  Each list of host-keys SHOULD be 
         specific to a purpose, as the list as a whole may be
         referenced by other modules.  For instance, a NETCONF
         client model might point to a list of host-keys to use
         when authenticating servers host-keys.";
      leaf name {
        type string;
        description
          "An arbitrary name for this list of trusted SSH host keys.";
      }
      leaf description {
        type string;
        description
          "An arbitrary description for this list of trusted SSH host
           keys.";
      }
      list trusted-host-key {
        key name;
        description
          "A trusted host key.";
        leaf name {
          type string;
          description
            "An arbitrary name for this trusted host-key. Must be
             unique across all lists of trusted host-keys (not just
             this list) so that a leafref to it from another module
             can resolve to unique values.

             Note that, for when the SSH client is able to listen 
             for call-home connections as well, there is no reference
             identifier (e.g., hostname, IP address, etc.) that it
             can use to uniquely identify the server with.  The
             call-home draft recommends SSH servers use X.509v3
             certificates (RFC6187) when calling home.";
        }
        leaf host-key {  // rename to 'data'?
          type binary;
          mandatory true;
          description  // is this the correct type?
            "An OneAsymmetricKey 'publicKey' structure as specified
             by RFC 5958, Section 2 encoded using the ASN.1 
             distinguished encoding rules (DER), as specified
             in ITU-T X.690.";
          reference
            "RFC 5958:
                Asymmetric Key Packages
             ITU-T X.690:
                Information technology – ASN.1 encoding rules:
                Specification of Basic Encoding Rules (BER), 
                Canonical Encoding Rules (CER) and Distinguished
                Encoding Rules (DER).";
        }
      }
    }
  }

  notification certificate-expiration {
    description
      "A notification indicating that a configured certificate is 
       either about to expire or has already expired.  When to send
       notifications is an implementation specific decision, but
       it is RECOMMENDED that a notification be sent once a month
       for 3 months, then once a week for four weeks, and then once
       a day thereafter.";
    leaf certificate {
      type instance-identifier;
      mandatory true;
      description
        "Identifies which certificate is expiring or is expired.";
    }
    leaf expiration-date {
      type yang:date-and-time;
      mandatory true;
      description
        "Identifies the expiration date on the certificate.";
    }
  }

}


</sourcecode>
        </figure>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>Design Considerations</name>
      <t>This document uses PKCS #10 <xref target="RFC2986" format="default"/> for the "generate-certificate-signing-request" action.  The use of Certificate Request Message Format (CRMF) <xref target="RFC4211" format="default"/> was considered, but is was unclear if there was market demand for it, and so support for CRMF has been left out of this specification.  If it is desired to support CRMF in the future, placing a "choice" statement in both the input and output statements, along with an "if-feature" statement on the CRMF option, would enable a backwards compatible solution.</t>
      <t>This document puts a limit of the number of elliptical curves supported by default.  This was done to match industry trends in IETF best practice (e.g., matching work being done in TLS 1.3).  If additional algorithms are needed, they MAY be augmented in by another module, or added directly in a future version of this document.</t>
      <t>For the trusted-certificates list, Trust Anchor Format <xref target="RFC5914" format="default"/> was evaluated and deemed inappropriate due to this document's need to also support pinning.  That is, pinning a client-certificate to support NETCONF over TLS client authentication.</t>
    </section>
    <section numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The YANG module defined in this document is designed to be accessed via YANG based management protocols, such as NETCONF <xref target="RFC6241" format="default"/> and RESTCONF <xref target="RFC8040" format="default"/>.  Both of these protocols have mandatory-to-implement secure transport layers (e.g., SSH, TLS) with mutual authentication.</t>
      <t>The NETCONF access control model (NACM) <xref target="RFC6536" format="default"/> provides the means to restrict access for particular users to a pre-configured subset of all available protocol operations and content.</t>
      <t>There are a number of data nodes defined in this YANG module that are writable/creatable/deletable (i.e., config true, which is the default). These data nodes may be considered sensitive or vulnerable in some network environments. Write operations (e.g., edit-config) to these data nodes without proper protection can have a negative effect on network operations. These are the subtrees and data nodes and their sensitivity/vulnerability: </t>
      <dl spacing="compact">
        <dt>   /:</dt>
        <dd>The entire data tree defined by this module is sensitive to write operations.  For instance, the addition or removal of keys, certificates, trusted anchors, etc., can dramatically alter the implemented security policy.  This being the case, the top-level node in this module is marked with the NACM value 'default-deny-write'.</dd>
        <dt>   /keystore/keys/key/private-key:</dt>
        <dd>When writing this node, implementations MUST ensure that the strength of the key being configured is not greater than the strength of the underlying secure transport connection over which it is communicated.  Implementations SHOULD fail the write-request if ever the strength of the private key is greater then the strength of the underlying transport, and alert the client that the strength of the key may have been compromised.  Additionally, when deleting this node, implementations SHOULD automatically (without explicit request) zeroize these keys in the most secure manner available, so as to prevent the remnants of their persisted storage locations from being analyzed in any meaningful way.</dd>
      </dl>
      <t>Some of the readable data nodes in this YANG module may be considered sensitive or vulnerable in some network environments. It is thus important to control read access (e.g., via get, get-config, or notification) to these data nodes. These are the subtrees and data nodes and their sensitivity/vulnerability: </t>
      <dl spacing="compact">
        <dt>   /keystore/keys/key/private-key:</dt>
        <dd>This node is additionally sensitive to read operations such that, in normal use cases, it should never be returned to a client.  The best reason for returning this node is to support backup/restore type workflows.  This being the case, this node is marked with the NACM value 'default-deny-all'.</dd>
      </dl>
      <t>Some of the RPC operations in this YANG module may be considered sensitive or vulnerable in some network environments. It is thus important to control access to these operations. These are the operations and their sensitivity/vulnerability: </t>
      <dl spacing="compact">
        <dt>   generate-certificate-signing-request:</dt>
        <dd>For this RPC operation, it is RECOMMENDED that implementations assert channel binding <xref target="RFC5056" format="default"/>, so as to ensure that the application layer that sent the request is the same as the device authenticated when the secure transport layer was established.</dd>
      </dl>
    </section>
    <section numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section numbered="true" toc="default">
        <name>The IETF XML Registry</name>
        <t>This document registers one URI in the IETF XML registry <xref target="RFC3688" format="default"/>.  Following the format in <xref target="RFC3688" format="default"/>, the following registration is requested:</t>
        <figure>
          <artwork name="" type="" align="left" alt=""><![CDATA[
   URI: urn:ietf:params:xml:ns:yang:ietf-keystore
   Registrant Contact: The NETCONF WG of the IETF.
   XML: N/A, the requested URI is an XML namespace.
]]></artwork>
        </figure>
      </section>
      <section numbered="true" toc="default">
        <name>The YANG Module Names Registry</name>
        <t>This document registers one YANG module in the YANG Module Names registry <xref target="RFC6020" format="default"/>.  Following the format in <xref target="RFC6020" format="default"/>, the the following registration is requested:</t>
        <figure>
          <artwork name="" type="" align="left" alt=""><![CDATA[
   name:         ietf-keystore
   namespace:    urn:ietf:params:xml:ns:yang:ietf-keystore
   prefix:       kc
   reference:    RFC VVVV

]]></artwork>
        </figure>
      </section>
    </section>
    <section numbered="true" toc="default">
      <name>Acknowledgements</name>
      <t>The authors would like to thank for following for lively discussions on list and in the halls (ordered by last name): Andy Bierman, Martin Bjorklund, Benoit Claise, Mehmet Ersue, Balázs Kovács, David Lamparter, Alan Luchuk, Ladislav Lhotka, Radek Krejci, Tom Petch, Juergen Schoenwaelder; Phil Shafer, Sean Turner, and Bert Wijnen.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>Normative References</name>
      <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="BCP" value="14"/>
          <author initials="S." surname="Bradner" fullname="S. Bradner">
            <organization/>
          </author>
          <date year="1997" month="March"/>
          <abstract>
            <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC2986" target="https://www.rfc-editor.org/info/rfc2986">
        <front>
          <title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
          <seriesInfo name="DOI" value="10.17487/RFC2986"/>
          <seriesInfo name="RFC" value="2986"/>
          <author initials="M." surname="Nystrom" fullname="M. Nystrom">
            <organization/>
          </author>
          <author initials="B." surname="Kaliski" fullname="B. Kaliski">
            <organization/>
          </author>
          <date year="2000" month="November"/>
          <abstract>
            <t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC5280" target="https://www.rfc-editor.org/info/rfc5280">
        <front>
          <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
          <seriesInfo name="DOI" value="10.17487/RFC5280"/>
          <seriesInfo name="RFC" value="5280"/>
          <author initials="D." surname="Cooper" fullname="D. Cooper">
            <organization/>
          </author>
          <author initials="S." surname="Santesson" fullname="S. Santesson">
            <organization/>
          </author>
          <author initials="S." surname="Farrell" fullname="S. Farrell">
            <organization/>
          </author>
          <author initials="S." surname="Boeyen" fullname="S. Boeyen">
            <organization/>
          </author>
          <author initials="R." surname="Housley" fullname="R. Housley">
            <organization/>
          </author>
          <author initials="W." surname="Polk" fullname="W. Polk">
            <organization/>
          </author>
          <date year="2008" month="May"/>
          <abstract>
            <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC5958" target="https://www.rfc-editor.org/info/rfc5958">
        <front>
          <title>Asymmetric Key Packages</title>
          <seriesInfo name="DOI" value="10.17487/RFC5958"/>
          <seriesInfo name="RFC" value="5958"/>
          <author initials="S." surname="Turner" fullname="S. Turner">
            <organization/>
          </author>
          <date year="2010" month="August"/>
          <abstract>
            <t>This document defines the syntax for private-key information and a content type for it.  Private-key information includes a private key for a specified public-key algorithm and a set of attributes.  The Cryptographic Message Syntax (CMS), as defined in RFC 5652, can be used to digitally sign, digest, authenticate, or encrypt the asymmetric key format content type.  This document obsoletes RFC 5208.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6020" target="https://www.rfc-editor.org/info/rfc6020">
        <front>
          <title>YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)</title>
          <seriesInfo name="DOI" value="10.17487/RFC6020"/>
          <seriesInfo name="RFC" value="6020"/>
          <author initials="M." surname="Bjorklund" fullname="M. Bjorklund" role="editor">
            <organization/>
          </author>
          <date year="2010" month="October"/>
          <abstract>
            <t>YANG is a data modeling language used to model configuration and state data manipulated by the Network Configuration Protocol (NETCONF), NETCONF remote procedure calls, and NETCONF notifications. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6536" target="https://www.rfc-editor.org/info/rfc6536">
        <front>
          <title>Network Configuration Protocol (NETCONF) Access Control Model</title>
          <seriesInfo name="DOI" value="10.17487/RFC6536"/>
          <seriesInfo name="RFC" value="6536"/>
          <author initials="A." surname="Bierman" fullname="A. Bierman">
            <organization/>
          </author>
          <author initials="M." surname="Bjorklund" fullname="M. Bjorklund">
            <organization/>
          </author>
          <date year="2012" month="March"/>
          <abstract>
            <t>The standardization of network configuration interfaces for use with the Network Configuration Protocol (NETCONF) requires a structured and secure operating environment that promotes human usability and multi-vendor interoperability.  There is a need for standard mechanisms to restrict NETCONF protocol access for particular users to a pre-configured subset of all available NETCONF protocol operations and content.  This document defines such an access control model.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
    </references>
    <references>
      <name>Informative References</name>
      <reference anchor="RFC3688" target="https://www.rfc-editor.org/info/rfc3688">
        <front>
          <title>The IETF XML Registry</title>
          <seriesInfo name="DOI" value="10.17487/RFC3688"/>
          <seriesInfo name="RFC" value="3688"/>
          <seriesInfo name="BCP" value="81"/>
          <author initials="M." surname="Mealling" fullname="M. Mealling">
            <organization/>
          </author>
          <date year="2004" month="January"/>
          <abstract>
            <t>This document describes an IANA maintained registry for IETF standards which use Extensible Markup Language (XML) related items such as Namespaces, Document Type Declarations (DTDs), Schemas, and Resource Description Framework (RDF) Schemas.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4211" target="https://www.rfc-editor.org/info/rfc4211">
        <front>
          <title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
          <seriesInfo name="DOI" value="10.17487/RFC4211"/>
          <seriesInfo name="RFC" value="4211"/>
          <author initials="J." surname="Schaad" fullname="J. Schaad">
            <organization/>
          </author>
          <date year="2005" month="September"/>
          <abstract>
            <t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC5056" target="https://www.rfc-editor.org/info/rfc5056">
        <front>
          <title>On the Use of Channel Bindings to Secure Channels</title>
          <seriesInfo name="DOI" value="10.17487/RFC5056"/>
          <seriesInfo name="RFC" value="5056"/>
          <author initials="N." surname="Williams" fullname="N. Williams">
            <organization/>
          </author>
          <date year="2007" month="November"/>
          <abstract>
            <t>The concept of channel binding allows applications to establish that the two end-points of a secure channel at one network layer are the same as at a higher layer by binding authentication at the higher layer to the channel at the lower layer.  This allows applications to delegate session protection to lower layers, which has various performance benefits.</t>
            <t>This document discusses and formalizes the concept of channel binding to secure channels.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC5914" target="https://www.rfc-editor.org/info/rfc5914">
        <front>
          <title>Trust Anchor Format</title>
          <seriesInfo name="DOI" value="10.17487/RFC5914"/>
          <seriesInfo name="RFC" value="5914"/>
          <author initials="R." surname="Housley" fullname="R. Housley">
            <organization/>
          </author>
          <author initials="S." surname="Ashmore" fullname="S. Ashmore">
            <organization/>
          </author>
          <author initials="C." surname="Wallace" fullname="C. Wallace">
            <organization/>
          </author>
          <date year="2010" month="June"/>
          <abstract>
            <t>This document describes a structure for representing trust anchor information.  A trust anchor is an authoritative entity represented by a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information or actions for which the trust anchor is authoritative.  The structures defined in this document are intended to satisfy the format-related requirements defined in Trust Anchor Management Requirements.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6241" target="https://www.rfc-editor.org/info/rfc6241">
        <front>
          <title>Network Configuration Protocol (NETCONF)</title>
          <seriesInfo name="DOI" value="10.17487/RFC6241"/>
          <seriesInfo name="RFC" value="6241"/>
          <author initials="R." surname="Enns" fullname="R. Enns" role="editor">
            <organization/>
          </author>
          <author initials="M." surname="Bjorklund" fullname="M. Bjorklund" role="editor">
            <organization/>
          </author>
          <author initials="J." surname="Schoenwaelder" fullname="J. Schoenwaelder" role="editor">
            <organization/>
          </author>
          <author initials="A." surname="Bierman" fullname="A. Bierman" role="editor">
            <organization/>
          </author>
          <date year="2011" month="June"/>
          <abstract>
            <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8040" target="https://www.rfc-editor.org/info/rfc8040">
        <front>
          <title>RESTCONF Protocol</title>
          <seriesInfo name="DOI" value="10.17487/RFC8040"/>
          <seriesInfo name="RFC" value="8040"/>
          <author initials="A." surname="Bierman" fullname="A. Bierman">
            <organization/>
          </author>
          <author initials="M." surname="Bjorklund" fullname="M. Bjorklund">
            <organization/>
          </author>
          <author initials="K." surname="Watsen" fullname="K. Watsen">
            <organization/>
          </author>
          <date year="2017" month="January"/>
          <abstract>
            <t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="Std-802.1AR-2009" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
        <front>
          <title>IEEE Standard for Local and metropolitan area networks - Secure Device Identity</title>
          <author fullname="WG802.1 - Higher Layer LAN Protocols Working Group">
            <organization>IEEE SA-Standards Board</organization>
          </author>
          <date month="December" year="2009"/>
        </front>
      </reference>
    </references>
    <section numbered="true" toc="default">
      <name>Change Log</name>
      <section numbered="true" toc="default">
        <name>server-model-09 to 00</name>
        <ul spacing="compact">
          <li>This draft was split out from draft-ietf-netconf-server-model-09.</li>
          <li>Removed key-usage parameter from generate-private-key action.</li>
          <li>Now /private-keys/private-key/certificates/certificate/name must be globally unique (unique across all private keys).</li>
          <li>Added top-level 'trusted-ssh-host-keys' and 'user-auth-credentials' to support SSH client modules.</li>
        </ul>
      </section>
      <section numbered="true" toc="default">
        <name>keychain-00 to keystore-00</name>
        <ul spacing="compact">
          <li>Renamed module from "keychain" to "keystore" (Issue #3)</li>
        </ul>
      </section>
      <section numbered="true" toc="default">
        <name>00 to 01</name>
        <ul spacing="compact">
          <li>Replaced the 'certificate-chain' structures with PKCS#7 structures.  (Issue #1)</li>
          <li>Added 'private-key' as a configurable data node, and removed the 'generate-private-key' and 'load-private-key' actions.  (Issue #2)</li>
          <li>Moved 'user-auth-credentials' to the ietf-ssh-client module.  (Issues #4 and #5)</li>
        </ul>
      </section>
      <section numbered="true" toc="default">
        <name>01 to 02</name>
        <ul spacing="compact">
          <li>Added back 'generate-private-key' action.</li>
          <li>Removed 'RESTRICTED' enum from the 'private-key' leaf type.</li>
          <li>Fixed up a few description statements.</li>
        </ul>
      </section>
    </section>
  </back>
</rfc>
