# coding: utf-8

"""
    Marketing API v.1.0

    IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.  # noqa: E501

    The version of the OpenAPI document: v.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ThrottlePolicyRates(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'second': 'int',
        'minute': 'int',
        'hour': 'int',
        'custom': 'int'
    }

    attribute_map = {
        'second': 'second',
        'minute': 'minute',
        'hour': 'hour',
        'custom': 'custom'
    }

    def __init__(self, second=None, minute=None, hour=None, custom=None):  # noqa: E501
        """ThrottlePolicyRates - a model defined in OpenAPI"""  # noqa: E501

        self._second = None
        self._minute = None
        self._hour = None
        self._custom = None
        self.discriminator = None

        if second is not None:
            self.second = second
        if minute is not None:
            self.minute = minute
        if hour is not None:
            self.hour = hour
        if custom is not None:
            self.custom = custom

    @property
    def second(self):
        """Gets the second of this ThrottlePolicyRates.  # noqa: E501


        :return: The second of this ThrottlePolicyRates.  # noqa: E501
        :rtype: int
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this ThrottlePolicyRates.


        :param second: The second of this ThrottlePolicyRates.  # noqa: E501
        :type: int
        """

        self._second = second

    @property
    def minute(self):
        """Gets the minute of this ThrottlePolicyRates.  # noqa: E501


        :return: The minute of this ThrottlePolicyRates.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this ThrottlePolicyRates.


        :param minute: The minute of this ThrottlePolicyRates.  # noqa: E501
        :type: int
        """

        self._minute = minute

    @property
    def hour(self):
        """Gets the hour of this ThrottlePolicyRates.  # noqa: E501


        :return: The hour of this ThrottlePolicyRates.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this ThrottlePolicyRates.


        :param hour: The hour of this ThrottlePolicyRates.  # noqa: E501
        :type: int
        """

        self._hour = hour

    @property
    def custom(self):
        """Gets the custom of this ThrottlePolicyRates.  # noqa: E501


        :return: The custom of this ThrottlePolicyRates.  # noqa: E501
        :rtype: int
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this ThrottlePolicyRates.


        :param custom: The custom of this ThrottlePolicyRates.  # noqa: E501
        :type: int
        """

        self._custom = custom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThrottlePolicyRates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
