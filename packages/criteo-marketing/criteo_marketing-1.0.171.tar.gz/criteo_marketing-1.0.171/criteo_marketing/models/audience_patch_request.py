# coding: utf-8

"""
    Marketing API v.1.0

    IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.  # noqa: E501

    The version of the OpenAPI document: v.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AudiencePatchRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation': 'str',
        'schema': 'str',
        'identifiers': 'list[str]',
        'gum_caller_id': 'int'
    }

    attribute_map = {
        'operation': 'operation',
        'schema': 'schema',
        'identifiers': 'identifiers',
        'gum_caller_id': 'gumCallerId'
    }

    def __init__(self, operation=None, schema=None, identifiers=None, gum_caller_id=None):  # noqa: E501
        """AudiencePatchRequest - a model defined in OpenAPI"""  # noqa: E501

        self._operation = None
        self._schema = None
        self._identifiers = None
        self._gum_caller_id = None
        self.discriminator = None

        if operation is not None:
            self.operation = operation
        if schema is not None:
            self.schema = schema
        if identifiers is not None:
            self.identifiers = identifiers
        if gum_caller_id is not None:
            self.gum_caller_id = gum_caller_id

    @property
    def operation(self):
        """Gets the operation of this AudiencePatchRequest.  # noqa: E501

        Mandatory. The Operation of this request. Can be either 'add' or 'remove'.  # noqa: E501

        :return: The operation of this AudiencePatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this AudiencePatchRequest.

        Mandatory. The Operation of this request. Can be either 'add' or 'remove'.  # noqa: E501

        :param operation: The operation of this AudiencePatchRequest.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def schema(self):
        """Gets the schema of this AudiencePatchRequest.  # noqa: E501

        Mandatory. The Schema specified for the identifiers. Can be 'email', 'madid', 'identityLink' or 'gum'.  # noqa: E501

        :return: The schema of this AudiencePatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this AudiencePatchRequest.

        Mandatory. The Schema specified for the identifiers. Can be 'email', 'madid', 'identityLink' or 'gum'.  # noqa: E501

        :param schema: The schema of this AudiencePatchRequest.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def identifiers(self):
        """Gets the identifiers of this AudiencePatchRequest.  # noqa: E501

        Mandatory. The identifiers.  # noqa: E501

        :return: The identifiers of this AudiencePatchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this AudiencePatchRequest.

        Mandatory. The identifiers.  # noqa: E501

        :param identifiers: The identifiers of this AudiencePatchRequest.  # noqa: E501
        :type: list[str]
        """

        self._identifiers = identifiers

    @property
    def gum_caller_id(self):
        """Gets the gum_caller_id of this AudiencePatchRequest.  # noqa: E501

        Optional. GumCallerId required only when patching identifiers with 'gum' schema.  # noqa: E501

        :return: The gum_caller_id of this AudiencePatchRequest.  # noqa: E501
        :rtype: int
        """
        return self._gum_caller_id

    @gum_caller_id.setter
    def gum_caller_id(self, gum_caller_id):
        """Sets the gum_caller_id of this AudiencePatchRequest.

        Optional. GumCallerId required only when patching identifiers with 'gum' schema.  # noqa: E501

        :param gum_caller_id: The gum_caller_id of this AudiencePatchRequest.  # noqa: E501
        :type: int
        """

        self._gum_caller_id = gum_caller_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudiencePatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
