# coding: utf-8

"""
    Marketing API v.1.0

    IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.  # noqa: E501

    The version of the OpenAPI document: v.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AdvertiserQuotaMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'advertiser_id': 'int',
        'quota_used': 'int',
        'quota_limit': 'int',
        'quota_start_date': 'datetime',
        'quota_end_date': 'datetime'
    }

    attribute_map = {
        'advertiser_id': 'advertiserId',
        'quota_used': 'quotaUsed',
        'quota_limit': 'quotaLimit',
        'quota_start_date': 'quotaStartDate',
        'quota_end_date': 'quotaEndDate'
    }

    def __init__(self, advertiser_id=None, quota_used=None, quota_limit=None, quota_start_date=None, quota_end_date=None):  # noqa: E501
        """AdvertiserQuotaMessage - a model defined in OpenAPI"""  # noqa: E501

        self._advertiser_id = None
        self._quota_used = None
        self._quota_limit = None
        self._quota_start_date = None
        self._quota_end_date = None
        self.discriminator = None

        if advertiser_id is not None:
            self.advertiser_id = advertiser_id
        if quota_used is not None:
            self.quota_used = quota_used
        if quota_limit is not None:
            self.quota_limit = quota_limit
        if quota_start_date is not None:
            self.quota_start_date = quota_start_date
        if quota_end_date is not None:
            self.quota_end_date = quota_end_date

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this AdvertiserQuotaMessage.  # noqa: E501


        :return: The advertiser_id of this AdvertiserQuotaMessage.  # noqa: E501
        :rtype: int
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this AdvertiserQuotaMessage.


        :param advertiser_id: The advertiser_id of this AdvertiserQuotaMessage.  # noqa: E501
        :type: int
        """

        self._advertiser_id = advertiser_id

    @property
    def quota_used(self):
        """Gets the quota_used of this AdvertiserQuotaMessage.  # noqa: E501


        :return: The quota_used of this AdvertiserQuotaMessage.  # noqa: E501
        :rtype: int
        """
        return self._quota_used

    @quota_used.setter
    def quota_used(self, quota_used):
        """Sets the quota_used of this AdvertiserQuotaMessage.


        :param quota_used: The quota_used of this AdvertiserQuotaMessage.  # noqa: E501
        :type: int
        """

        self._quota_used = quota_used

    @property
    def quota_limit(self):
        """Gets the quota_limit of this AdvertiserQuotaMessage.  # noqa: E501


        :return: The quota_limit of this AdvertiserQuotaMessage.  # noqa: E501
        :rtype: int
        """
        return self._quota_limit

    @quota_limit.setter
    def quota_limit(self, quota_limit):
        """Sets the quota_limit of this AdvertiserQuotaMessage.


        :param quota_limit: The quota_limit of this AdvertiserQuotaMessage.  # noqa: E501
        :type: int
        """

        self._quota_limit = quota_limit

    @property
    def quota_start_date(self):
        """Gets the quota_start_date of this AdvertiserQuotaMessage.  # noqa: E501


        :return: The quota_start_date of this AdvertiserQuotaMessage.  # noqa: E501
        :rtype: datetime
        """
        return self._quota_start_date

    @quota_start_date.setter
    def quota_start_date(self, quota_start_date):
        """Sets the quota_start_date of this AdvertiserQuotaMessage.


        :param quota_start_date: The quota_start_date of this AdvertiserQuotaMessage.  # noqa: E501
        :type: datetime
        """

        self._quota_start_date = quota_start_date

    @property
    def quota_end_date(self):
        """Gets the quota_end_date of this AdvertiserQuotaMessage.  # noqa: E501


        :return: The quota_end_date of this AdvertiserQuotaMessage.  # noqa: E501
        :rtype: datetime
        """
        return self._quota_end_date

    @quota_end_date.setter
    def quota_end_date(self, quota_end_date):
        """Sets the quota_end_date of this AdvertiserQuotaMessage.


        :param quota_end_date: The quota_end_date of this AdvertiserQuotaMessage.  # noqa: E501
        :type: datetime
        """

        self._quota_end_date = quota_end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvertiserQuotaMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
