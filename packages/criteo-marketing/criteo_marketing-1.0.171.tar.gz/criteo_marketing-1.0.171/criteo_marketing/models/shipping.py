# coding: utf-8

"""
    Marketing API v.1.0

    IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.  # noqa: E501

    The version of the OpenAPI document: v.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Shipping(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'country': 'str',
        'location_id': 'int',
        'postal_code': 'str',
        'price': 'Price',
        'region': 'str',
        'service': 'str'
    }

    attribute_map = {
        'country': 'country',
        'location_id': 'locationId',
        'postal_code': 'postalCode',
        'price': 'price',
        'region': 'region',
        'service': 'service'
    }

    def __init__(self, country=None, location_id=None, postal_code=None, price=None, region=None, service=None):  # noqa: E501
        """Shipping - a model defined in OpenAPI"""  # noqa: E501

        self._country = None
        self._location_id = None
        self._postal_code = None
        self._price = None
        self._region = None
        self._service = None
        self.discriminator = None

        if country is not None:
            self.country = country
        if location_id is not None:
            self.location_id = location_id
        if postal_code is not None:
            self.postal_code = postal_code
        if price is not None:
            self.price = price
        if region is not None:
            self.region = region
        if service is not None:
            self.service = service

    @property
    def country(self):
        """Gets the country of this Shipping.  # noqa: E501


        :return: The country of this Shipping.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Shipping.


        :param country: The country of this Shipping.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def location_id(self):
        """Gets the location_id of this Shipping.  # noqa: E501


        :return: The location_id of this Shipping.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Shipping.


        :param location_id: The location_id of this Shipping.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def postal_code(self):
        """Gets the postal_code of this Shipping.  # noqa: E501


        :return: The postal_code of this Shipping.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Shipping.


        :param postal_code: The postal_code of this Shipping.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def price(self):
        """Gets the price of this Shipping.  # noqa: E501


        :return: The price of this Shipping.  # noqa: E501
        :rtype: Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Shipping.


        :param price: The price of this Shipping.  # noqa: E501
        :type: Price
        """

        self._price = price

    @property
    def region(self):
        """Gets the region of this Shipping.  # noqa: E501


        :return: The region of this Shipping.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Shipping.


        :param region: The region of this Shipping.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def service(self):
        """Gets the service of this Shipping.  # noqa: E501


        :return: The service of this Shipping.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Shipping.


        :param service: The service of this Shipping.  # noqa: E501
        :type: str
        """

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shipping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
