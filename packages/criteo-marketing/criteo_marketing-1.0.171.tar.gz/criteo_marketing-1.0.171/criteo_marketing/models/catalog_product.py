# coding: utf-8

"""
    Marketing API v.1.0

    IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.  # noqa: E501

    The version of the OpenAPI document: v.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CatalogProduct(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'batch_id': 'int',
        'catalog_id': 'int',
        'method': 'str',
        'product_id': 'str',
        'item_group_id': 'str',
        'product': 'GoogleProduct'
    }

    attribute_map = {
        'batch_id': 'batchId',
        'catalog_id': 'catalogId',
        'method': 'method',
        'product_id': 'productId',
        'item_group_id': 'itemGroupId',
        'product': 'product'
    }

    def __init__(self, batch_id=None, catalog_id=None, method=None, product_id=None, item_group_id=None, product=None):  # noqa: E501
        """CatalogProduct - a model defined in OpenAPI"""  # noqa: E501

        self._batch_id = None
        self._catalog_id = None
        self._method = None
        self._product_id = None
        self._item_group_id = None
        self._product = None
        self.discriminator = None

        if batch_id is not None:
            self.batch_id = batch_id
        if catalog_id is not None:
            self.catalog_id = catalog_id
        if method is not None:
            self.method = method
        if product_id is not None:
            self.product_id = product_id
        if item_group_id is not None:
            self.item_group_id = item_group_id
        if product is not None:
            self.product = product

    @property
    def batch_id(self):
        """Gets the batch_id of this CatalogProduct.  # noqa: E501

        Mandatory. batch Id, set by the partner. Use to future deduplication  # noqa: E501

        :return: The batch_id of this CatalogProduct.  # noqa: E501
        :rtype: int
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this CatalogProduct.

        Mandatory. batch Id, set by the partner. Use to future deduplication  # noqa: E501

        :param batch_id: The batch_id of this CatalogProduct.  # noqa: E501
        :type: int
        """

        self._batch_id = batch_id

    @property
    def catalog_id(self):
        """Gets the catalog_id of this CatalogProduct.  # noqa: E501

        Mandatory. The criteo catalog (partner) Id  # noqa: E501

        :return: The catalog_id of this CatalogProduct.  # noqa: E501
        :rtype: int
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this CatalogProduct.

        Mandatory. The criteo catalog (partner) Id  # noqa: E501

        :param catalog_id: The catalog_id of this CatalogProduct.  # noqa: E501
        :type: int
        """

        self._catalog_id = catalog_id

    @property
    def method(self):
        """Gets the method of this CatalogProduct.  # noqa: E501

        Mandatory. Method type, the acceptable values are insert and delete  # noqa: E501

        :return: The method of this CatalogProduct.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this CatalogProduct.

        Mandatory. Method type, the acceptable values are insert and delete  # noqa: E501

        :param method: The method of this CatalogProduct.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def product_id(self):
        """Gets the product_id of this CatalogProduct.  # noqa: E501

        Mandatory if the method is delete. This is the id of the product to delete in the partner catalog  # noqa: E501

        :return: The product_id of this CatalogProduct.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this CatalogProduct.

        Mandatory if the method is delete. This is the id of the product to delete in the partner catalog  # noqa: E501

        :param product_id: The product_id of this CatalogProduct.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def item_group_id(self):
        """Gets the item_group_id of this CatalogProduct.  # noqa: E501

        Mandatory if the method is delete and the product is a variant. This id is the grouping key (parent id) for variants  # noqa: E501

        :return: The item_group_id of this CatalogProduct.  # noqa: E501
        :rtype: str
        """
        return self._item_group_id

    @item_group_id.setter
    def item_group_id(self, item_group_id):
        """Sets the item_group_id of this CatalogProduct.

        Mandatory if the method is delete and the product is a variant. This id is the grouping key (parent id) for variants  # noqa: E501

        :param item_group_id: The item_group_id of this CatalogProduct.  # noqa: E501
        :type: str
        """

        self._item_group_id = item_group_id

    @property
    def product(self):
        """Gets the product of this CatalogProduct.  # noqa: E501


        :return: The product of this CatalogProduct.  # noqa: E501
        :rtype: GoogleProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this CatalogProduct.


        :param product: The product of this CatalogProduct.  # noqa: E501
        :type: GoogleProduct
        """

        self._product = product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
