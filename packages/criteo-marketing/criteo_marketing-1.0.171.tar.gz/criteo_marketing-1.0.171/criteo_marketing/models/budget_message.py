# coding: utf-8

"""
    Marketing API v.1.0

    IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.  # noqa: E501

    The version of the OpenAPI document: v.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BudgetMessage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'advertiser_id': 'int',
        'budget_id': 'int',
        'budget_name': 'str',
        'type': 'str',
        'total_amount': 'float',
        'remaining_budget': 'float',
        'remaining_budget_updated': 'datetime',
        'active': 'bool'
    }

    attribute_map = {
        'advertiser_id': 'advertiserId',
        'budget_id': 'budgetId',
        'budget_name': 'budgetName',
        'type': 'type',
        'total_amount': 'totalAmount',
        'remaining_budget': 'remainingBudget',
        'remaining_budget_updated': 'remainingBudgetUpdated',
        'active': 'active'
    }

    def __init__(self, advertiser_id=None, budget_id=None, budget_name=None, type=None, total_amount=None, remaining_budget=None, remaining_budget_updated=None, active=None):  # noqa: E501
        """BudgetMessage - a model defined in OpenAPI"""  # noqa: E501

        self._advertiser_id = None
        self._budget_id = None
        self._budget_name = None
        self._type = None
        self._total_amount = None
        self._remaining_budget = None
        self._remaining_budget_updated = None
        self._active = None
        self.discriminator = None

        if advertiser_id is not None:
            self.advertiser_id = advertiser_id
        if budget_id is not None:
            self.budget_id = budget_id
        if budget_name is not None:
            self.budget_name = budget_name
        if type is not None:
            self.type = type
        if total_amount is not None:
            self.total_amount = total_amount
        if remaining_budget is not None:
            self.remaining_budget = remaining_budget
        if remaining_budget_updated is not None:
            self.remaining_budget_updated = remaining_budget_updated
        if active is not None:
            self.active = active

    @property
    def advertiser_id(self):
        """Gets the advertiser_id of this BudgetMessage.  # noqa: E501


        :return: The advertiser_id of this BudgetMessage.  # noqa: E501
        :rtype: int
        """
        return self._advertiser_id

    @advertiser_id.setter
    def advertiser_id(self, advertiser_id):
        """Sets the advertiser_id of this BudgetMessage.


        :param advertiser_id: The advertiser_id of this BudgetMessage.  # noqa: E501
        :type: int
        """

        self._advertiser_id = advertiser_id

    @property
    def budget_id(self):
        """Gets the budget_id of this BudgetMessage.  # noqa: E501


        :return: The budget_id of this BudgetMessage.  # noqa: E501
        :rtype: int
        """
        return self._budget_id

    @budget_id.setter
    def budget_id(self, budget_id):
        """Sets the budget_id of this BudgetMessage.


        :param budget_id: The budget_id of this BudgetMessage.  # noqa: E501
        :type: int
        """

        self._budget_id = budget_id

    @property
    def budget_name(self):
        """Gets the budget_name of this BudgetMessage.  # noqa: E501


        :return: The budget_name of this BudgetMessage.  # noqa: E501
        :rtype: str
        """
        return self._budget_name

    @budget_name.setter
    def budget_name(self, budget_name):
        """Sets the budget_name of this BudgetMessage.


        :param budget_name: The budget_name of this BudgetMessage.  # noqa: E501
        :type: str
        """

        self._budget_name = budget_name

    @property
    def type(self):
        """Gets the type of this BudgetMessage.  # noqa: E501


        :return: The type of this BudgetMessage.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BudgetMessage.


        :param type: The type of this BudgetMessage.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def total_amount(self):
        """Gets the total_amount of this BudgetMessage.  # noqa: E501


        :return: The total_amount of this BudgetMessage.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this BudgetMessage.


        :param total_amount: The total_amount of this BudgetMessage.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def remaining_budget(self):
        """Gets the remaining_budget of this BudgetMessage.  # noqa: E501


        :return: The remaining_budget of this BudgetMessage.  # noqa: E501
        :rtype: float
        """
        return self._remaining_budget

    @remaining_budget.setter
    def remaining_budget(self, remaining_budget):
        """Sets the remaining_budget of this BudgetMessage.


        :param remaining_budget: The remaining_budget of this BudgetMessage.  # noqa: E501
        :type: float
        """

        self._remaining_budget = remaining_budget

    @property
    def remaining_budget_updated(self):
        """Gets the remaining_budget_updated of this BudgetMessage.  # noqa: E501


        :return: The remaining_budget_updated of this BudgetMessage.  # noqa: E501
        :rtype: datetime
        """
        return self._remaining_budget_updated

    @remaining_budget_updated.setter
    def remaining_budget_updated(self, remaining_budget_updated):
        """Sets the remaining_budget_updated of this BudgetMessage.


        :param remaining_budget_updated: The remaining_budget_updated of this BudgetMessage.  # noqa: E501
        :type: datetime
        """

        self._remaining_budget_updated = remaining_budget_updated

    @property
    def active(self):
        """Gets the active of this BudgetMessage.  # noqa: E501


        :return: The active of this BudgetMessage.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this BudgetMessage.


        :param active: The active of this BudgetMessage.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
