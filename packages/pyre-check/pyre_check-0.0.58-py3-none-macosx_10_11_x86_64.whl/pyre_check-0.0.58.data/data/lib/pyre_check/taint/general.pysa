# String features
def str.__add__(self: TaintInTaintOut[LocalReturn, Via[string_concat_lhs]], s: TaintInTaintOut[Via[string_concat_rhs]]): ...

# XML sinks
def xml.etree.ElementTree.parse(source: TaintSink[XMLParser], parser=...): ...
def xml.etree.ElementTree.iterparse(source: TaintSink[XMLParser], events=..., parser=...): ...
def xml.etree.ElementTree.XML(text: TaintSink[XMLParser], parser=...): ...
def xml.etree.ElementTree.XMLParser.feed(self, __data: TaintSink[XMLParser]): ...

# GetAttr
def getattr(
    __o: TaintInTaintOut[Via[getattr]],
    name: TaintSink[GetAttr],
    __default: TaintInTaintOut[LocalReturn] = ...,
): ...

def io.BytesIO.__init__(self, initial_bytes: TaintInTaintOut[Via[bytesio]]): ...

def hmac.new(key: TaintInTaintOut[Via[hmac_key]], msg = ..., digestmod = ...): ...

def str.count(self: TaintInTaintOut[LocalReturn, Via[benign]], x, __start=..., __end=...): ...

def len(__s: TaintInTaintOut[LocalReturn, Via[len], Via[benign]]): ...

def bool.__init__(self, o: TaintInTaintOut[LocalReturn, Via[boolean], Via[benign]]): ...
def type.__init__(self, o: TaintInTaintOut[LocalReturn, Via[type], Via[benign]]): ...
# TODO(T64638502) Delete extraneous model for '__new__' once task is closed.
def type.__new__(self, o: TaintInTaintOut[LocalReturn, Via[type], Via[benign]]): ...

@property
def object.__class__(self: TaintInTaintOut[Via[benign]]): ...
object.__doc__: TaintInTaintOut[Via[benign]] = ...
type.__name__: TaintInTaintOut[Via[benign]] = ...

def urllib.parse.quote_plus(string: TaintInTaintOut[LocalReturn, Via[urllib_quote_plus]], safe, encoding, errors): ...

# SSTI
def jinja2.environment.Template.__new__(cls, source: TaintSink[ServerSideTemplateInjection]): ...
def jinja2.environment.Environment.from_string(self, source: TaintSink[ServerSideTemplateInjection, ViaTypeOf[self]]): ...
def jinja2.environment.Environment.compile_expression(self, source: TaintSink[ServerSideTemplateInjection, ViaTypeOf[self]]): ...
