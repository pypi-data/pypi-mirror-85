# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['anymotion_cli', 'anymotion_cli.click_custom', 'anymotion_cli.commands']

package_data = \
{'': ['*']}

install_requires = \
['anymotion-sdk>=1.2,<1.3',
 'click>=7.1.1,<8.0.0',
 'prompt-toolkit>=3.0.7,<4.0.0',
 'pygments>=2.6.1,<3.0.0',
 'requests>=2.24.0,<3.0.0',
 'tabulate>=0.8.6,<0.9.0',
 'yaspin>=1.2,<2.0']

extras_require = \
{':python_version < "3.8"': ['importlib_metadata>=1.7,<2.0']}

entry_points = \
{'console_scripts': ['amcli = anymotion_cli.core:cli']}

setup_kwargs = {
    'name': 'anymotion-cli',
    'version': '1.2.1',
    'description': 'Command Line Interface for AnyMotion API',
    'long_description': '<div align="center"><a href="https://anymotion.nttpc.co.jp/"><img src="https://user-images.githubusercontent.com/63082802/81498974-edf9a500-9302-11ea-8583-f8d6971a9b25.png"/></a></div>\n\n# AnyMotion CLI\n\n[![PyPi][pypi-version]][pypi] [![CircleCI][ci-status]][ci] [![codecov][codecov-status]][codecov]\n\nThis package provides a command line interface to [AnyMotion](https://anymotion.nttpc.co.jp/), which is a motion analysis API using pose estimation.\nIt uses the [AnyMotion Python SDK](https://github.com/nttpc/anymotion-python-sdk).\n\n<div align="center"><img src="https://user-images.githubusercontent.com/63082802/81499044-7a0bcc80-9303-11ea-96b5-a779ae0adcf7.gif"/></div>\n\nIt works on Python 3.6.1 or higher.\n\n## Installation\n\nInstall using [pip](https://pip.pypa.io/en/stable/quickstart/):\n\n```sh\n$ pip install anymotion-cli\n```\n\nAlternatively, you can use [homebrew](https://brew.sh/) to install:\n\n```sh\n$ brew install nttpc/tap/anymotion-cli\n```\n\n## Getting Started\n\nBefore using anymotion-cli, you need to tell it about your credentials which issued by the [AnyMotion Portal](https://portal.anymotion.jp/).\nYou can do this in several ways:\n\n- CLI command\n- Credentials file\n- Environment variables\n\nThe quickest way to get started is to run the `amcli configure` command:\n\n```sh\n$ amcli configure\nAnyMotion Client ID: your_client_id\nAnyMotion Client Secret: your_client_secret\n```\n\nTo use environment variables, do the following:\n\n```sh\nexport ANYMOTION_CLIENT_ID=<your_client_id>\nexport ANYMOTION_CLIENT_SECRET=<your_client_secret>\n```\n\nTo use the credentials file, create an INI formatted file like this:\n\n```text\n[default]\nanymotion_client_id=<your_client_id>\nanymotion_client_secret=<your_client_secret>\n```\n\nand place it in `~/.anymotion/credentials`.\n\n**Note**: If set in both the credentials file and environment variables, the environment variables takes precedence.\n\n## Usage\n\nYou can use `amcli`.\n\n```text\namcli [OPTIONS] COMMAND [ARGS]...\n```\n\nSee the table below for more information, or run it with the `--help` option.\n\n### Processing commands\n\n| command name | description |\n| -- | -- |\n| upload | Upload the local movie or image file to the cloud storage. |\n| download | Download the drawn file. |\n| extract | Extract keypoints from image or movie. |\n| analyze | Analyze the extracted keypoint data. |\n| compare | Compare the two extracted keypoint data |\n| draw | Draw based on the extracted keypoints or comparison results. |\n\nThe command name is represented by a verb.\n\n### Display commands\n\n| command name | description |\n| -- | -- |\n| image | Show the information of the uploaded images. |\n| movie | Show the information of the uploaded movies. |\n| keypoint | Show the extracted keypoints. |\n| analysis | Show the analysis results. |\n| comparison | Show the comparison results. |\n| drawing | Show the information of the drawn images or movies. |\n\nThe command name is represented by a noun.\n\n### Other commands\n\n| command name | description |\n| -- | -- |\n| configure | Configure your AnyMotion Credentials. |\n| interactive | Start interactive mode. |\n\n### Examples\n\n#### Draw keypoints in image file\n\nFirst, upload the image file.\n\n```sh\n$ amcli upload image.jpg\nSuccess: Uploaded image.jpg to the cloud storage. (image id: 111)\n```\n\nWhen the upload is complete, you will get an `image id`.\nExtract keypoints using this `image id`.\n\n```sh\n$ amcli extract --image-id 111\nKeypoint extraction started. (keypoint id: 222)\nSuccess: Keypoint extraction is complete.\n```\n\nDraw points/lines to image using `keypoint id`.\n\n```sh\n$ amcli draw --keypoint-id 222\nDrawing is started. (drawing id: 333)\nSuccess: Drawing is complete.\nDownloaded the file to image.jpg.\n```\n\nWhen the drawing is complete, the drawing file is downloaded (by default, to the current directory).\nTo save to a specific file or directory, use the `--out` option.\n\nAs shown below, you can also use `--path` option and `--with-drawing` in `extract` command to upload, extract keypoints, drawing at the same time.\n\n```sh\n$ amcli extract --path image.jpg --with-drawing\nSuccess: Uploaded image.jpg to the cloud storage. (image id: 111)\n\nKeypoint extraction started. (keypoint id: 222)\nSuccess: Keypoint extraction is complete.\n\nDrawing started. (drawing id: 333)\nSuccess: Drawing is complete.\n\nDownloaded the file to image.jpg.\n```\n\n#### Draw using rules\n\nYou can use the rules to draw a variety of things.\nIn the following example, draw the lines of stick picture in red.\n\n```sh\n$ amcli draw --keypoint-id 222 --rule \'{"drawingType": "stickPicture", "pattern": "all", "color": "red"}\'\n```\n\nIn the following other example, draw only the skeleton.\n\n```sh\n$ amcli draw --keypoint-id 222 --bg-rule \'{"skeletonOnly": true}\'\n```\n\nYou can also specify it in the JSON file.\n\n```sh\n$ amcli draw --keypoint-id 222 --rule-file rule.json\n```\n\n```json\n{\n  "drawingType": "stickPicture",\n  "pattern": "all",\n  "color": "red"\n}\n```\n\nYou can also write `rule` and `backgroundRule` at the same time when using `--rule-file`.\n\n```json\n{\n    "rule": {\n        "drawingType": "stickPicture",\n        "pattern": "all",\n        "color": "red"\n    },\n    "backgroundRule": {\n        "skeletonOnly": true\n    }\n}\n```\n\nFor more information on the drawing rules, see the [documentation](https://docs.anymotion.jp/drawing.html).\n\n#### Show extracted keypoints\n\nYou can use the `keypoint show` command to display the extracted keypoint data.\n\n```sh\n$ amcli keypoint show 1234\n{\n  "id": 1234,\n  "image": null,\n  "movie": 123,\n  "keypoint": [\n    {\n      "leftKnee": [\n        487,\n        730\n      ],\n      ...\n```\n\nThe `--only` option allows you to display only the keypoint data.\n\n```sh\n$ amcli keypoint show 1234 --only\n[\n  {\n    "leftKnee": [\n      487,\n      730\n    ],\n    "rightKnee": [\n      1118,\n      703\n    ]\n    ...\n```\n\nWith [jq](https://stedolan.github.io/jq/), it\'s also easy to take out only certain parts of the body.\n\n```sh\n$ amcli keypoint show 1234 --only | jq \'[.[].leftKnee]\'\n[\n  [\n    487,\n    730\n  ],\n  null,\n  null,\n  ...\n```\n\nThe `--join` option also allows you to display related data.\n\n```sh\n$ amcli keypoint show 1234 --join\n{\n  "id": 1234,\n  "image": null,\n  "movie": {\n    "id": 123,\n    "name": "movie",\n    "text": "Created by anymotion-cli.",\n    ...\n  "keypoint": [\n    {\n      "leftKnee": [\n        487,\n        730\n      ],\n      ...\n```\n\n## Interactive Mode\n\nYou can use interactive mode using `interactive` command.\n\n```sh\n$ amcli interactive\n```\n\n<div align="center"><img src="https://user-images.githubusercontent.com/63082802/92619134-1a96eb00-f2fc-11ea-92a2-2f36e9f652a4.png"/></div>\n\n## Shell Complete\n\nThe anymotion-cli supports Shell completion.\n\nFor Bash, add this to `~/.bashrc`:\n\n```sh\neval "$(_AMCLI_COMPLETE=source amcli)"\n```\n\nFor Zsh, add this to `~/.zshrc`:\n\n```sh\neval "$(_AMCLI_COMPLETE=source_zsh amcli)"\n```\n\nFor Fish, add this to `~/.config/fish/completions/amcli.fish`:\n\n```sh\neval (env _AMCLI_COMPLETE=source_fish amcli)\n```\n\n## Change Log\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Contributing\n\n- Code must work on Python 3.6 and higher.\n- Code should follow [black](https://black.readthedocs.io/en/stable/).\n- Docstring should follow [Google Style](http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings).\n- Install all development dependencies using:\n\n  ```sh\n  $ poetry install\n  ```\n\n- You can install a pre-commit hook to check:\n\n  ```sh\n  $ poetry run pre-commit install\n  ```\n\n- Before submitting pull requests, run tests with:\n\n  ```sh\n  $ poetry run tox\n  ```\n\n[pypi]: https://pypi.org/project/anymotion-cli\n[pypi-version]: https://img.shields.io/pypi/v/anymotion-cli\n[ci]: https://circleci.com/gh/nttpc/anymotion-cli\n[ci-status]: https://circleci.com/gh/nttpc/anymotion-cli.svg?style=shield&circle-token=4f7564ae447f53ff1c6d3aadb2303b5d526c6fb8\n[codecov]: https://codecov.io/gh/nttpc/anymotion-cli\n[codecov-status]: https://codecov.io/gh/nttpc/anymotion-cli/branch/master/graph/badge.svg?token=6S0GIV4ZD9\n',
    'author': 'Yusuke Kumihashi',
    'author_email': 'y_kumiha@nttpc.co.jp',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/nttpc/anymotion-cli',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'entry_points': entry_points,
    'python_requires': '>=3.6.1,<4.0.0',
}


setup(**setup_kwargs)
