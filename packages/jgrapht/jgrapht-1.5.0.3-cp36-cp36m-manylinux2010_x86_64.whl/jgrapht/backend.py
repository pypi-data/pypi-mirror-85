# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


# The Python-JGraphT library

from enum import Enum




from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _backend
else:
    import _backend

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


STATUS_SUCCESS = _backend.STATUS_SUCCESS
STATUS_ERROR = _backend.STATUS_ERROR
STATUS_ILLEGAL_ARGUMENT = _backend.STATUS_ILLEGAL_ARGUMENT
STATUS_UNSUPPORTED_OPERATION = _backend.STATUS_UNSUPPORTED_OPERATION
STATUS_INDEX_OUT_OF_BOUNDS = _backend.STATUS_INDEX_OUT_OF_BOUNDS
STATUS_NO_SUCH_ELEMENT = _backend.STATUS_NO_SUCH_ELEMENT
STATUS_NULL_POINTER = _backend.STATUS_NULL_POINTER
STATUS_CLASS_CAST = _backend.STATUS_CLASS_CAST
STATUS_IO_ERROR = _backend.STATUS_IO_ERROR
STATUS_EXPORT_ERROR = _backend.STATUS_EXPORT_ERROR
STATUS_IMPORT_ERROR = _backend.STATUS_IMPORT_ERROR
STATUS_NEGATIVE_CYCLE_DETECTED = _backend.STATUS_NEGATIVE_CYCLE_DETECTED
DIMACS_FORMAT_SHORTEST_PATH = _backend.DIMACS_FORMAT_SHORTEST_PATH
DIMACS_FORMAT_MAX_CLIQUE = _backend.DIMACS_FORMAT_MAX_CLIQUE
DIMACS_FORMAT_COLORING = _backend.DIMACS_FORMAT_COLORING
CSV_FORMAT_EDGE_LIST = _backend.CSV_FORMAT_EDGE_LIST
CSV_FORMAT_ADJACENCY_LIST = _backend.CSV_FORMAT_ADJACENCY_LIST
CSV_FORMAT_MATRIX = _backend.CSV_FORMAT_MATRIX
GRAPH_EVENT_BEFORE_VERTEX_ADDED = _backend.GRAPH_EVENT_BEFORE_VERTEX_ADDED
GRAPH_EVENT_BEFORE_VERTEX_REMOVED = _backend.GRAPH_EVENT_BEFORE_VERTEX_REMOVED
GRAPH_EVENT_VERTEX_ADDED = _backend.GRAPH_EVENT_VERTEX_ADDED
GRAPH_EVENT_VERTEX_REMOVED = _backend.GRAPH_EVENT_VERTEX_REMOVED
GRAPH_EVENT_BEFORE_EDGE_ADDED = _backend.GRAPH_EVENT_BEFORE_EDGE_ADDED
GRAPH_EVENT_BEFORE_EDGE_REMOVED = _backend.GRAPH_EVENT_BEFORE_EDGE_REMOVED
GRAPH_EVENT_EDGE_ADDED = _backend.GRAPH_EVENT_EDGE_ADDED
GRAPH_EVENT_EDGE_REMOVED = _backend.GRAPH_EVENT_EDGE_REMOVED
GRAPH_EVENT_EDGE_WEIGHT_UPDATED = _backend.GRAPH_EVENT_EDGE_WEIGHT_UPDATED

def jgrapht_init():
    return _backend.jgrapht_init()

def jgrapht_cleanup():
    return _backend.jgrapht_cleanup()

def jgrapht_is_initialized():
    return _backend.jgrapht_is_initialized()

def jgrapht_error_clear_errno():
    return _backend.jgrapht_error_clear_errno()

def jgrapht_error_get_errno():
    return _backend.jgrapht_error_get_errno()

def jgrapht_error_get_errno_msg():
    return _backend.jgrapht_error_get_errno_msg()

def jgrapht_error_print_stack_trace():
    return _backend.jgrapht_error_print_stack_trace()

def jgrapht_vmLocatorSymbol():
    return _backend.jgrapht_vmLocatorSymbol()


class GraphEvent(Enum):
    BEFORE_VERTEX_ADDED = _backend.GRAPH_EVENT_BEFORE_VERTEX_ADDED
    BEFORE_VERTEX_REMOVED = _backend.GRAPH_EVENT_BEFORE_VERTEX_REMOVED
    VERTEX_ADDED = _backend.GRAPH_EVENT_VERTEX_ADDED
    VERTEX_REMOVED = _backend.GRAPH_EVENT_VERTEX_REMOVED
    BEFORE_EDGE_ADDED = _backend.GRAPH_EVENT_BEFORE_EDGE_ADDED
    BEFORE_EDGE_REMOVED = _backend.GRAPH_EVENT_BEFORE_EDGE_REMOVED
    EDGE_ADDED = _backend.GRAPH_EVENT_EDGE_ADDED
    EDGE_REMOVED = _backend.GRAPH_EVENT_EDGE_REMOVED
    EDGE_WEIGHT_UPDATED = _backend.GRAPH_EVENT_EDGE_WEIGHT_UPDATED


def jgrapht_attributes_store_create():
    return _backend.jgrapht_attributes_store_create()

def jgrapht_attributes_store_put_boolean_attribute(arg1, arg2, BYTEARRAY, arg4):
    return _backend.jgrapht_attributes_store_put_boolean_attribute(arg1, arg2, BYTEARRAY, arg4)

def jgrapht_attributes_store_put_int_attribute(arg1, arg2, BYTEARRAY, arg4):
    return _backend.jgrapht_attributes_store_put_int_attribute(arg1, arg2, BYTEARRAY, arg4)

def jgrapht_attributes_store_put_long_attribute(arg1, arg2, BYTEARRAY, arg4):
    return _backend.jgrapht_attributes_store_put_long_attribute(arg1, arg2, BYTEARRAY, arg4)

def jgrapht_attributes_store_put_double_attribute(arg1, arg2, BYTEARRAY, arg4):
    return _backend.jgrapht_attributes_store_put_double_attribute(arg1, arg2, BYTEARRAY, arg4)

def jgrapht_attributes_store_put_string_attribute(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_attributes_store_put_string_attribute(arg1, arg2, arg3, arg4)

def jgrapht_attributes_store_remove_attribute(arg1, arg2, BYTEARRAY):
    return _backend.jgrapht_attributes_store_remove_attribute(arg1, arg2, BYTEARRAY)

def jgrapht_attributes_registry_create():
    return _backend.jgrapht_attributes_registry_create()

def jgrapht_attributes_registry_register_attribute(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_attributes_registry_register_attribute(arg1, arg2, arg3, arg4, arg5)

def jgrapht_attributes_registry_unregister_attribute(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_attributes_registry_unregister_attribute(arg1, arg2, arg3, arg4, arg5)

def jgrapht_clique_exec_bron_kerbosch(arg1, arg2):
    return _backend.jgrapht_clique_exec_bron_kerbosch(arg1, arg2)

def jgrapht_clique_exec_bron_kerbosch_pivot(arg1, arg2):
    return _backend.jgrapht_clique_exec_bron_kerbosch_pivot(arg1, arg2)

def jgrapht_clique_exec_bron_kerbosch_pivot_degeneracy_ordering(arg1, arg2):
    return _backend.jgrapht_clique_exec_bron_kerbosch_pivot_degeneracy_ordering(arg1, arg2)

def jgrapht_clique_exec_chordal_max_clique(arg1):
    return _backend.jgrapht_clique_exec_chordal_max_clique(arg1)

def jgrapht_clustering_exec_k_spanning_tree(arg1, arg2):
    return _backend.jgrapht_clustering_exec_k_spanning_tree(arg1, arg2)

def jgrapht_clustering_exec_label_propagation(arg1, arg2, arg3):
    return _backend.jgrapht_clustering_exec_label_propagation(arg1, arg2, arg3)

def jgrapht_clustering_get_number_clusters(arg1):
    return _backend.jgrapht_clustering_get_number_clusters(arg1)

def jgrapht_clustering_ith_cluster_vit(arg1, arg2):
    return _backend.jgrapht_clustering_ith_cluster_vit(arg1, arg2)

def jgrapht_coloring_exec_greedy(arg1):
    return _backend.jgrapht_coloring_exec_greedy(arg1)

def jgrapht_coloring_exec_greedy_smallestdegreelast(arg1):
    return _backend.jgrapht_coloring_exec_greedy_smallestdegreelast(arg1)

def jgrapht_coloring_exec_backtracking_brown(arg1):
    return _backend.jgrapht_coloring_exec_backtracking_brown(arg1)

def jgrapht_coloring_exec_greedy_largestdegreefirst(arg1):
    return _backend.jgrapht_coloring_exec_greedy_largestdegreefirst(arg1)

def jgrapht_coloring_exec_greedy_random(arg1):
    return _backend.jgrapht_coloring_exec_greedy_random(arg1)

def jgrapht_coloring_exec_greedy_random_with_seed(arg1, arg2):
    return _backend.jgrapht_coloring_exec_greedy_random_with_seed(arg1, arg2)

def jgrapht_coloring_exec_greedy_dsatur(arg1):
    return _backend.jgrapht_coloring_exec_greedy_dsatur(arg1)

def jgrapht_coloring_exec_color_refinement(arg1):
    return _backend.jgrapht_coloring_exec_color_refinement(arg1)

def jgrapht_coloring_exec_chordal_minimum_coloring(arg1):
    return _backend.jgrapht_coloring_exec_chordal_minimum_coloring(arg1)

def jgrapht_connectivity_strong_exec_kosaraju(arg1):
    return _backend.jgrapht_connectivity_strong_exec_kosaraju(arg1)

def jgrapht_connectivity_strong_exec_gabow(arg1):
    return _backend.jgrapht_connectivity_strong_exec_gabow(arg1)

def jgrapht_connectivity_weak_exec_bfs(arg1):
    return _backend.jgrapht_connectivity_weak_exec_bfs(arg1)

def jgrapht_cut_mincut_exec_stoer_wagner(arg1):
    return _backend.jgrapht_cut_mincut_exec_stoer_wagner(arg1)

def jgrapht_cut_gomoryhu_exec_gusfield(arg1):
    return _backend.jgrapht_cut_gomoryhu_exec_gusfield(arg1)

def jgrapht_cut_gomoryhu_min_st_cut(arg1, arg2, arg3):
    return _backend.jgrapht_cut_gomoryhu_min_st_cut(arg1, arg2, arg3)

def jgrapht_cut_gomoryhu_min_cut(arg1):
    return _backend.jgrapht_cut_gomoryhu_min_cut(arg1)

def jgrapht_cut_gomoryhu_tree(arg1):
    return _backend.jgrapht_cut_gomoryhu_tree(arg1)

def jgrapht_cut_oddmincutset_exec_padberg_rao(arg1, arg2, arg3):
    return _backend.jgrapht_cut_oddmincutset_exec_padberg_rao(arg1, arg2, arg3)

def jgrapht_cycles_eulerian_exec_hierholzer(arg1):
    return _backend.jgrapht_cycles_eulerian_exec_hierholzer(arg1)

def jgrapht_cycles_chinese_postman_exec_edmonds_johnson(arg1):
    return _backend.jgrapht_cycles_chinese_postman_exec_edmonds_johnson(arg1)

def jgrapht_cycles_simple_enumeration_exec_tarjan(arg1):
    return _backend.jgrapht_cycles_simple_enumeration_exec_tarjan(arg1)

def jgrapht_cycles_simple_enumeration_exec_tiernan(arg1):
    return _backend.jgrapht_cycles_simple_enumeration_exec_tiernan(arg1)

def jgrapht_cycles_simple_enumeration_exec_szwarcfiter_lauer(arg1):
    return _backend.jgrapht_cycles_simple_enumeration_exec_szwarcfiter_lauer(arg1)

def jgrapht_cycles_simple_enumeration_exec_johnson(arg1):
    return _backend.jgrapht_cycles_simple_enumeration_exec_johnson(arg1)

def jgrapht_cycles_simple_enumeration_exec_hawick_james(arg1):
    return _backend.jgrapht_cycles_simple_enumeration_exec_hawick_james(arg1)

def jgrapht_cycles_fundamental_basis_exec_queue_bfs(arg1):
    return _backend.jgrapht_cycles_fundamental_basis_exec_queue_bfs(arg1)

def jgrapht_cycles_fundamental_basis_exec_stack_bfs(arg1):
    return _backend.jgrapht_cycles_fundamental_basis_exec_stack_bfs(arg1)

def jgrapht_cycles_fundamental_basis_exec_paton(arg1):
    return _backend.jgrapht_cycles_fundamental_basis_exec_paton(arg1)

def jgrapht_drawing_layout_model_2d_create(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_drawing_layout_model_2d_create(arg1, arg2, arg3, arg4)

def jgrapht_drawing_layout_model_2d_get_drawable_area(arg1):
    return _backend.jgrapht_drawing_layout_model_2d_get_drawable_area(arg1)

def jgrapht_drawing_layout_model_2d_get_vertex(arg1, arg2):
    return _backend.jgrapht_drawing_layout_model_2d_get_vertex(arg1, arg2)

def jgrapht_drawing_layout_model_2d_put_vertex(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_drawing_layout_model_2d_put_vertex(arg1, arg2, arg3, arg4)

def jgrapht_drawing_layout_model_2d_get_fixed(arg1, arg2):
    return _backend.jgrapht_drawing_layout_model_2d_get_fixed(arg1, arg2)

def jgrapht_drawing_layout_model_2d_set_fixed(arg1, arg2, arg3):
    return _backend.jgrapht_drawing_layout_model_2d_set_fixed(arg1, arg2, arg3)

def jgrapht_drawing_exec_random_layout_2d(arg1, arg2, arg3):
    return _backend.jgrapht_drawing_exec_random_layout_2d(arg1, arg2, arg3)

def jgrapht_drawing_exec_circular_layout_2d(arg1, arg2, arg3, LONG_TO_FPTR):
    return _backend.jgrapht_drawing_exec_circular_layout_2d(arg1, arg2, arg3, LONG_TO_FPTR)

def jgrapht_drawing_exec_fr_layout_2d(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_drawing_exec_fr_layout_2d(arg1, arg2, arg3, arg4, arg5)

def jgrapht_drawing_exec_indexed_fr_layout_2d(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_drawing_exec_indexed_fr_layout_2d(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def jgrapht_export_file_dimacs(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_export_file_dimacs(arg1, arg2, arg3, arg4, arg5)

def jgrapht_export_string_dimacs(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_export_string_dimacs(arg1, arg2, arg3, arg4)

def jgrapht_export_file_gml(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _backend.jgrapht_export_file_gml(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def jgrapht_export_string_gml(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_export_string_gml(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def jgrapht_export_file_json(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_export_file_json(arg1, arg2, arg3, arg4, arg5)

def jgrapht_export_string_json(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_export_string_json(arg1, arg2, arg3, arg4)

def jgrapht_export_file_lemon(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_export_file_lemon(arg1, arg2, arg3, arg4, arg5)

def jgrapht_export_string_lemon(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_export_string_lemon(arg1, arg2, arg3, arg4)

def jgrapht_export_file_csv(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_export_file_csv(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def jgrapht_export_string_csv(arg1, arg2, arg3, arg4, arg5, arg6):
    return _backend.jgrapht_export_string_csv(arg1, arg2, arg3, arg4, arg5, arg6)

def jgrapht_export_file_gexf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11):
    return _backend.jgrapht_export_file_gexf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)

def jgrapht_export_string_gexf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10):
    return _backend.jgrapht_export_string_gexf(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

def jgrapht_export_file_dot(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_export_file_dot(arg1, arg2, arg3, arg4, arg5)

def jgrapht_export_string_dot(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_export_string_dot(arg1, arg2, arg3, arg4)

def jgrapht_export_file_graph6(arg1, arg2):
    return _backend.jgrapht_export_file_graph6(arg1, arg2)

def jgrapht_export_string_graph6(arg1):
    return _backend.jgrapht_export_string_graph6(arg1)

def jgrapht_export_file_sparse6(arg1, arg2):
    return _backend.jgrapht_export_file_sparse6(arg1, arg2)

def jgrapht_export_string_sparse6(arg1):
    return _backend.jgrapht_export_string_sparse6(arg1)

def jgrapht_export_file_graphml(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _backend.jgrapht_export_file_graphml(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def jgrapht_export_string_graphml(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8):
    return _backend.jgrapht_export_string_graphml(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

def jgrapht_maxflow_exec_push_relabel(arg1, arg2, arg3):
    return _backend.jgrapht_maxflow_exec_push_relabel(arg1, arg2, arg3)

def jgrapht_maxflow_exec_dinic(arg1, arg2, arg3):
    return _backend.jgrapht_maxflow_exec_dinic(arg1, arg2, arg3)

def jgrapht_maxflow_exec_edmonds_karp(arg1, arg2, arg3):
    return _backend.jgrapht_maxflow_exec_edmonds_karp(arg1, arg2, arg3)

def jgrapht_mincostflow_exec_capacity_scaling(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_mincostflow_exec_capacity_scaling(arg1, arg2, arg3, arg4, arg5)

def jgrapht_equivalentflowtree_exec_gusfield(arg1):
    return _backend.jgrapht_equivalentflowtree_exec_gusfield(arg1)

def jgrapht_equivalentflowtree_max_st_flow(arg1, arg2, arg3):
    return _backend.jgrapht_equivalentflowtree_max_st_flow(arg1, arg2, arg3)

def jgrapht_equivalentflowtree_tree(arg1):
    return _backend.jgrapht_equivalentflowtree_tree(arg1)

def jgrapht_generate_barabasi_albert(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_generate_barabasi_albert(arg1, arg2, arg3, arg4, arg5)

def jgrapht_generate_barabasi_albert_forest(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_generate_barabasi_albert_forest(arg1, arg2, arg3, arg4)

def jgrapht_generate_complete(arg1, arg2):
    return _backend.jgrapht_generate_complete(arg1, arg2)

def jgrapht_generate_bipartite_complete(arg1, arg2, arg3):
    return _backend.jgrapht_generate_bipartite_complete(arg1, arg2, arg3)

def jgrapht_generate_empty(arg1, arg2):
    return _backend.jgrapht_generate_empty(arg1, arg2)

def jgrapht_generate_gnm_random(arg1, arg2, arg3, arg4, arg5, arg6):
    return _backend.jgrapht_generate_gnm_random(arg1, arg2, arg3, arg4, arg5, arg6)

def jgrapht_generate_gnp_random(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_generate_gnp_random(arg1, arg2, arg3, arg4, arg5)

def jgrapht_generate_ring(arg1, arg2):
    return _backend.jgrapht_generate_ring(arg1, arg2)

def jgrapht_generate_scalefree(arg1, arg2, arg3):
    return _backend.jgrapht_generate_scalefree(arg1, arg2, arg3)

def jgrapht_generate_watts_strogatz(arg1, arg2, arg3, arg4, arg5, arg6):
    return _backend.jgrapht_generate_watts_strogatz(arg1, arg2, arg3, arg4, arg5, arg6)

def jgrapht_generate_kleinberg_smallworld(arg1, arg2, arg3, arg4, arg5, arg6):
    return _backend.jgrapht_generate_kleinberg_smallworld(arg1, arg2, arg3, arg4, arg5, arg6)

def jgrapht_generate_complement(arg1, arg2, arg3):
    return _backend.jgrapht_generate_complement(arg1, arg2, arg3)

def jgrapht_generate_generalized_petersen(arg1, arg2, arg3):
    return _backend.jgrapht_generate_generalized_petersen(arg1, arg2, arg3)

def jgrapht_generate_grid(arg1, arg2, arg3):
    return _backend.jgrapht_generate_grid(arg1, arg2, arg3)

def jgrapht_generate_hypercube(arg1, arg2):
    return _backend.jgrapht_generate_hypercube(arg1, arg2)

def jgrapht_generate_linear(arg1, arg2):
    return _backend.jgrapht_generate_linear(arg1, arg2)

def jgrapht_generate_random_regular(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_generate_random_regular(arg1, arg2, arg3, arg4)

def jgrapht_generate_star(arg1, arg2):
    return _backend.jgrapht_generate_star(arg1, arg2)

def jgrapht_generate_wheel(arg1, arg2, arg3):
    return _backend.jgrapht_generate_wheel(arg1, arg2, arg3)

def jgrapht_generate_windmill(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_generate_windmill(arg1, arg2, arg3, arg4)

def jgrapht_generate_linearized_chord_diagram(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_generate_linearized_chord_diagram(arg1, arg2, arg3, arg4)

def jgrapht_graph_create(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_graph_create(arg1, arg2, arg3, arg4)

def jgrapht_graph_sparse_create(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_graph_sparse_create(arg1, arg2, arg3, arg4)

def jgrapht_graph_vertices_count(arg1):
    return _backend.jgrapht_graph_vertices_count(arg1)

def jgrapht_graph_edges_count(arg1):
    return _backend.jgrapht_graph_edges_count(arg1)

def jgrapht_graph_add_vertex(arg1):
    return _backend.jgrapht_graph_add_vertex(arg1)

def jgrapht_graph_add_given_vertex(arg1, arg2):
    return _backend.jgrapht_graph_add_given_vertex(arg1, arg2)

def jgrapht_graph_remove_vertex(arg1, arg2):
    return _backend.jgrapht_graph_remove_vertex(arg1, arg2)

def jgrapht_graph_contains_vertex(arg1, arg2):
    return _backend.jgrapht_graph_contains_vertex(arg1, arg2)

def jgrapht_graph_add_edge(arg1, arg2, arg3):
    return _backend.jgrapht_graph_add_edge(arg1, arg2, arg3)

def jgrapht_graph_add_given_edge(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_graph_add_given_edge(arg1, arg2, arg3, arg4)

def jgrapht_graph_remove_edge(arg1, arg2):
    return _backend.jgrapht_graph_remove_edge(arg1, arg2)

def jgrapht_graph_contains_edge(arg1, arg2):
    return _backend.jgrapht_graph_contains_edge(arg1, arg2)

def jgrapht_graph_contains_edge_between(arg1, arg2, arg3):
    return _backend.jgrapht_graph_contains_edge_between(arg1, arg2, arg3)

def jgrapht_graph_degree_of(arg1, arg2):
    return _backend.jgrapht_graph_degree_of(arg1, arg2)

def jgrapht_graph_indegree_of(arg1, arg2):
    return _backend.jgrapht_graph_indegree_of(arg1, arg2)

def jgrapht_graph_outdegree_of(arg1, arg2):
    return _backend.jgrapht_graph_outdegree_of(arg1, arg2)

def jgrapht_graph_edge_source(arg1, arg2):
    return _backend.jgrapht_graph_edge_source(arg1, arg2)

def jgrapht_graph_edge_target(arg1, arg2):
    return _backend.jgrapht_graph_edge_target(arg1, arg2)

def jgrapht_graph_is_weighted(arg1):
    return _backend.jgrapht_graph_is_weighted(arg1)

def jgrapht_graph_is_directed(arg1):
    return _backend.jgrapht_graph_is_directed(arg1)

def jgrapht_graph_is_undirected(arg1):
    return _backend.jgrapht_graph_is_undirected(arg1)

def jgrapht_graph_is_allowing_selfloops(arg1):
    return _backend.jgrapht_graph_is_allowing_selfloops(arg1)

def jgrapht_graph_is_allowing_multipleedges(arg1):
    return _backend.jgrapht_graph_is_allowing_multipleedges(arg1)

def jgrapht_graph_is_allowing_cycles(arg1):
    return _backend.jgrapht_graph_is_allowing_cycles(arg1)

def jgrapht_graph_is_modifiable(arg1):
    return _backend.jgrapht_graph_is_modifiable(arg1)

def jgrapht_graph_get_edge_weight(arg1, arg2):
    return _backend.jgrapht_graph_get_edge_weight(arg1, arg2)

def jgrapht_graph_set_edge_weight(arg1, arg2, arg3):
    return _backend.jgrapht_graph_set_edge_weight(arg1, arg2, arg3)

def jgrapht_graph_create_all_vit(arg1):
    return _backend.jgrapht_graph_create_all_vit(arg1)

def jgrapht_graph_create_all_eit(arg1):
    return _backend.jgrapht_graph_create_all_eit(arg1)

def jgrapht_graph_create_between_eit(arg1, arg2, arg3):
    return _backend.jgrapht_graph_create_between_eit(arg1, arg2, arg3)

def jgrapht_graph_vertex_create_eit(arg1, arg2):
    return _backend.jgrapht_graph_vertex_create_eit(arg1, arg2)

def jgrapht_graph_vertex_create_out_eit(arg1, arg2):
    return _backend.jgrapht_graph_vertex_create_out_eit(arg1, arg2)

def jgrapht_graph_vertex_create_in_eit(arg1, arg2):
    return _backend.jgrapht_graph_vertex_create_in_eit(arg1, arg2)

def jgrapht_graph_as_undirected(arg1):
    return _backend.jgrapht_graph_as_undirected(arg1)

def jgrapht_graph_as_unmodifiable(arg1):
    return _backend.jgrapht_graph_as_unmodifiable(arg1)

def jgrapht_graph_as_unweighted(arg1):
    return _backend.jgrapht_graph_as_unweighted(arg1)

def jgrapht_graph_as_edgereversed(arg1):
    return _backend.jgrapht_graph_as_edgereversed(arg1)

def jgrapht_graph_as_weighted(arg1, LONG_TO_FPTR, arg3, arg4):
    return _backend.jgrapht_graph_as_weighted(arg1, LONG_TO_FPTR, arg3, arg4)

def jgrapht_graph_as_masked_subgraph(arg1, arg2, arg3):
    return _backend.jgrapht_graph_as_masked_subgraph(arg1, arg2, arg3)

def jgrapht_graph_as_subgraph(arg1, arg2, arg3):
    return _backend.jgrapht_graph_as_subgraph(arg1, arg2, arg3)

def jgrapht_graph_as_graph_union(arg1, arg2, LONG_TO_FPTR):
    return _backend.jgrapht_graph_as_graph_union(arg1, arg2, LONG_TO_FPTR)

def jgrapht_graph_dag_create(arg1, arg2):
    return _backend.jgrapht_graph_dag_create(arg1, arg2)

def jgrapht_graph_dag_topological_it(arg1):
    return _backend.jgrapht_graph_dag_topological_it(arg1)

def jgrapht_graph_dag_vertex_descendants(arg1, arg2):
    return _backend.jgrapht_graph_dag_vertex_descendants(arg1, arg2)

def jgrapht_graph_dag_vertex_ancestors(arg1, arg2):
    return _backend.jgrapht_graph_dag_vertex_ancestors(arg1, arg2)

def jgrapht_graph_metrics_diameter(arg1):
    return _backend.jgrapht_graph_metrics_diameter(arg1)

def jgrapht_graph_metrics_radius(arg1):
    return _backend.jgrapht_graph_metrics_radius(arg1)

def jgrapht_graph_metrics_girth(arg1):
    return _backend.jgrapht_graph_metrics_girth(arg1)

def jgrapht_graph_metrics_triangles(arg1):
    return _backend.jgrapht_graph_metrics_triangles(arg1)

def jgrapht_graph_metrics_measure_graph(arg1):
    return _backend.jgrapht_graph_metrics_measure_graph(arg1)

def jgrapht_graph_test_is_empty(arg1):
    return _backend.jgrapht_graph_test_is_empty(arg1)

def jgrapht_graph_test_is_simple(arg1):
    return _backend.jgrapht_graph_test_is_simple(arg1)

def jgrapht_graph_test_has_selfloops(arg1):
    return _backend.jgrapht_graph_test_has_selfloops(arg1)

def jgrapht_graph_test_has_multipleedges(arg1):
    return _backend.jgrapht_graph_test_has_multipleedges(arg1)

def jgrapht_graph_test_is_complete(arg1):
    return _backend.jgrapht_graph_test_is_complete(arg1)

def jgrapht_graph_test_is_weakly_connected(arg1):
    return _backend.jgrapht_graph_test_is_weakly_connected(arg1)

def jgrapht_graph_test_is_strongly_connected(arg1):
    return _backend.jgrapht_graph_test_is_strongly_connected(arg1)

def jgrapht_graph_test_is_tree(arg1):
    return _backend.jgrapht_graph_test_is_tree(arg1)

def jgrapht_graph_test_is_forest(arg1):
    return _backend.jgrapht_graph_test_is_forest(arg1)

def jgrapht_graph_test_is_overfull(arg1):
    return _backend.jgrapht_graph_test_is_overfull(arg1)

def jgrapht_graph_test_is_split(arg1):
    return _backend.jgrapht_graph_test_is_split(arg1)

def jgrapht_graph_test_is_bipartite(arg1):
    return _backend.jgrapht_graph_test_is_bipartite(arg1)

def jgrapht_graph_test_is_cubic(arg1):
    return _backend.jgrapht_graph_test_is_cubic(arg1)

def jgrapht_graph_test_is_eulerian(arg1):
    return _backend.jgrapht_graph_test_is_eulerian(arg1)

def jgrapht_graph_test_is_chordal(arg1):
    return _backend.jgrapht_graph_test_is_chordal(arg1)

def jgrapht_graph_test_is_weakly_chordal(arg1):
    return _backend.jgrapht_graph_test_is_weakly_chordal(arg1)

def jgrapht_graph_test_has_ore(arg1):
    return _backend.jgrapht_graph_test_has_ore(arg1)

def jgrapht_graph_test_is_trianglefree(arg1):
    return _backend.jgrapht_graph_test_is_trianglefree(arg1)

def jgrapht_graph_test_is_perfect(arg1):
    return _backend.jgrapht_graph_test_is_perfect(arg1)

def jgrapht_graph_test_is_planar(arg1):
    return _backend.jgrapht_graph_test_is_planar(arg1)

def jgrapht_graph_test_is_kuratowski_subdivision(arg1):
    return _backend.jgrapht_graph_test_is_kuratowski_subdivision(arg1)

def jgrapht_graph_test_is_k33_subdivision(arg1):
    return _backend.jgrapht_graph_test_is_k33_subdivision(arg1)

def jgrapht_graph_test_is_k5_subdivision(arg1):
    return _backend.jgrapht_graph_test_is_k5_subdivision(arg1)

def jgrapht_handles_destroy(arg1):
    return _backend.jgrapht_handles_destroy(arg1)

def jgrapht_handles_get_ccharpointer(arg1):
    return _backend.jgrapht_handles_get_ccharpointer(arg1)

def jgrapht_handles_get_edge_pair(arg1):
    return _backend.jgrapht_handles_get_edge_pair(arg1)

def jgrapht_handles_get_edge_triple(arg1):
    return _backend.jgrapht_handles_get_edge_triple(arg1)

def jgrapht_handles_get_str_edge_triple(arg1):
    return _backend.jgrapht_handles_get_str_edge_triple(arg1)

def jgrapht_handles_get_graphpath(arg1):
    return _backend.jgrapht_handles_get_graphpath(arg1)

def jgrapht_import_file_dimacs(arg1, BYTEARRAY, arg3, arg4, arg5):
    return _backend.jgrapht_import_file_dimacs(arg1, BYTEARRAY, arg3, arg4, arg5)

def jgrapht_import_string_dimacs(arg1, BYTEARRAY, arg3, arg4, arg5):
    return _backend.jgrapht_import_string_dimacs(arg1, BYTEARRAY, arg3, arg4, arg5)

def jgrapht_import_file_gml(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_import_file_gml(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7)

def jgrapht_import_string_gml(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_import_string_gml(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7)

def jgrapht_import_file_json(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_import_file_json(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7)

def jgrapht_import_string_json(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_import_string_json(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7)

def jgrapht_import_file_csv(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _backend.jgrapht_import_file_csv(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def jgrapht_import_string_csv(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8, arg9):
    return _backend.jgrapht_import_string_csv(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

def jgrapht_import_file_gexf(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8):
    return _backend.jgrapht_import_file_gexf(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8)

def jgrapht_import_string_gexf(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8):
    return _backend.jgrapht_import_string_gexf(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8)

def jgrapht_import_file_graphml_simple(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8):
    return _backend.jgrapht_import_file_graphml_simple(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8)

def jgrapht_import_string_graphml_simple(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8):
    return _backend.jgrapht_import_string_graphml_simple(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8)

def jgrapht_import_file_graphml(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8):
    return _backend.jgrapht_import_file_graphml(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8)

def jgrapht_import_string_graphml(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8):
    return _backend.jgrapht_import_string_graphml(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7, arg8)

def jgrapht_import_file_dot(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_import_file_dot(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7)

def jgrapht_import_string_dot(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_import_string_dot(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7)

def jgrapht_import_file_graph6sparse6(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_import_file_graph6sparse6(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7)

def jgrapht_import_string_graph6sparse6(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_import_string_graph6sparse6(arg1, BYTEARRAY, arg3, arg4, arg5, arg6, arg7)

def jgrapht_import_edgelist_noattrs_file_dimacs(BYTEARRAY):
    return _backend.jgrapht_import_edgelist_noattrs_file_dimacs(BYTEARRAY)

def jgrapht_import_edgelist_noattrs_string_dimacs(BYTEARRAY):
    return _backend.jgrapht_import_edgelist_noattrs_string_dimacs(BYTEARRAY)

def jgrapht_import_edgelist_attrs_file_dimacs(BYTEARRAY, arg2, arg3):
    return _backend.jgrapht_import_edgelist_attrs_file_dimacs(BYTEARRAY, arg2, arg3)

def jgrapht_import_edgelist_attrs_string_dimacs(BYTEARRAY, arg2, arg3):
    return _backend.jgrapht_import_edgelist_attrs_string_dimacs(BYTEARRAY, arg2, arg3)

def jgrapht_import_edgelist_noattrs_file_gml(BYTEARRAY):
    return _backend.jgrapht_import_edgelist_noattrs_file_gml(BYTEARRAY)

def jgrapht_import_edgelist_noattrs_string_gml(BYTEARRAY):
    return _backend.jgrapht_import_edgelist_noattrs_string_gml(BYTEARRAY)

def jgrapht_import_edgelist_attrs_file_gml(BYTEARRAY, arg2, arg3):
    return _backend.jgrapht_import_edgelist_attrs_file_gml(BYTEARRAY, arg2, arg3)

def jgrapht_import_edgelist_attrs_string_gml(BYTEARRAY, arg2, arg3):
    return _backend.jgrapht_import_edgelist_attrs_string_gml(BYTEARRAY, arg2, arg3)

def jgrapht_import_edgelist_noattrs_file_json(BYTEARRAY):
    return _backend.jgrapht_import_edgelist_noattrs_file_json(BYTEARRAY)

def jgrapht_import_edgelist_noattrs_string_json(BYTEARRAY):
    return _backend.jgrapht_import_edgelist_noattrs_string_json(BYTEARRAY)

def jgrapht_import_edgelist_attrs_file_json(BYTEARRAY, arg2, arg3):
    return _backend.jgrapht_import_edgelist_attrs_file_json(BYTEARRAY, arg2, arg3)

def jgrapht_import_edgelist_attrs_string_json(BYTEARRAY, arg2, arg3):
    return _backend.jgrapht_import_edgelist_attrs_string_json(BYTEARRAY, arg2, arg3)

def jgrapht_import_edgelist_noattrs_file_csv(BYTEARRAY, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_import_edgelist_noattrs_file_csv(BYTEARRAY, arg2, arg3, arg4, arg5)

def jgrapht_import_edgelist_noattrs_string_csv(BYTEARRAY, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_import_edgelist_noattrs_string_csv(BYTEARRAY, arg2, arg3, arg4, arg5)

def jgrapht_import_edgelist_attrs_file_csv(BYTEARRAY, arg2, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_import_edgelist_attrs_file_csv(BYTEARRAY, arg2, arg3, arg4, arg5, arg6, arg7)

def jgrapht_import_edgelist_attrs_string_csv(BYTEARRAY, arg2, arg3, arg4, arg5, arg6, arg7):
    return _backend.jgrapht_import_edgelist_attrs_string_csv(BYTEARRAY, arg2, arg3, arg4, arg5, arg6, arg7)

def jgrapht_import_edgelist_noattrs_file_gexf(BYTEARRAY, arg2):
    return _backend.jgrapht_import_edgelist_noattrs_file_gexf(BYTEARRAY, arg2)

def jgrapht_import_edgelist_noattrs_string_gexf(BYTEARRAY, arg2):
    return _backend.jgrapht_import_edgelist_noattrs_string_gexf(BYTEARRAY, arg2)

def jgrapht_import_edgelist_attrs_file_gexf(BYTEARRAY, arg2, arg3, arg4):
    return _backend.jgrapht_import_edgelist_attrs_file_gexf(BYTEARRAY, arg2, arg3, arg4)

def jgrapht_import_edgelist_attrs_string_gexf(BYTEARRAY, arg2, arg3, arg4):
    return _backend.jgrapht_import_edgelist_attrs_string_gexf(BYTEARRAY, arg2, arg3, arg4)

def jgrapht_import_edgelist_noattrs_file_graphml_simple(BYTEARRAY, arg2):
    return _backend.jgrapht_import_edgelist_noattrs_file_graphml_simple(BYTEARRAY, arg2)

def jgrapht_import_edgelist_noattrs_string_graphml_simple(BYTEARRAY, arg2):
    return _backend.jgrapht_import_edgelist_noattrs_string_graphml_simple(BYTEARRAY, arg2)

def jgrapht_import_edgelist_attrs_file_graphml_simple(BYTEARRAY, arg2, arg3, arg4):
    return _backend.jgrapht_import_edgelist_attrs_file_graphml_simple(BYTEARRAY, arg2, arg3, arg4)

def jgrapht_import_edgelist_attrs_string_graphml_simple(BYTEARRAY, arg2, arg3, arg4):
    return _backend.jgrapht_import_edgelist_attrs_string_graphml_simple(BYTEARRAY, arg2, arg3, arg4)

def jgrapht_import_edgelist_noattrs_file_graphml(BYTEARRAY, arg2):
    return _backend.jgrapht_import_edgelist_noattrs_file_graphml(BYTEARRAY, arg2)

def jgrapht_import_edgelist_noattrs_string_graphml(BYTEARRAY, arg2):
    return _backend.jgrapht_import_edgelist_noattrs_string_graphml(BYTEARRAY, arg2)

def jgrapht_import_edgelist_attrs_file_graphml(BYTEARRAY, arg2, arg3, arg4):
    return _backend.jgrapht_import_edgelist_attrs_file_graphml(BYTEARRAY, arg2, arg3, arg4)

def jgrapht_import_edgelist_attrs_string_graphml(BYTEARRAY, arg2, arg3, arg4):
    return _backend.jgrapht_import_edgelist_attrs_string_graphml(BYTEARRAY, arg2, arg3, arg4)

def jgrapht_import_edgelist_noattrs_file_dot(BYTEARRAY):
    return _backend.jgrapht_import_edgelist_noattrs_file_dot(BYTEARRAY)

def jgrapht_import_edgelist_noattrs_string_dot(BYTEARRAY):
    return _backend.jgrapht_import_edgelist_noattrs_string_dot(BYTEARRAY)

def jgrapht_import_edgelist_attrs_file_dot(BYTEARRAY, arg2, arg3):
    return _backend.jgrapht_import_edgelist_attrs_file_dot(BYTEARRAY, arg2, arg3)

def jgrapht_import_edgelist_attrs_string_dot(BYTEARRAY, arg2, arg3):
    return _backend.jgrapht_import_edgelist_attrs_string_dot(BYTEARRAY, arg2, arg3)

def jgrapht_import_edgelist_noattrs_file_graph6sparse6(BYTEARRAY):
    return _backend.jgrapht_import_edgelist_noattrs_file_graph6sparse6(BYTEARRAY)

def jgrapht_import_edgelist_noattrs_string_graph6sparse6(BYTEARRAY):
    return _backend.jgrapht_import_edgelist_noattrs_string_graph6sparse6(BYTEARRAY)

def jgrapht_import_edgelist_attrs_file_graph6sparse6(BYTEARRAY, arg2, arg3):
    return _backend.jgrapht_import_edgelist_attrs_file_graph6sparse6(BYTEARRAY, arg2, arg3)

def jgrapht_import_edgelist_attrs_string_graph6sparse6(BYTEARRAY, arg2, arg3):
    return _backend.jgrapht_import_edgelist_attrs_string_graph6sparse6(BYTEARRAY, arg2, arg3)

def jgrapht_independent_set_exec_chordal_max_independent_set(arg1):
    return _backend.jgrapht_independent_set_exec_chordal_max_independent_set(arg1)

def jgrapht_isomorphism_exec_vf2(arg1, arg2):
    return _backend.jgrapht_isomorphism_exec_vf2(arg1, arg2)

def jgrapht_isomorphism_exec_vf2_subgraph(arg1, arg2):
    return _backend.jgrapht_isomorphism_exec_vf2_subgraph(arg1, arg2)

def jgrapht_isomorphism_graph_mapping_edge_correspondence(arg1, arg2, arg3):
    return _backend.jgrapht_isomorphism_graph_mapping_edge_correspondence(arg1, arg2, arg3)

def jgrapht_isomorphism_graph_mapping_vertex_correspondence(arg1, arg2, arg3):
    return _backend.jgrapht_isomorphism_graph_mapping_vertex_correspondence(arg1, arg2, arg3)

def jgrapht_it_next_int(arg1):
    return _backend.jgrapht_it_next_int(arg1)

def jgrapht_it_next_double(arg1):
    return _backend.jgrapht_it_next_double(arg1)

def jgrapht_it_next_edge_triple(arg1):
    return _backend.jgrapht_it_next_edge_triple(arg1)

def jgrapht_it_next_str_edge_triple(arg1):
    return _backend.jgrapht_it_next_str_edge_triple(arg1)

def jgrapht_it_next_object(arg1):
    return _backend.jgrapht_it_next_object(arg1)

def jgrapht_it_hasnext(arg1):
    return _backend.jgrapht_it_hasnext(arg1)

def jgrapht_list_create():
    return _backend.jgrapht_list_create()

def jgrapht_list_it_create(arg1):
    return _backend.jgrapht_list_it_create(arg1)

def jgrapht_list_size(arg1):
    return _backend.jgrapht_list_size(arg1)

def jgrapht_list_int_add(arg1, arg2):
    return _backend.jgrapht_list_int_add(arg1, arg2)

def jgrapht_list_double_add(arg1, arg2):
    return _backend.jgrapht_list_double_add(arg1, arg2)

def jgrapht_list_edge_pair_add(arg1, arg2, arg3):
    return _backend.jgrapht_list_edge_pair_add(arg1, arg2, arg3)

def jgrapht_list_edge_triple_add(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_list_edge_triple_add(arg1, arg2, arg3, arg4)

def jgrapht_list_int_remove(arg1, arg2):
    return _backend.jgrapht_list_int_remove(arg1, arg2)

def jgrapht_list_double_remove(arg1, arg2):
    return _backend.jgrapht_list_double_remove(arg1, arg2)

def jgrapht_list_int_contains(arg1, arg2):
    return _backend.jgrapht_list_int_contains(arg1, arg2)

def jgrapht_list_double_contains(arg1, arg2):
    return _backend.jgrapht_list_double_contains(arg1, arg2)

def jgrapht_list_clear(arg1):
    return _backend.jgrapht_list_clear(arg1)

def jgrapht_listenable_as_listenable(arg1):
    return _backend.jgrapht_listenable_as_listenable(arg1)

def jgrapht_listenable_create_graph_listener(LONG_TO_FPTR):
    return _backend.jgrapht_listenable_create_graph_listener(LONG_TO_FPTR)

def jgrapht_listenable_add_graph_listener(arg1, arg2):
    return _backend.jgrapht_listenable_add_graph_listener(arg1, arg2)

def jgrapht_listenable_remove_graph_listener(arg1, arg2):
    return _backend.jgrapht_listenable_remove_graph_listener(arg1, arg2)

def jgrapht_map_create():
    return _backend.jgrapht_map_create()

def jgrapht_map_linked_create():
    return _backend.jgrapht_map_linked_create()

def jgrapht_map_keys_it_create(arg1):
    return _backend.jgrapht_map_keys_it_create(arg1)

def jgrapht_map_size(arg1):
    return _backend.jgrapht_map_size(arg1)

def jgrapht_map_values_it_create(arg1):
    return _backend.jgrapht_map_values_it_create(arg1)

def jgrapht_map_int_double_put(arg1, arg2, arg3):
    return _backend.jgrapht_map_int_double_put(arg1, arg2, arg3)

def jgrapht_map_int_int_put(arg1, arg2, arg3):
    return _backend.jgrapht_map_int_int_put(arg1, arg2, arg3)

def jgrapht_map_int_string_put(arg1, arg2, BYTEARRAY):
    return _backend.jgrapht_map_int_string_put(arg1, arg2, BYTEARRAY)

def jgrapht_map_int_double_get(arg1, arg2):
    return _backend.jgrapht_map_int_double_get(arg1, arg2)

def jgrapht_map_int_int_get(arg1, arg2):
    return _backend.jgrapht_map_int_int_get(arg1, arg2)

def jgrapht_map_int_string_get(arg1, arg2):
    return _backend.jgrapht_map_int_string_get(arg1, arg2)

def jgrapht_map_int_contains_key(arg1, arg2):
    return _backend.jgrapht_map_int_contains_key(arg1, arg2)

def jgrapht_map_int_double_remove(arg1, arg2):
    return _backend.jgrapht_map_int_double_remove(arg1, arg2)

def jgrapht_map_int_int_remove(arg1, arg2):
    return _backend.jgrapht_map_int_int_remove(arg1, arg2)

def jgrapht_map_int_string_remove(arg1, arg2):
    return _backend.jgrapht_map_int_string_remove(arg1, arg2)

def jgrapht_map_clear(arg1):
    return _backend.jgrapht_map_clear(arg1)

def jgrapht_matching_exec_greedy_general_max_card(arg1):
    return _backend.jgrapht_matching_exec_greedy_general_max_card(arg1)

def jgrapht_matching_exec_custom_greedy_general_max_card(arg1, arg2):
    return _backend.jgrapht_matching_exec_custom_greedy_general_max_card(arg1, arg2)

def jgrapht_matching_exec_edmonds_general_max_card_dense(arg1):
    return _backend.jgrapht_matching_exec_edmonds_general_max_card_dense(arg1)

def jgrapht_matching_exec_edmonds_general_max_card_sparse(arg1):
    return _backend.jgrapht_matching_exec_edmonds_general_max_card_sparse(arg1)

def jgrapht_matching_exec_greedy_general_max_weight(arg1):
    return _backend.jgrapht_matching_exec_greedy_general_max_weight(arg1)

def jgrapht_matching_exec_custom_greedy_general_max_weight(arg1, arg2, arg3):
    return _backend.jgrapht_matching_exec_custom_greedy_general_max_weight(arg1, arg2, arg3)

def jgrapht_matching_exec_pathgrowing_max_weight(arg1):
    return _backend.jgrapht_matching_exec_pathgrowing_max_weight(arg1)

def jgrapht_matching_exec_blossom5_general_max_weight(arg1):
    return _backend.jgrapht_matching_exec_blossom5_general_max_weight(arg1)

def jgrapht_matching_exec_blossom5_general_min_weight(arg1):
    return _backend.jgrapht_matching_exec_blossom5_general_min_weight(arg1)

def jgrapht_matching_exec_blossom5_general_perfect_max_weight(arg1):
    return _backend.jgrapht_matching_exec_blossom5_general_perfect_max_weight(arg1)

def jgrapht_matching_exec_blossom5_general_perfect_min_weight(arg1):
    return _backend.jgrapht_matching_exec_blossom5_general_perfect_min_weight(arg1)

def jgrapht_matching_exec_bipartite_max_card(arg1):
    return _backend.jgrapht_matching_exec_bipartite_max_card(arg1)

def jgrapht_matching_exec_bipartite_perfect_min_weight(arg1, arg2, arg3):
    return _backend.jgrapht_matching_exec_bipartite_perfect_min_weight(arg1, arg2, arg3)

def jgrapht_matching_exec_bipartite_max_weight(arg1):
    return _backend.jgrapht_matching_exec_bipartite_max_weight(arg1)

def jgrapht_mst_exec_kruskal(arg1):
    return _backend.jgrapht_mst_exec_kruskal(arg1)

def jgrapht_mst_exec_prim(arg1):
    return _backend.jgrapht_mst_exec_prim(arg1)

def jgrapht_mst_exec_boruvka(arg1):
    return _backend.jgrapht_mst_exec_boruvka(arg1)

def jgrapht_partition_exec_bipartite(arg1):
    return _backend.jgrapht_partition_exec_bipartite(arg1)

def jgrapht_planarity_exec_boyer_myrvold(arg1):
    return _backend.jgrapht_planarity_exec_boyer_myrvold(arg1)

def jgrapht_planarity_embedding_edges_around_vertex(arg1, arg2):
    return _backend.jgrapht_planarity_embedding_edges_around_vertex(arg1, arg2)

def jgrapht_scoring_exec_alpha_centrality(arg1):
    return _backend.jgrapht_scoring_exec_alpha_centrality(arg1)

def jgrapht_scoring_exec_custom_alpha_centrality(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_scoring_exec_custom_alpha_centrality(arg1, arg2, arg3, arg4, arg5)

def jgrapht_scoring_exec_betweenness_centrality(arg1):
    return _backend.jgrapht_scoring_exec_betweenness_centrality(arg1)

def jgrapht_scoring_exec_custom_betweenness_centrality(arg1, arg2):
    return _backend.jgrapht_scoring_exec_custom_betweenness_centrality(arg1, arg2)

def jgrapht_scoring_exec_closeness_centrality(arg1):
    return _backend.jgrapht_scoring_exec_closeness_centrality(arg1)

def jgrapht_scoring_exec_custom_closeness_centrality(arg1, arg2, arg3):
    return _backend.jgrapht_scoring_exec_custom_closeness_centrality(arg1, arg2, arg3)

def jgrapht_scoring_exec_harmonic_centrality(arg1):
    return _backend.jgrapht_scoring_exec_harmonic_centrality(arg1)

def jgrapht_scoring_exec_custom_harmonic_centrality(arg1, arg2, arg3):
    return _backend.jgrapht_scoring_exec_custom_harmonic_centrality(arg1, arg2, arg3)

def jgrapht_scoring_exec_pagerank(arg1):
    return _backend.jgrapht_scoring_exec_pagerank(arg1)

def jgrapht_scoring_exec_custom_pagerank(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_scoring_exec_custom_pagerank(arg1, arg2, arg3, arg4)

def jgrapht_scoring_exec_coreness(arg1):
    return _backend.jgrapht_scoring_exec_coreness(arg1)

def jgrapht_scoring_exec_clustering_coefficient(arg1):
    return _backend.jgrapht_scoring_exec_clustering_coefficient(arg1)

def jgrapht_set_create():
    return _backend.jgrapht_set_create()

def jgrapht_set_linked_create():
    return _backend.jgrapht_set_linked_create()

def jgrapht_set_it_create(arg1):
    return _backend.jgrapht_set_it_create(arg1)

def jgrapht_set_size(arg1):
    return _backend.jgrapht_set_size(arg1)

def jgrapht_set_int_add(arg1, arg2):
    return _backend.jgrapht_set_int_add(arg1, arg2)

def jgrapht_set_double_add(arg1, arg2):
    return _backend.jgrapht_set_double_add(arg1, arg2)

def jgrapht_set_int_remove(arg1, arg2):
    return _backend.jgrapht_set_int_remove(arg1, arg2)

def jgrapht_set_double_remove(arg1, arg2):
    return _backend.jgrapht_set_double_remove(arg1, arg2)

def jgrapht_set_int_contains(arg1, arg2):
    return _backend.jgrapht_set_int_contains(arg1, arg2)

def jgrapht_set_double_contains(arg1, arg2):
    return _backend.jgrapht_set_double_contains(arg1, arg2)

def jgrapht_set_clear(arg1):
    return _backend.jgrapht_set_clear(arg1)

def jgrapht_sp_exec_dijkstra_get_path_between_vertices(arg1, arg2, arg3):
    return _backend.jgrapht_sp_exec_dijkstra_get_path_between_vertices(arg1, arg2, arg3)

def jgrapht_sp_exec_bidirectional_dijkstra_get_path_between_vertices(arg1, arg2, arg3):
    return _backend.jgrapht_sp_exec_bidirectional_dijkstra_get_path_between_vertices(arg1, arg2, arg3)

def jgrapht_sp_exec_dijkstra_get_singlesource_from_vertex(arg1, arg2):
    return _backend.jgrapht_sp_exec_dijkstra_get_singlesource_from_vertex(arg1, arg2)

def jgrapht_sp_exec_bellmanford_get_singlesource_from_vertex(arg1, arg2):
    return _backend.jgrapht_sp_exec_bellmanford_get_singlesource_from_vertex(arg1, arg2)

def jgrapht_sp_exec_bfs_get_singlesource_from_vertex(arg1, arg2):
    return _backend.jgrapht_sp_exec_bfs_get_singlesource_from_vertex(arg1, arg2)

def jgrapht_sp_exec_johnson_get_allpairs(arg1):
    return _backend.jgrapht_sp_exec_johnson_get_allpairs(arg1)

def jgrapht_sp_exec_floydwarshall_get_allpairs(arg1):
    return _backend.jgrapht_sp_exec_floydwarshall_get_allpairs(arg1)

def jgrapht_sp_singlesource_get_path_to_vertex(arg1, arg2):
    return _backend.jgrapht_sp_singlesource_get_path_to_vertex(arg1, arg2)

def jgrapht_sp_allpairs_get_path_between_vertices(arg1, arg2, arg3):
    return _backend.jgrapht_sp_allpairs_get_path_between_vertices(arg1, arg2, arg3)

def jgrapht_sp_allpairs_get_singlesource_from_vertex(arg1, arg2):
    return _backend.jgrapht_sp_allpairs_get_singlesource_from_vertex(arg1, arg2)

def jgrapht_sp_exec_astar_get_path_between_vertices(arg1, arg2, arg3, LONG_TO_FPTR):
    return _backend.jgrapht_sp_exec_astar_get_path_between_vertices(arg1, arg2, arg3, LONG_TO_FPTR)

def jgrapht_sp_exec_bidirectional_astar_get_path_between_vertices(arg1, arg2, arg3, LONG_TO_FPTR):
    return _backend.jgrapht_sp_exec_bidirectional_astar_get_path_between_vertices(arg1, arg2, arg3, LONG_TO_FPTR)

def jgrapht_sp_exec_astar_alt_heuristic_get_path_between_vertices(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_sp_exec_astar_alt_heuristic_get_path_between_vertices(arg1, arg2, arg3, arg4)

def jgrapht_sp_exec_bidirectional_astar_alt_heuristic_get_path_between_vertices(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_sp_exec_bidirectional_astar_alt_heuristic_get_path_between_vertices(arg1, arg2, arg3, arg4)

def jgrapht_sp_exec_yen_get_k_loopless_paths_between_vertices(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_sp_exec_yen_get_k_loopless_paths_between_vertices(arg1, arg2, arg3, arg4)

def jgrapht_sp_exec_eppstein_get_k_paths_between_vertices(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_sp_exec_eppstein_get_k_paths_between_vertices(arg1, arg2, arg3, arg4)

def jgrapht_sp_exec_delta_stepping_get_path_between_vertices(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_sp_exec_delta_stepping_get_path_between_vertices(arg1, arg2, arg3, arg4, arg5)

def jgrapht_sp_exec_delta_stepping_get_singlesource_from_vertex(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_sp_exec_delta_stepping_get_singlesource_from_vertex(arg1, arg2, arg3, arg4)

def jgrapht_multisp_exec_martin_get_multiobjectivesinglesource_from_vertex(arg1, arg2, LONG_TO_FPTR, arg4):
    return _backend.jgrapht_multisp_exec_martin_get_multiobjectivesinglesource_from_vertex(arg1, arg2, LONG_TO_FPTR, arg4)

def jgrapht_multisp_exec_martin_get_paths_between_vertices(arg1, arg2, arg3, LONG_TO_FPTR, arg5):
    return _backend.jgrapht_multisp_exec_martin_get_paths_between_vertices(arg1, arg2, arg3, LONG_TO_FPTR, arg5)

def jgrapht_multisp_multiobjectivesinglesource_get_paths_to_vertex(arg1, arg2):
    return _backend.jgrapht_multisp_multiobjectivesinglesource_get_paths_to_vertex(arg1, arg2)

def jgrapht_spanner_exec_greedy_multiplicative(arg1, arg2):
    return _backend.jgrapht_spanner_exec_greedy_multiplicative(arg1, arg2)

def jgrapht_tour_tsp_random(arg1, arg2):
    return _backend.jgrapht_tour_tsp_random(arg1, arg2)

def jgrapht_tour_tsp_greedy_heuristic(arg1):
    return _backend.jgrapht_tour_tsp_greedy_heuristic(arg1)

def jgrapht_tour_tsp_nearest_insertion_heuristic(arg1):
    return _backend.jgrapht_tour_tsp_nearest_insertion_heuristic(arg1)

def jgrapht_tour_tsp_nearest_neighbor_heuristic(arg1, arg2):
    return _backend.jgrapht_tour_tsp_nearest_neighbor_heuristic(arg1, arg2)

def jgrapht_tour_metric_tsp_christofides(arg1):
    return _backend.jgrapht_tour_metric_tsp_christofides(arg1)

def jgrapht_tour_metric_tsp_two_approx(arg1):
    return _backend.jgrapht_tour_metric_tsp_two_approx(arg1)

def jgrapht_tour_tsp_held_karp(arg1):
    return _backend.jgrapht_tour_tsp_held_karp(arg1)

def jgrapht_tour_hamiltonian_palmer(arg1):
    return _backend.jgrapht_tour_hamiltonian_palmer(arg1)

def jgrapht_tour_tsp_two_opt_heuristic(arg1, arg2, arg3, arg4):
    return _backend.jgrapht_tour_tsp_two_opt_heuristic(arg1, arg2, arg3, arg4)

def jgrapht_tour_tsp_two_opt_heuristic_improve(arg1, arg2, arg3):
    return _backend.jgrapht_tour_tsp_two_opt_heuristic_improve(arg1, arg2, arg3)

def jgrapht_traverse_create_bfs_from_all_vertices_vit(arg1):
    return _backend.jgrapht_traverse_create_bfs_from_all_vertices_vit(arg1)

def jgrapht_traverse_create_bfs_from_vertex_vit(arg1, arg2):
    return _backend.jgrapht_traverse_create_bfs_from_vertex_vit(arg1, arg2)

def jgrapht_traverse_create_lex_bfs_vit(arg1):
    return _backend.jgrapht_traverse_create_lex_bfs_vit(arg1)

def jgrapht_traverse_create_dfs_from_all_vertices_vit(arg1):
    return _backend.jgrapht_traverse_create_dfs_from_all_vertices_vit(arg1)

def jgrapht_traverse_create_dfs_from_vertex_vit(arg1, arg2):
    return _backend.jgrapht_traverse_create_dfs_from_vertex_vit(arg1, arg2)

def jgrapht_traverse_create_topological_order_vit(arg1):
    return _backend.jgrapht_traverse_create_topological_order_vit(arg1)

def jgrapht_traverse_create_random_walk_from_vertex_vit(arg1, arg2):
    return _backend.jgrapht_traverse_create_random_walk_from_vertex_vit(arg1, arg2)

def jgrapht_traverse_create_custom_random_walk_from_vertex_vit(arg1, arg2, arg3, arg4, arg5):
    return _backend.jgrapht_traverse_create_custom_random_walk_from_vertex_vit(arg1, arg2, arg3, arg4, arg5)

def jgrapht_traverse_create_max_cardinality_vit(arg1):
    return _backend.jgrapht_traverse_create_max_cardinality_vit(arg1)

def jgrapht_traverse_create_degeneracy_ordering_vit(arg1):
    return _backend.jgrapht_traverse_create_degeneracy_ordering_vit(arg1)

def jgrapht_traverse_create_closest_first_from_vertex_vit(arg1, arg2):
    return _backend.jgrapht_traverse_create_closest_first_from_vertex_vit(arg1, arg2)

def jgrapht_traverse_create_custom_closest_first_from_vertex_vit(arg1, arg2, arg3):
    return _backend.jgrapht_traverse_create_custom_closest_first_from_vertex_vit(arg1, arg2, arg3)

def jgrapht_vertexcover_exec_greedy(arg1):
    return _backend.jgrapht_vertexcover_exec_greedy(arg1)

def jgrapht_vertexcover_exec_greedy_weighted(arg1, arg2):
    return _backend.jgrapht_vertexcover_exec_greedy_weighted(arg1, arg2)

def jgrapht_vertexcover_exec_clarkson(arg1):
    return _backend.jgrapht_vertexcover_exec_clarkson(arg1)

def jgrapht_vertexcover_exec_clarkson_weighted(arg1, arg2):
    return _backend.jgrapht_vertexcover_exec_clarkson_weighted(arg1, arg2)

def jgrapht_vertexcover_exec_edgebased(arg1):
    return _backend.jgrapht_vertexcover_exec_edgebased(arg1)

def jgrapht_vertexcover_exec_baryehudaeven(arg1):
    return _backend.jgrapht_vertexcover_exec_baryehudaeven(arg1)

def jgrapht_vertexcover_exec_baryehudaeven_weighted(arg1, arg2):
    return _backend.jgrapht_vertexcover_exec_baryehudaeven_weighted(arg1, arg2)

def jgrapht_vertexcover_exec_exact(arg1):
    return _backend.jgrapht_vertexcover_exec_exact(arg1)

def jgrapht_vertexcover_exec_exact_weighted(arg1, arg2):
    return _backend.jgrapht_vertexcover_exec_exact_weighted(arg1, arg2)


