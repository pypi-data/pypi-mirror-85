import types
from functools import lru_cache
from typing import Optional

from லஸ்ஸியிலக்கணங்கள் import இலக்கணம்_பெறு, நிரல்மொழிகள்

from ._வெளியே.lark import Lark as லார்க, Tree, Token
from ._வெளியே.lark.indenter import Indenter
from ._வெளியே.lark.reconstruct import Reconstructor
from ._வெளியே.lark.visitors import Visitor


class _வரிசை_மாற்றம்(Visitor):
    def __init__(தன், வரிசைகள்):

        for கிளை, வரிசை in வரிசைகள்.items():

            def செயலி_உருவாக்கு(வரிசை_):
                def செயலி(தன், மரம்):
                    மரம்.children = [மரம்.children[இ] for இ in வரிசை_[:len(மரம்.children)]]

                return செயலி

            setattr(தன், கிளை, types.MethodType(செயலி_உருவாக்கு(வரிசை), தன்))
        super().__init__()


class பாகுப்படுத்தி(object):
    def __init__(தன்):
        தன்._நிரல்மொழிகள் = {}

    def __getitem__(தன், நிரல்மொழி):
        if நிரல்மொழி not in தன்._நிரல்மொழிகள்:
            தன்._நிரல்மொழிகள்[நிரல்மொழி] = நிரல்மொழிப்பாகுப்படுத்தி(நிரல்மொழி)
        return தன்._நிரல்மொழிகள்[நிரல்மொழி]


class நிரல்மொழிப்பாகுப்படுத்தி(object):
    def __init__(தன், நிரல்மொழி):
        தன்.நிரல்மொழி = நிரல்மொழி

    @lru_cache()
    def பாகுபடுத்தி_பெறு(தன், மொழி, எண்ணுரு=None, பதிப்பு=None):
        இலக்கணம் = இலக்கணம்_பெறு(தன்.நிரல்மொழி, மொழி, எண்ணுரு=எண்ணுரு)

        ஆரம்பம் = நிரல்மொழிகள்.தகவல்(தன்.நிரல்மொழி, "இலக்கணம் ஆரம்பம்", பதிப்பு=பதிப்பு)
        உள்தள்ளல் = நிரல்மொழிகள்.தகவல்(தன்.நிரல்மொழி, "உள்தள்ளல்", பதிப்பு=பதிப்பு)

        விருப்பங்கள் = {}
        if உள்தள்ளல்:
            விருப்பங்கள்['postlex'] = தன்._உள்தள்ளல்_பெற(உள்தள்ளல்[0], உள்தள்ளல்[1])()

        return லார்க(இலக்கணம், parser='lalr', start=ஆரம்பம், regex=True, **விருப்பங்கள்)

    @lru_cache()
    def புனரமைப்பு_பெறு(தன், மொழி, எண்ணுரு=None, பதிப்பு=None):
        return Reconstructor(தன்.பாகுபடுத்தி_பெறு(மொழி, எண்ணுரு=எண்ணுரு, பதிப்பு=பதிப்பு))

    def வரிசைமாற்றி_பெறு(தன், மூல்மொழி, வேண்டியமொழி, பதிப்பு=None):
        விதிகள் = நிரல்மொழிகள்.விதிகள்(தன்.நிரல்மொழி, பதிப்பு=பதிப்பு)

        def சமம்(இ, ஈ):
            if isinstance(இ, Tree):
                if not isinstance(ஈ, Tree):
                    return False
                இ = [ஆ for ஆ in இ.children if isinstance(ஆ, Token) or ஆ.data != 'literal']
                ஈ = [ஆ for ஆ in ஈ.children if isinstance(ஆ, Token) or ஆ.data != 'literal']
                return all(சமம்(ஊ, ஏ) for ஊ, ஏ in zip(இ, ஈ))
            else:
                return இ == ஈ

        def வரிசை_பெறு(மூல், வேண்டியது):
            மூல்_உருப்படிகள் = [ஆ for ஆ in மூல் if not isinstance(ஆ, Token) and ஆ.data != 'literal']
            வேண்டிய_உருப்படிகள் = [ஆ for ஆ in வேண்டியது if not isinstance(ஆ, Token) and ஆ.data != 'literal']
            வரி = []
            for ஏ, உருப்படி in enumerate(மூல்_உருப்படிகள்):
                if சமம்(உருப்படி,  வேண்டிய_உருப்படிகள்[ஏ]):
                    வரி.append(ஏ)
                else:
                    வரி.append(next(இ for இ, ஈ in enumerate(வேண்டிய_உருப்படிகள்) if சமம்(ஈ, உருப்படி)))
            return வரி

        லார்க்_பகுப்பாய்வி = None
        வரிசை_மாற்றி = {}
        for விதி in விதிகள்:
            மூல்_விதி = நிரல்மொழிகள்.விதி_மொழிபெயர்ப்பு(தன்.நிரல்மொழி, மொழி=மூல்மொழி, விதி=விதி) or விதி
            வேண்டிய_விதி = நிரல்மொழிகள்.விதி_மொழிபெயர்ப்பு(தன்.நிரல்மொழி, மொழி=வேண்டியமொழி, விதி=விதி) or விதி
            if வேண்டிய_விதி and மூல்_விதி != வேண்டிய_விதி:
                லார்க்_இலக்கணம் = நிரல்மொழிகள்.விதிகள்('lark')
                லார்க்_பகுப்பாய்வி = லார்க்_பகுப்பாய்வி or லார்க('\n'.join(லார்க்_இலக்கணம்))
                மூல்_மரம் = லார்க்_பகுப்பாய்வி.parse(மூல்_விதி + '\n')
                வேண்டிய_மரம் = லார்க்_பகுப்பாய்வி.parse(வேண்டிய_விதி + '\n')

                மூல்_குழந்தைகள் = மூல்_மரம்.children[0].children[1].children
                வேண்டிய_குழந்தைகள் = வேண்டிய_மரம்.children[0].children[1].children
                வரிசை = வரிசை_பெறு(மூல்_குழந்தைகள், வேண்டிய_குழந்தைகள்)
                if வரிசை != list(range(len(வரிசை))):
                    விதி_பெயர் = str(மூல்_மரம்.children[0].children[0])
                    வரிசை_மாற்றி[விதி_பெயர்] = வரிசை
        if வரிசை_மாற்றி:
            return _வரிசை_மாற்றம்(வரிசை_மாற்றி)

    def பின்_புனரமைப்பு_பெறு(தன், பதிப்பு=None):

        உள்தள்ளல் = நிரல்மொழிகள்.தகவல்(தன்.நிரல்மொழி, "உள்தள்ளல்", பதிப்பு=பதிப்பு) or []

        def பின்_புனரமைப்பு(உரை):
            for ஈ in உரை:
                if not hasattr(ஈ, 'type') or ஈ.type not in உள்தள்ளல்:
                    yield '{} '.format(ஈ) if len(ஈ.strip()) and not ஈ.strip(' \t').endswith('\n') else ஈ

        return பின்_புனரமைப்பு

    @staticmethod
    def _உள்தள்ளல்_பெற(உள், வேள்):
        class உள்தள்ளல்(Indenter):
            NL_type = 'NEWLINE'
            OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
            CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
            INDENT_type = உள்
            DEDENT_type = வேள்
            tab_len = 8

        return உள்தள்ளல்


மைய_பாகுப்படுத்தி = பாகுப்படுத்தி()


def பகுப்பாய்வி_பெறு(நிரல்மொழி, மொழி, எண்ணுரு=None, பதிப்பு=None) -> லார்க:
    return மைய_பாகுப்படுத்தி[நிரல்மொழி].பாகுபடுத்தி_பெறு(மொழி, எண்ணுரு=எண்ணுரு, பதிப்பு=பதிப்பு)


def வரிசைமாற்றி_பெறு(நிரல்மொழி, மூல்மொழி, வேண்டியமொழி, பதிப்பு=None) -> Optional[Visitor]:
    return மைய_பாகுப்படுத்தி[நிரல்மொழி].வரிசைமாற்றி_பெறு(மூல்மொழி, வேண்டியமொழி, பதிப்பு=பதிப்பு)


def புனரமைப்பு_பெறு(நிரல்மொழி, மொழி, எண்ணுரு=None, பதிப்பு=None):
    return மைய_பாகுப்படுத்தி[நிரல்மொழி].புனரமைப்பு_பெறு(மொழி, எண்ணுரு=எண்ணுரு, பதிப்பு=பதிப்பு)


def பின்_புனரமைப்பு_பெறு(நிரல்மொழி, பதிப்பு=None):
    return மைய_பாகுப்படுத்தி[நிரல்மொழி].பின்_புனரமைப்பு_பெறு(பதிப்பு=பதிப்பு)
