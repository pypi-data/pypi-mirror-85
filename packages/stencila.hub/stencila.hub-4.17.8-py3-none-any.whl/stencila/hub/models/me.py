# coding: utf-8

"""
    Stencila Hub API

    ## Authentication  Many endpoints in the Stencila Hub API require an authentication token. These tokens carry many privileges, so be sure to keep them secure. Do not place your tokens in publicly accessible areas such as client-side code. The API is only served over HTTPS to avoid exposing tokens and other data on the network.  To obtain a token, [`POST /api/tokens`](#operations-tokens-tokens_create) with either a `username` and `password` pair, or an [OpenID Connect](https://openid.net/connect/) token. Then use the token in the `Authorization` header of subsequent requests with the prefix `Token` e.g.      curl -H \"Authorization: Token 48866b1e38a2e9db0baada2140b2327937f4a3636dd5f2dfd8c212341c88d34\" https://hub.stenci.la/api/projects/  Alternatively, you can use `Basic` authentication with the token used as the username and no password. This can be more convenient when using command line tools such as [cURL](https://curl.haxx.se/) e.g.      curl -u 48866b1e38a2e9db0baada2140b2327937f4a3636dd5f2dfd8c212341c88d34: https://hub.stenci.la/api/projects/  Or, the less ubiquitous, but more accessible [httpie](https://httpie.org/):      http --auth 48866b1e38a2e9db0baada2140b2327937f4a3636dd5f2dfd8c212341c88d34: https://hub.stenci.la/api/projects/  In both examples above, the trailing colon is not required but avoids being asked for a password.  ## Versioning  The Stencila Hub is released using semantic versioning. The current version is available from the [`GET /api/status`](/api/status) endpoint. Please see the [Github release page](https://github.com/stencila/hub/releases) and the [changelog](https://github.com/stencila/hub/blob/master/CHANGELOG.md) for details on each release. We currently do not provide versioning of the API but plan to do so soon (probably by using a `Accept: application/vnd.stencila.hub+json;version=1.0` request header). If you are using, or interested in using, the API please contact us and we may be able to expedite this.   # noqa: E501

    The version of the OpenAPI document: v1
    Contact: hello@stenci.la
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from stencila.hub.configuration import Configuration


class Me(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'username': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'display_name': 'str',
        'location': 'str',
        'image': 'AccountImage',
        'website': 'str',
        'public_email': 'str',
        'date_joined': 'datetime',
        'last_login': 'datetime',
        'email_addresses': 'list[MeEmailAddress]',
        'linked_accounts': 'list[MeLinkedAccount]',
        'personal_account': 'PersonalAccount',
        'orgs_summary': 'str',
        'projects_summary': 'str',
        'feature_flags': 'str'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'display_name': 'displayName',
        'location': 'location',
        'image': 'image',
        'website': 'website',
        'public_email': 'publicEmail',
        'date_joined': 'dateJoined',
        'last_login': 'lastLogin',
        'email_addresses': 'emailAddresses',
        'linked_accounts': 'linkedAccounts',
        'personal_account': 'personalAccount',
        'orgs_summary': 'orgsSummary',
        'projects_summary': 'projectsSummary',
        'feature_flags': 'featureFlags'
    }

    def __init__(self, id=None, username=None, first_name=None, last_name=None, display_name=None, location=None, image=None, website=None, public_email=None, date_joined=None, last_login=None, email_addresses=None, linked_accounts=None, personal_account=None, orgs_summary=None, projects_summary=None, feature_flags=None, local_vars_configuration=None):  # noqa: E501
        """Me - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._username = None
        self._first_name = None
        self._last_name = None
        self._display_name = None
        self._location = None
        self._image = None
        self._website = None
        self._public_email = None
        self._date_joined = None
        self._last_login = None
        self._email_addresses = None
        self._linked_accounts = None
        self._personal_account = None
        self._orgs_summary = None
        self._projects_summary = None
        self._feature_flags = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.username = username
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if display_name is not None:
            self.display_name = display_name
        if location is not None:
            self.location = location
        if image is not None:
            self.image = image
        if website is not None:
            self.website = website
        if public_email is not None:
            self.public_email = public_email
        if date_joined is not None:
            self.date_joined = date_joined
        self.last_login = last_login
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if linked_accounts is not None:
            self.linked_accounts = linked_accounts
        self.personal_account = personal_account
        if orgs_summary is not None:
            self.orgs_summary = orgs_summary
        if projects_summary is not None:
            self.projects_summary = projects_summary
        if feature_flags is not None:
            self.feature_flags = feature_flags

    @property
    def id(self):
        """Gets the id of this Me.  # noqa: E501


        :return: The id of this Me.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Me.


        :param id: The id of this Me.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this Me.  # noqa: E501

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.  # noqa: E501

        :return: The username of this Me.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Me.

        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.  # noqa: E501

        :param username: The username of this Me.  # noqa: E501
        :type username: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) > 150):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `150`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) < 1):
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and not re.search(r'^[\w.@+-]+$', username)):  # noqa: E501
            raise ValueError(r"Invalid value for `username`, must be a follow pattern or equal to `/^[\w.@+-]+$/`")  # noqa: E501

        self._username = username

    @property
    def first_name(self):
        """Gets the first_name of this Me.  # noqa: E501


        :return: The first_name of this Me.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Me.


        :param first_name: The first_name of this Me.  # noqa: E501
        :type first_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                first_name is not None and len(first_name) > 150):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `150`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Me.  # noqa: E501


        :return: The last_name of this Me.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Me.


        :param last_name: The last_name of this Me.  # noqa: E501
        :type last_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                last_name is not None and len(last_name) > 150):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `150`")  # noqa: E501

        self._last_name = last_name

    @property
    def display_name(self):
        """Gets the display_name of this Me.  # noqa: E501


        :return: The display_name of this Me.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Me.


        :param display_name: The display_name of this Me.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def location(self):
        """Gets the location of this Me.  # noqa: E501


        :return: The location of this Me.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Me.


        :param location: The location of this Me.  # noqa: E501
        :type location: str
        """

        self._location = location

    @property
    def image(self):
        """Gets the image of this Me.  # noqa: E501


        :return: The image of this Me.  # noqa: E501
        :rtype: AccountImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Me.


        :param image: The image of this Me.  # noqa: E501
        :type image: AccountImage
        """

        self._image = image

    @property
    def website(self):
        """Gets the website of this Me.  # noqa: E501


        :return: The website of this Me.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Me.


        :param website: The website of this Me.  # noqa: E501
        :type website: str
        """

        self._website = website

    @property
    def public_email(self):
        """Gets the public_email of this Me.  # noqa: E501


        :return: The public_email of this Me.  # noqa: E501
        :rtype: str
        """
        return self._public_email

    @public_email.setter
    def public_email(self, public_email):
        """Sets the public_email of this Me.


        :param public_email: The public_email of this Me.  # noqa: E501
        :type public_email: str
        """

        self._public_email = public_email

    @property
    def date_joined(self):
        """Gets the date_joined of this Me.  # noqa: E501


        :return: The date_joined of this Me.  # noqa: E501
        :rtype: datetime
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined):
        """Sets the date_joined of this Me.


        :param date_joined: The date_joined of this Me.  # noqa: E501
        :type date_joined: datetime
        """

        self._date_joined = date_joined

    @property
    def last_login(self):
        """Gets the last_login of this Me.  # noqa: E501


        :return: The last_login of this Me.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this Me.


        :param last_login: The last_login of this Me.  # noqa: E501
        :type last_login: datetime
        """

        self._last_login = last_login

    @property
    def email_addresses(self):
        """Gets the email_addresses of this Me.  # noqa: E501


        :return: The email_addresses of this Me.  # noqa: E501
        :rtype: list[MeEmailAddress]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this Me.


        :param email_addresses: The email_addresses of this Me.  # noqa: E501
        :type email_addresses: list[MeEmailAddress]
        """

        self._email_addresses = email_addresses

    @property
    def linked_accounts(self):
        """Gets the linked_accounts of this Me.  # noqa: E501


        :return: The linked_accounts of this Me.  # noqa: E501
        :rtype: list[MeLinkedAccount]
        """
        return self._linked_accounts

    @linked_accounts.setter
    def linked_accounts(self, linked_accounts):
        """Sets the linked_accounts of this Me.


        :param linked_accounts: The linked_accounts of this Me.  # noqa: E501
        :type linked_accounts: list[MeLinkedAccount]
        """

        self._linked_accounts = linked_accounts

    @property
    def personal_account(self):
        """Gets the personal_account of this Me.  # noqa: E501


        :return: The personal_account of this Me.  # noqa: E501
        :rtype: PersonalAccount
        """
        return self._personal_account

    @personal_account.setter
    def personal_account(self, personal_account):
        """Sets the personal_account of this Me.


        :param personal_account: The personal_account of this Me.  # noqa: E501
        :type personal_account: PersonalAccount
        """
        if self.local_vars_configuration.client_side_validation and personal_account is None:  # noqa: E501
            raise ValueError("Invalid value for `personal_account`, must not be `None`")  # noqa: E501

        self._personal_account = personal_account

    @property
    def orgs_summary(self):
        """Gets the orgs_summary of this Me.  # noqa: E501


        :return: The orgs_summary of this Me.  # noqa: E501
        :rtype: str
        """
        return self._orgs_summary

    @orgs_summary.setter
    def orgs_summary(self, orgs_summary):
        """Sets the orgs_summary of this Me.


        :param orgs_summary: The orgs_summary of this Me.  # noqa: E501
        :type orgs_summary: str
        """

        self._orgs_summary = orgs_summary

    @property
    def projects_summary(self):
        """Gets the projects_summary of this Me.  # noqa: E501


        :return: The projects_summary of this Me.  # noqa: E501
        :rtype: str
        """
        return self._projects_summary

    @projects_summary.setter
    def projects_summary(self, projects_summary):
        """Sets the projects_summary of this Me.


        :param projects_summary: The projects_summary of this Me.  # noqa: E501
        :type projects_summary: str
        """

        self._projects_summary = projects_summary

    @property
    def feature_flags(self):
        """Gets the feature_flags of this Me.  # noqa: E501


        :return: The feature_flags of this Me.  # noqa: E501
        :rtype: str
        """
        return self._feature_flags

    @feature_flags.setter
    def feature_flags(self, feature_flags):
        """Sets the feature_flags of this Me.


        :param feature_flags: The feature_flags of this Me.  # noqa: E501
        :type feature_flags: str
        """

        self._feature_flags = feature_flags

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Me):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Me):
            return True

        return self.to_dict() != other.to_dict()
