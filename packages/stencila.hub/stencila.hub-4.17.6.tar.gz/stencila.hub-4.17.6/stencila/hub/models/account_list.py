# coding: utf-8

"""
    Stencila Hub API

    ## Authentication  Many endpoints in the Stencila Hub API require an authentication token. These tokens carry many privileges, so be sure to keep them secure. Do not place your tokens in publicly accessible areas such as client-side code. The API is only served over HTTPS to avoid exposing tokens and other data on the network.  To obtain a token, [`POST /api/tokens`](#operations-tokens-tokens_create) with either a `username` and `password` pair, or an [OpenID Connect](https://openid.net/connect/) token. Then use the token in the `Authorization` header of subsequent requests with the prefix `Token` e.g.      curl -H \"Authorization: Token 48866b1e38a2e9db0baada2140b2327937f4a3636dd5f2dfd8c212341c88d34\" https://hub.stenci.la/api/projects/  Alternatively, you can use `Basic` authentication with the token used as the username and no password. This can be more convenient when using command line tools such as [cURL](https://curl.haxx.se/) e.g.      curl -u 48866b1e38a2e9db0baada2140b2327937f4a3636dd5f2dfd8c212341c88d34: https://hub.stenci.la/api/projects/  Or, the less ubiquitous, but more accessible [httpie](https://httpie.org/):      http --auth 48866b1e38a2e9db0baada2140b2327937f4a3636dd5f2dfd8c212341c88d34: https://hub.stenci.la/api/projects/  In both examples above, the trailing colon is not required but avoids being asked for a password.  ## Versioning  The Stencila Hub is released using semantic versioning. The current version is available from the [`GET /api/status`](/api/status) endpoint. Please see the [Github release page](https://github.com/stencila/hub/releases) and the [changelog](https://github.com/stencila/hub/blob/master/CHANGELOG.md) for details on each release. We currently do not provide versioning of the API but plan to do so soon (probably by using a `Accept: application/vnd.stencila.hub+json;version=1.0` request header). If you are using, or interested in using, the API please contact us and we may be able to expedite this.   # noqa: E501

    The version of the OpenAPI document: v1
    Contact: hello@stenci.la
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from stencila.hub.configuration import Configuration


class AccountList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'display_name': 'str',
        'email': 'str',
        'image': 'AccountImage',
        'location': 'str',
        'website': 'str',
        'role': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'display_name': 'displayName',
        'email': 'email',
        'image': 'image',
        'location': 'location',
        'website': 'website',
        'role': 'role'
    }

    def __init__(self, id=None, name=None, display_name=None, email=None, image=None, location=None, website=None, role=None, local_vars_configuration=None):  # noqa: E501
        """AccountList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._display_name = None
        self._email = None
        self._image = None
        self._location = None
        self._website = None
        self._role = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.display_name = display_name
        self.email = email
        if image is not None:
            self.image = image
        self.location = location
        self.website = website
        if role is not None:
            self.role = role

    @property
    def id(self):
        """Gets the id of this AccountList.  # noqa: E501


        :return: The id of this AccountList.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountList.


        :param id: The id of this AccountList.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccountList.  # noqa: E501

        Name of the account. Lowercase and no spaces or leading numbers. Will be used in URLS e.g. https://hub.stenci.la/awesome-org  # noqa: E501

        :return: The name of this AccountList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountList.

        Name of the account. Lowercase and no spaces or leading numbers. Will be used in URLS e.g. https://hub.stenci.la/awesome-org  # noqa: E501

        :param name: The name of this AccountList.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this AccountList.  # noqa: E501

        Name to display in account profile.  # noqa: E501

        :return: The display_name of this AccountList.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AccountList.

        Name to display in account profile.  # noqa: E501

        :param display_name: The display_name of this AccountList.  # noqa: E501
        :type display_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                display_name is not None and len(display_name) > 256):
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `256`")  # noqa: E501

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this AccountList.  # noqa: E501

        An email to display in account profile. Will not be used by Stencila to contact you.  # noqa: E501

        :return: The email of this AccountList.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountList.

        An email to display in account profile. Will not be used by Stencila to contact you.  # noqa: E501

        :param email: The email of this AccountList.  # noqa: E501
        :type email: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 254):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `254`")  # noqa: E501

        self._email = email

    @property
    def image(self):
        """Gets the image of this AccountList.  # noqa: E501


        :return: The image of this AccountList.  # noqa: E501
        :rtype: AccountImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this AccountList.


        :param image: The image of this AccountList.  # noqa: E501
        :type image: AccountImage
        """

        self._image = image

    @property
    def location(self):
        """Gets the location of this AccountList.  # noqa: E501

        Location to display in account profile.  # noqa: E501

        :return: The location of this AccountList.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AccountList.

        Location to display in account profile.  # noqa: E501

        :param location: The location of this AccountList.  # noqa: E501
        :type location: str
        """
        if (self.local_vars_configuration.client_side_validation and
                location is not None and len(location) > 256):
            raise ValueError("Invalid value for `location`, length must be less than or equal to `256`")  # noqa: E501

        self._location = location

    @property
    def website(self):
        """Gets the website of this AccountList.  # noqa: E501

        URL to display in account profile.  # noqa: E501

        :return: The website of this AccountList.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this AccountList.

        URL to display in account profile.  # noqa: E501

        :param website: The website of this AccountList.  # noqa: E501
        :type website: str
        """
        if (self.local_vars_configuration.client_side_validation and
                website is not None and len(website) > 200):
            raise ValueError("Invalid value for `website`, length must be less than or equal to `200`")  # noqa: E501

        self._website = website

    @property
    def role(self):
        """Gets the role of this AccountList.  # noqa: E501

        Role of the current user on the account (if any).  # noqa: E501

        :return: The role of this AccountList.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AccountList.

        Role of the current user on the account (if any).  # noqa: E501

        :param role: The role of this AccountList.  # noqa: E501
        :type role: str
        """
        if (self.local_vars_configuration.client_side_validation and
                role is not None and len(role) < 1):
            raise ValueError("Invalid value for `role`, length must be greater than or equal to `1`")  # noqa: E501

        self._role = role

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountList):
            return True

        return self.to_dict() != other.to_dict()
