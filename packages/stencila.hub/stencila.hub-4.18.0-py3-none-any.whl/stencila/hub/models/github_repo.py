# coding: utf-8

"""
    Stencila Hub API

    ## Authentication  Many endpoints in the Stencila Hub API require an authentication token. These tokens carry many privileges, so be sure to keep them secure. Do not place your tokens in publicly accessible areas such as client-side code. The API is only served over HTTPS to avoid exposing tokens and other data on the network.  To obtain a token, [`POST /api/tokens`](#operations-tokens-tokens_create) with either a `username` and `password` pair, or an [OpenID Connect](https://openid.net/connect/) token. Then use the token in the `Authorization` header of subsequent requests with the prefix `Token` e.g.      curl -H \"Authorization: Token 48866b1e38a2e9db0baada2140b2327937f4a3636dd5f2dfd8c212341c88d34\" https://hub.stenci.la/api/projects/  Alternatively, you can use `Basic` authentication with the token used as the username and no password. This can be more convenient when using command line tools such as [cURL](https://curl.haxx.se/) e.g.      curl -u 48866b1e38a2e9db0baada2140b2327937f4a3636dd5f2dfd8c212341c88d34: https://hub.stenci.la/api/projects/  Or, the less ubiquitous, but more accessible [httpie](https://httpie.org/):      http --auth 48866b1e38a2e9db0baada2140b2327937f4a3636dd5f2dfd8c212341c88d34: https://hub.stenci.la/api/projects/  In both examples above, the trailing colon is not required but avoids being asked for a password.  ## Versioning  The Stencila Hub is released using semantic versioning. The current version is available from the [`GET /api/status`](/api/status) endpoint. Please see the [Github release page](https://github.com/stencila/hub/releases) and the [changelog](https://github.com/stencila/hub/blob/master/CHANGELOG.md) for details on each release. We currently do not provide versioning of the API but plan to do so soon (probably by using a `Accept: application/vnd.stencila.hub+json;version=1.0` request header). If you are using, or interested in using, the API please contact us and we may be able to expedite this.   # noqa: E501

    The version of the OpenAPI document: v1
    Contact: hello@stenci.la
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from stencila.hub.configuration import Configuration


class GithubRepo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'refreshed': 'datetime',
        'full_name': 'str',
        'image_url': 'str',
        'permissions': 'object',
        'updated': 'datetime'
    }

    attribute_map = {
        'refreshed': 'refreshed',
        'full_name': 'fullName',
        'image_url': 'imageUrl',
        'permissions': 'permissions',
        'updated': 'updated'
    }

    def __init__(self, refreshed=None, full_name=None, image_url=None, permissions=None, updated=None, local_vars_configuration=None):  # noqa: E501
        """GithubRepo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._refreshed = None
        self._full_name = None
        self._image_url = None
        self._permissions = None
        self._updated = None
        self.discriminator = None

        if refreshed is not None:
            self.refreshed = refreshed
        self.full_name = full_name
        self.image_url = image_url
        self.permissions = permissions
        self.updated = updated

    @property
    def refreshed(self):
        """Gets the refreshed of this GithubRepo.  # noqa: E501

        The date-time that this information was last refreshed from GitHub.  # noqa: E501

        :return: The refreshed of this GithubRepo.  # noqa: E501
        :rtype: datetime
        """
        return self._refreshed

    @refreshed.setter
    def refreshed(self, refreshed):
        """Sets the refreshed of this GithubRepo.

        The date-time that this information was last refreshed from GitHub.  # noqa: E501

        :param refreshed: The refreshed of this GithubRepo.  # noqa: E501
        :type refreshed: datetime
        """

        self._refreshed = refreshed

    @property
    def full_name(self):
        """Gets the full_name of this GithubRepo.  # noqa: E501

        The full name of the repository ie. owner/name  # noqa: E501

        :return: The full_name of this GithubRepo.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this GithubRepo.

        The full name of the repository ie. owner/name  # noqa: E501

        :param full_name: The full_name of this GithubRepo.  # noqa: E501
        :type full_name: str
        """
        if self.local_vars_configuration.client_side_validation and full_name is None:  # noqa: E501
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                full_name is not None and len(full_name) > 512):
            raise ValueError("Invalid value for `full_name`, length must be less than or equal to `512`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                full_name is not None and len(full_name) < 1):
            raise ValueError("Invalid value for `full_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._full_name = full_name

    @property
    def image_url(self):
        """Gets the image_url of this GithubRepo.  # noqa: E501

        The URL for an image associated with the repository.  # noqa: E501

        :return: The image_url of this GithubRepo.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this GithubRepo.

        The URL for an image associated with the repository.  # noqa: E501

        :param image_url: The image_url of this GithubRepo.  # noqa: E501
        :type image_url: str
        """
        if self.local_vars_configuration.client_side_validation and image_url is None:  # noqa: E501
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                image_url is not None and len(image_url) > 200):
            raise ValueError("Invalid value for `image_url`, length must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                image_url is not None and len(image_url) < 1):
            raise ValueError("Invalid value for `image_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._image_url = image_url

    @property
    def permissions(self):
        """Gets the permissions of this GithubRepo.  # noqa: E501

        A JSON object with permissions that the user has for the repo.  # noqa: E501

        :return: The permissions of this GithubRepo.  # noqa: E501
        :rtype: object
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GithubRepo.

        A JSON object with permissions that the user has for the repo.  # noqa: E501

        :param permissions: The permissions of this GithubRepo.  # noqa: E501
        :type permissions: object
        """
        if self.local_vars_configuration.client_side_validation and permissions is None:  # noqa: E501
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    @property
    def updated(self):
        """Gets the updated of this GithubRepo.  # noqa: E501

        The date-time that the repository was last updated.  # noqa: E501

        :return: The updated of this GithubRepo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this GithubRepo.

        The date-time that the repository was last updated.  # noqa: E501

        :param updated: The updated of this GithubRepo.  # noqa: E501
        :type updated: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated is None:  # noqa: E501
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubRepo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubRepo):
            return True

        return self.to_dict() != other.to_dict()
