# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['chaospy',
 'chaospy.descriptives',
 'chaospy.descriptives.correlation',
 'chaospy.descriptives.sensitivity',
 'chaospy.distributions',
 'chaospy.distributions.baseclass',
 'chaospy.distributions.collection',
 'chaospy.distributions.copulas',
 'chaospy.distributions.kernel',
 'chaospy.distributions.operators',
 'chaospy.distributions.sampler',
 'chaospy.distributions.sampler.sequences',
 'chaospy.external',
 'chaospy.orthogonal',
 'chaospy.quadrature',
 'chaospy.quadrature.genz_keister',
 'chaospy.recurrence']

package_data = \
{'': ['*']}

install_requires = \
['numpoly==1.0.8', 'numpy', 'scipy']

extras_require = \
{':python_version >= "2.7" and python_version < "3.0"': ['functools32']}

setup_kwargs = {
    'name': 'chaospy',
    'version': '4.1.1',
    'description': 'Numerical tool for perfroming uncertainty quantification',
    'long_description': '.. image:: https://github.com/jonathf/chaospy/raw/master/docs/.static/chaospy_logo.svg\n   :height: 200 px\n   :width: 200 px\n   :align: center\n\n|circleci| |codecov| |readthedocs| |downloads| |pypi|\n\n.. |circleci| image:: https://img.shields.io/circleci/build/github/jonathf/chaospy/master\n    :target: https://circleci.com/gh/jonathf/chaospy/tree/master\n.. |codecov| image:: https://img.shields.io/codecov/c/github/jonathf/chaospy\n    :target: https://codecov.io/gh/jonathf/chaospy\n.. |readthedocs| image:: https://img.shields.io/readthedocs/chaospy\n    :target: https://chaospy.readthedocs.io/en/master/?badge=master\n.. |downloads| image:: https://img.shields.io/pypi/dm/chaospy\n    :target: https://pypistats.org/packages/chaospy\n.. |pypi| image:: https://img.shields.io/pypi/v/chaospy\n    :target: https://pypi.org/project/chaospy\n\nChaospy is a numerical tool for performing uncertainty quantification using\npolynomial chaos expansions and advanced Monte Carlo methods implemented in\nPython.\n\n* Documentation: https://chaospy.readthedocs.io/en/master\n* Source code: https://github.com/jonathf/chaospy\n* Issues: https://github.com/jonathf/chaospy/issues\n* Journal article: `"Chaospy: An open source tool for designing methods of\n  uncertainty quantification" <http://dx.doi.org/10.1016/j.jocs.2015.08.008>`_\n\nInstallation\n------------\n\nInstallation should be straight forward from `PyPI <https://pypi.org/>`_:\n\n.. code-block:: bash\n\n    $ pip install chaospy\n\nExample Usage\n-------------\n\n``chaospy`` is created to work well inside numerical Python ecosystem. You\ntherefore typically need to import `Numpy <https://numpy.org/>`_ along side\n``chaospy``:\n\n.. code-block:: python\n\n    >>> import numpy\n    >>> import chaospy\n\n``chaospy`` is problem agnostic, so you can use your own code using any means\nyou find fit. The only requirement is that the output is compatible with\n`numpy.ndarray` format:\n\n.. code-block:: python\n\n    >>> coordinates = numpy.linspace(0, 10, 100)\n    >>> def forward_solver(coordinates, parameters):\n    ...     """Function to do uncertainty quantification on."""\n    ...     param_init, param_rate = parameters\n    ...     return param_init*numpy.e**(-param_rate*coordinates)\n\nWe here assume that ``parameters`` contains aleatory variability with known\nprobability. We formalize this probability in ``chaospy`` as a joint\nprobability distribution. For example:\n\n.. code-block:: python\n\n    >>> distribution = chaospy.J(\n    ...     chaospy.Uniform(1, 2), chaospy.Normal(0, 2))\n    >>> print(distribution)\n    J(Uniform(lower=1, upper=2), Normal(mu=0, sigma=2))\n\nMost probability distributions have an associated expansion of orthogonal\npolynomials. These can be automatically constructed:\n\n.. code-block:: python\n\n    >>> expansion = chaospy.generate_expansion(8, distribution)\n    >>> print(expansion[:5].round(8))\n    [1.0 q1 q0-1.5 q0*q1-1.5*q1 q0**2-3.0*q0+2.16666667]\n\nHere the polynomial is defined positional, such that ``q0`` and ``q1`` refers\nto the uniform and normal distribution respectively.\n\nThe distribution can also be used to create (pseudo-)random samples and\nlow-discrepancy sequences. For example to create Sobol sequence samples:\n\n.. code-block:: python\n\n    >>> samples = distribution.sample(1000, rule="sobol")\n    >>> print(samples[:, :4].round(8))\n    [[ 1.5         1.75        1.25        1.375     ]\n     [ 0.         -1.3489795   1.3489795  -0.63727873]]\n\nWe can evaluating the forward solver using these samples:\n\n.. code-block:: python\n\n    >>> evaluations = numpy.array([\n    ...     forward_solver(coordinates, sample) for sample in samples.T])\n    >>> print(evaluations[:3, :5].round(8))\n    [[1.5        1.5        1.5        1.5        1.5       ]\n     [1.75       2.00546578 2.29822457 2.63372042 3.0181921 ]\n     [1.25       1.09076905 0.95182169 0.83057411 0.72477163]]\n\nHaving all these components in place, we have enough components to perform\npoint collocation. Or in other words, we can create a polynomial approximation\nof ``forward_solver``:\n\n.. code-block:: python\n\n    >>> approx_solver = chaospy.fit_regression(\n    ...     expansion, samples, evaluations)\n    >>> print(approx_solver[:2].round(4))\n    [q0 -0.0002*q0*q1**3+0.0051*q0*q1**2-0.101*q0*q1+q0]\n\nSince the model approximations are polynomials, we can do inference on them\ndirectly. For example:\n\n.. code-block:: python\n\n    >>> expected = chaospy.E(approx_solver, distribution)\n    >>> print(expected[:5].round(8))\n    [1.5        1.53092356 1.62757217 1.80240142 2.07915608]\n    >>> deviation = chaospy.Std(approx_solver, distribution)\n    >>> print(deviation[:5].round(8))\n    [0.28867513 0.43364958 0.76501802 1.27106355 2.07110879]\n\nFor more extensive guides on this approach an others, see the `tutorial\ncollection`_.\n\n.. _tutorial collection: https://chaospy.readthedocs.io/en/master/tutorials\n\nContributions and Related Projects\n----------------------------------\n\nA few shout-outs to people who have contributed to the Chaospy project:\n\n+--------------+--------------------------------------------------------------+\n| `OpenTURNS`_ | Thanks to `Régis Lebrun`_ for both proposing a collaboration |\n|              | and creating an initial implementation of both               |\n|              | `Chaospy Compatibility`_ in `OpenTURNS`_ and                 |\n|              | `OpenTURNS Compatibility`_ in ``chaospy``.                   |\n+--------------+--------------------------------------------------------------+\n| `orthopy`_   | Thanks to `Nico Schlömer`_ for providing the implementation  |\n| `quadpy`_    | for several of the quadrature integration methods.           |\n+--------------+--------------------------------------------------------------+\n| ``UQRF``     | Thanks to `Florian Künzner`_ for providing the initial       |\n|              | implementation of kernel density estimation and              |\n|              | quantity-of-interest distribution.                           |\n+--------------+--------------------------------------------------------------+\n\n.. _OpenTURNS: http://openturns.github.io/openturns/latest\n.. _Régis Lebrun: https://github.com/regislebrun\n.. _Chaospy Compatibility: http://openturns.github.io/openturns/latest/user_manual/_generated/openturns.ChaospyDistribution.html\n.. _OpenTURNS Compatibility: https://chaospy.readthedocs.io/en/master/recipes/external.html#module-chaospy.external.openturns_\n.. _orthopy: https://github.com/nschloe/orthopy\n.. _quadpy: https://github.com/nschloe/quadpy\n.. _Nico Schlömer: https://github.com/nschloe\n.. _Florian Künzner: https://github.com/flo2k\n\nChaospy is being used in other related projects that requires uncertainty\nquantification components ``chaospy`` provides. For example:\n\n+-----------------+-----------------------------------------------------------+\n| `easyVVUQ`_     | Library designed to facilitate verification, validation   |\n|                 | and uncertainty quantification.                           |\n+-----------------+-----------------------------------------------------------+\n| `STARFiSh`_     | Shell-based, scientific simulation program                |\n|                 | for blood flow in mammals.                                |\n+-----------------+-----------------------------------------------------------+\n| `Profit`_       | Probabilistic response model fitting via interactive      |\n|                 | tools.                                                    |\n+-----------------+-----------------------------------------------------------+\n| `UncertainPy`_  | Uncertainty quantification and sensitivity analysis,      |\n|                 | tailored towards computational neuroscience.              |\n+-----------------+-----------------------------------------------------------+\n| `SparseSpACE`_  | Spatially adaptive combination technique targeted to      |\n|                 | solve high dimensional numerical integration.             |\n+-----------------+-----------------------------------------------------------+\n\n.. _easyVVUQ: https://github.com/UCL-CCS/EasyVVUQ\n.. _STARFiSh: https://www.ntnu.no/starfish\n.. _Profit: https://github.com/redmod-team/profit\n.. _UncertainPy: https://github.com/simetenn/uncertainpy\n.. _SparseSpACE: https://github.com/obersteiner/sparseSpACE\n\nFor a more comprehensive list, see `Github\'s dependency graph\n<https://github.com/jonathf/chaospy/network/dependents>`_.\n\nQuestions and Contributions\n---------------------------\n\nPlease feel free to\n`file an issue <https://github.com/jonathf/chaospy/issues>`_ for:\n\n* bug reporting\n* asking questions related to usage\n* requesting new features\n* wanting to contribute with code\n\nIf you are using this software in work that will be published, please cite the\njournal article: `Chaospy: An open source tool for designing methods of\nuncertainty quantification <http://dx.doi.org/10.1016/j.jocs.2015.08.008>`_.\n\nAnd if you use code to deal with stochastic dependencies, please also cite\n`Multivariate Polynomial Chaos Expansions with Dependent Variables\n<https://epubs.siam.org/doi/10.1137/15M1020447>`_.\n',
    'author': 'Jonathan Feinberg',
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/jonathf/chaospy',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*',
}


setup(**setup_kwargs)
