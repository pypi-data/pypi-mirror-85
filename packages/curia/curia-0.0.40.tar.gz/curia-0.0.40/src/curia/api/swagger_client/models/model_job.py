# coding: utf-8

"""
    Curia Platform API

    These are the docs for the curia platform API. To test, generate an authorization token first.  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'config': 'object',
        'execution_id': 'str',
        'message': 'str',
        'summary_data': 'object',
        'schema': 'object',
        'status': 'str',
        'timeline_id': 'str',
        'project_id': 'str',
        'environment_id': 'str',
        'model_dataset_id': 'str',
        'project': 'Project',
        'timeline': 'Timeline',
        'environment': 'Environment',
        'events': 'list[ModelJobEvent]',
        'endpoints': 'list[ModelEndpoint]',
        'model_dataset': 'list[ModelDataset]',
        'model_job_output_features': 'list[ModelJobOutputFeature]',
        'model_job_statuses': 'list[ModelJobStatus]',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'version': 'float'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'config': 'config',
        'execution_id': 'executionId',
        'message': 'message',
        'summary_data': 'summaryData',
        'schema': 'schema',
        'status': 'status',
        'timeline_id': 'timelineId',
        'project_id': 'projectId',
        'environment_id': 'environmentId',
        'model_dataset_id': 'modelDatasetId',
        'project': 'project',
        'timeline': 'timeline',
        'environment': 'environment',
        'events': 'events',
        'endpoints': 'endpoints',
        'model_dataset': 'modelDataset',
        'model_job_output_features': 'modelJobOutputFeatures',
        'model_job_statuses': 'modelJobStatuses',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'version': 'version'
    }

    def __init__(self, id=None, type=None, config=None, execution_id=None, message=None, summary_data=None, schema=None, status=None, timeline_id=None, project_id=None, environment_id=None, model_dataset_id=None, project=None, timeline=None, environment=None, events=None, endpoints=None, model_dataset=None, model_job_output_features=None, model_job_statuses=None, created_at=None, updated_at=None, version=None):  # noqa: E501
        """ModelJob - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._config = None
        self._execution_id = None
        self._message = None
        self._summary_data = None
        self._schema = None
        self._status = None
        self._timeline_id = None
        self._project_id = None
        self._environment_id = None
        self._model_dataset_id = None
        self._project = None
        self._timeline = None
        self._environment = None
        self._events = None
        self._endpoints = None
        self._model_dataset = None
        self._model_job_output_features = None
        self._model_job_statuses = None
        self._created_at = None
        self._updated_at = None
        self._version = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.type = type
        if config is not None:
            self.config = config
        if execution_id is not None:
            self.execution_id = execution_id
        if message is not None:
            self.message = message
        if summary_data is not None:
            self.summary_data = summary_data
        if schema is not None:
            self.schema = schema
        if status is not None:
            self.status = status
        if timeline_id is not None:
            self.timeline_id = timeline_id
        self.project_id = project_id
        if environment_id is not None:
            self.environment_id = environment_id
        if model_dataset_id is not None:
            self.model_dataset_id = model_dataset_id
        if project is not None:
            self.project = project
        if timeline is not None:
            self.timeline = timeline
        if environment is not None:
            self.environment = environment
        if events is not None:
            self.events = events
        if endpoints is not None:
            self.endpoints = endpoints
        if model_dataset is not None:
            self.model_dataset = model_dataset
        if model_job_output_features is not None:
            self.model_job_output_features = model_job_output_features
        if model_job_statuses is not None:
            self.model_job_statuses = model_job_statuses
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this ModelJob.  # noqa: E501


        :return: The id of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelJob.


        :param id: The id of this ModelJob.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ModelJob.  # noqa: E501


        :return: The type of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelJob.


        :param type: The type of this ModelJob.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def config(self):
        """Gets the config of this ModelJob.  # noqa: E501


        :return: The config of this ModelJob.  # noqa: E501
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ModelJob.


        :param config: The config of this ModelJob.  # noqa: E501
        :type: object
        """

        self._config = config

    @property
    def execution_id(self):
        """Gets the execution_id of this ModelJob.  # noqa: E501


        :return: The execution_id of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this ModelJob.


        :param execution_id: The execution_id of this ModelJob.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def message(self):
        """Gets the message of this ModelJob.  # noqa: E501


        :return: The message of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ModelJob.


        :param message: The message of this ModelJob.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def summary_data(self):
        """Gets the summary_data of this ModelJob.  # noqa: E501


        :return: The summary_data of this ModelJob.  # noqa: E501
        :rtype: object
        """
        return self._summary_data

    @summary_data.setter
    def summary_data(self, summary_data):
        """Sets the summary_data of this ModelJob.


        :param summary_data: The summary_data of this ModelJob.  # noqa: E501
        :type: object
        """

        self._summary_data = summary_data

    @property
    def schema(self):
        """Gets the schema of this ModelJob.  # noqa: E501


        :return: The schema of this ModelJob.  # noqa: E501
        :rtype: object
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this ModelJob.


        :param schema: The schema of this ModelJob.  # noqa: E501
        :type: object
        """

        self._schema = schema

    @property
    def status(self):
        """Gets the status of this ModelJob.  # noqa: E501


        :return: The status of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ModelJob.


        :param status: The status of this ModelJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def timeline_id(self):
        """Gets the timeline_id of this ModelJob.  # noqa: E501


        :return: The timeline_id of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._timeline_id

    @timeline_id.setter
    def timeline_id(self, timeline_id):
        """Sets the timeline_id of this ModelJob.


        :param timeline_id: The timeline_id of this ModelJob.  # noqa: E501
        :type: str
        """

        self._timeline_id = timeline_id

    @property
    def project_id(self):
        """Gets the project_id of this ModelJob.  # noqa: E501


        :return: The project_id of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ModelJob.


        :param project_id: The project_id of this ModelJob.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def environment_id(self):
        """Gets the environment_id of this ModelJob.  # noqa: E501


        :return: The environment_id of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this ModelJob.


        :param environment_id: The environment_id of this ModelJob.  # noqa: E501
        :type: str
        """

        self._environment_id = environment_id

    @property
    def model_dataset_id(self):
        """Gets the model_dataset_id of this ModelJob.  # noqa: E501


        :return: The model_dataset_id of this ModelJob.  # noqa: E501
        :rtype: str
        """
        return self._model_dataset_id

    @model_dataset_id.setter
    def model_dataset_id(self, model_dataset_id):
        """Sets the model_dataset_id of this ModelJob.


        :param model_dataset_id: The model_dataset_id of this ModelJob.  # noqa: E501
        :type: str
        """

        self._model_dataset_id = model_dataset_id

    @property
    def project(self):
        """Gets the project of this ModelJob.  # noqa: E501


        :return: The project of this ModelJob.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ModelJob.


        :param project: The project of this ModelJob.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def timeline(self):
        """Gets the timeline of this ModelJob.  # noqa: E501


        :return: The timeline of this ModelJob.  # noqa: E501
        :rtype: Timeline
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this ModelJob.


        :param timeline: The timeline of this ModelJob.  # noqa: E501
        :type: Timeline
        """

        self._timeline = timeline

    @property
    def environment(self):
        """Gets the environment of this ModelJob.  # noqa: E501


        :return: The environment of this ModelJob.  # noqa: E501
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this ModelJob.


        :param environment: The environment of this ModelJob.  # noqa: E501
        :type: Environment
        """

        self._environment = environment

    @property
    def events(self):
        """Gets the events of this ModelJob.  # noqa: E501


        :return: The events of this ModelJob.  # noqa: E501
        :rtype: list[ModelJobEvent]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this ModelJob.


        :param events: The events of this ModelJob.  # noqa: E501
        :type: list[ModelJobEvent]
        """

        self._events = events

    @property
    def endpoints(self):
        """Gets the endpoints of this ModelJob.  # noqa: E501


        :return: The endpoints of this ModelJob.  # noqa: E501
        :rtype: list[ModelEndpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ModelJob.


        :param endpoints: The endpoints of this ModelJob.  # noqa: E501
        :type: list[ModelEndpoint]
        """

        self._endpoints = endpoints

    @property
    def model_dataset(self):
        """Gets the model_dataset of this ModelJob.  # noqa: E501


        :return: The model_dataset of this ModelJob.  # noqa: E501
        :rtype: list[ModelDataset]
        """
        return self._model_dataset

    @model_dataset.setter
    def model_dataset(self, model_dataset):
        """Sets the model_dataset of this ModelJob.


        :param model_dataset: The model_dataset of this ModelJob.  # noqa: E501
        :type: list[ModelDataset]
        """

        self._model_dataset = model_dataset

    @property
    def model_job_output_features(self):
        """Gets the model_job_output_features of this ModelJob.  # noqa: E501


        :return: The model_job_output_features of this ModelJob.  # noqa: E501
        :rtype: list[ModelJobOutputFeature]
        """
        return self._model_job_output_features

    @model_job_output_features.setter
    def model_job_output_features(self, model_job_output_features):
        """Sets the model_job_output_features of this ModelJob.


        :param model_job_output_features: The model_job_output_features of this ModelJob.  # noqa: E501
        :type: list[ModelJobOutputFeature]
        """

        self._model_job_output_features = model_job_output_features

    @property
    def model_job_statuses(self):
        """Gets the model_job_statuses of this ModelJob.  # noqa: E501


        :return: The model_job_statuses of this ModelJob.  # noqa: E501
        :rtype: list[ModelJobStatus]
        """
        return self._model_job_statuses

    @model_job_statuses.setter
    def model_job_statuses(self, model_job_statuses):
        """Sets the model_job_statuses of this ModelJob.


        :param model_job_statuses: The model_job_statuses of this ModelJob.  # noqa: E501
        :type: list[ModelJobStatus]
        """

        self._model_job_statuses = model_job_statuses

    @property
    def created_at(self):
        """Gets the created_at of this ModelJob.  # noqa: E501


        :return: The created_at of this ModelJob.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelJob.


        :param created_at: The created_at of this ModelJob.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ModelJob.  # noqa: E501


        :return: The updated_at of this ModelJob.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ModelJob.


        :param updated_at: The updated_at of this ModelJob.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this ModelJob.  # noqa: E501


        :return: The version of this ModelJob.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ModelJob.


        :param version: The version of this ModelJob.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
