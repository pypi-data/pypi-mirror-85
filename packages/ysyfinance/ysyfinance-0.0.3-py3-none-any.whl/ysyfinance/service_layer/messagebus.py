# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/08_service_layer.messagebus.ipynb (unless otherwise specified).


from __future__ import annotations


__all__ = ['logger', 'Message', '__all__', 'MessageBus']

# Cell
#nbdev_comment from __future__ import annotations
import logging
from typing import Callable, Dict, List, Union, Type, TYPE_CHECKING, Any
from ..domain import events, commands

if TYPE_CHECKING:
    from . import unit_of_work

logger = logging.getLogger(__name__)
Message = Union[commands.Command, events.Event]

# Cell
__all__=['MessageBus']

# Cell
class MessageBus:

    def __init__(
        self,
        syn_uow: unit_of_work.AbstractUnitOfWork,
        pd_uow: unit_of_work.AbstractUnitOfWork,
        event_handlers: Dict[Type[events.Event], List[Callable]],
        command_handlers: Dict[Type[commands.Command], Callable],
    ):
        self.syn_uow = syn_uow
        self.pd_uow = pd_uow
        self.event_handlers = event_handlers
        self.command_handlers = command_handlers

    def handle(self, message: Message):
        self.queue = [message]
        while self.queue:
            message = self.queue.pop(0)
            if isinstance(message, events.Event):
                self.handle_event(message)
            elif isinstance(message, commands.Command):
                self.handle_command(message)
            elif isinstance(message, str):
                self.handle_command(message)
            else:
                raise Exception(f'{message} was not an Event or Command')


    def handle_event(self, event: events.Event):
        for handler in self.event_handlers[type(event)]:
            try:
                logger.debug('handling event %s with handler %s', event, handler)
                handler(event)
                self.queue.extend(self.pd_uow.collect_new_events())
                self.queue.extend(self.syn_uow.collect_new_events())
            except Exception:
                logger.exception('Exception handling event %s', event)
                continue


    def handle_command(self, command: Union[commands.Command, str]):
        logger.debug('handling command %s', command)
        try:
            handler = self.command_handlers[type(command)] if isinstance(command, str)==False \
                            else self.command_handlers[command]
            handler(command)
            self.queue.extend(self.pd_uow.collect_new_events())
            self.queue.extend(self.syn_uow.collect_new_events())
        except Exception:
            logger.exception('Exception handling command %s', command)
            raise
