# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/15_budget.domain.ipynb (unless otherwise specified).

__all__ = ['__all__', 'GeneralLedgerUsers', 'UvGeneralLedger', 'GlBudgetActual']

# Cell
import ysyfinance.domain.model as model
from pyspark.sql.functions import *
from pyspark.sql import DataFrame, Window
import IPython.core.debugger as db
__all__=['GeneralLedgerUsers','UvGeneralLedger','GlBudgetActual']

# Cell
class GeneralLedgerUsers(model.SparkModel):
    #format: database.table
    pipeline.add_source(model.DataSource(source_table='finance.GeneralLedgerUsers' ))
    pipeline.add_source(model.DataSource(source_table='configusers'))
    pipeline.add_source(model.DataSource(source_table='configusergroups'))

    #format: zone.database.table
    pipeline.add_desttable(pipeline_name='security', desttable='curated.finance.GlCodeSecurity')
    pipeline.add_desttable(pipeline_name='users', desttable='curated.finance.GlCodeUsers')

    @classmethod
    def _combine_dataobjects(cls, glusers, configusers, configgroups) -> DataFrame:
        joinExpr1 = configusers["LoginName"] == configgroups["LoginName"]
        joined_df1 = configusers.join(configgroups, joinExpr1) \
                            .select(configusers.LoginName, 'groupcode', 'fileyear', 'filesemester') \
                            .filter("groupcode in ('SENEX', 'FINANDEP', 'HOD', 'HOM_HOS', 'HOD_CS', 'ELCDIRECTOR')") \
                            .filter("groupcode<>' '") \
                            .distinct()
        joined_df2 = glusers.join(joined_df1, "LoginName").select('LoginName','GLCode').distinct()

#         db.set_trace()
        return joined_df2

    def create_test_df(self, dataobject):
        #append some manual rows for testig
        from pyspark.sql import Row
        from pyspark.sql.types import StructField, StructType, StringType, LongType
        myManualSchema = StructType([
            StructField("GLCode", StringType(), True),
            StructField("LoginName", StringType(), True),
            StructField("UPName", StringType(), True)
        ])
        myRow = Row('00.00.730.6110',"HY\pyang", "pyang@haileybury.vic.edu.au")
        myDf = self.api.createDataFrame([myRow], myManualSchema)
        return myDf


    @pipeline.register(pipeline_name='security', order=1)
    @pipeline.register(pipeline_name='users', order=1)
    def generate_security_table(self, dataobject: DataFrame) -> DataFrame:
        glcode_security = dataobject \
                            .withColumn('UPName', \
                                        concat( \
                                            regexp_replace(col('LoginName'), 'HY\\\\|hy\\\\', ''),
                                            lit("@haileybury.vic.edu.au") \
                                            ) \
                                           ) \
                            .selectExpr('GLCode','LoginName','UPName') \
                            .filter("GLCode <> ' ' and GLCode like '%.%'")


        myDf = self.create_test_df(dataobject)
        newDf = glcode_security.union(myDf)
#         db.set_trace()
        return newDf

    @pipeline.register(pipeline_name='users', order=2)
    def generate_users_table(self, dataobject: DataFrame) -> DataFrame:
        return dataobject.select('LoginName','UPName').distinct()

# Cell
class UvGeneralLedger(model.SparkModel):
    pipeline.add_source(model.DataSource(source_table = 'finance.uvGeneralLedger'))
    pipeline.add_desttable(pipeline_name='default',desttable='curated.finance.uvGeneralLedger')

    @pipeline.register(pipeline_name='default', order=1)
    def generate_uv_general_ledger(self, dataobject: DataFrame) -> DataFrame:
        dataobject.createOrReplaceTempView('uvGeneralLedger')
        return self.api.sql("""
            SELECT
            GLCOACode, GLCOADescription,GLYear,
            GLCode, GLDescription,
            GLDivisionCode, GLDivisionDescription,
            GLLastYearMovement,
            GLStartYearBalance,
            GLCurrentBalance,
            GLActiveFlag,
            GLLocationCode,GLLocationCodeDescription,
            GLDepartmentCode, GLDepartmentDescription
            FROM
            uvGeneralLedger
        """).filter(col("GLYear") == year(current_date()))

# Cell
class GlBudgetActual(model.SparkModel):
    #data source
    pipeline.add_source(model.DataSource(source_table = 'finance.vGLMonthlyMovementInColumnsAllYears'))

    #destination for raw data
    pipeline.add_desttable(pipeline_name='glbudgetactual_raw', \
                           desttable='raw.finance.GlBudgetActual', \
                           primary_key=['GLYear','GLCode']
                          )
    #pipeline glbudgetactual uses raw data
    pipeline.add_additional_data(pipeline_name='glbudgetactual', \
                                additional_data=[model.AdditionalData(reference='glbudgetactual_raw')])
    #destination for glbudgetactual
    pipeline.add_desttable(pipeline_name='glbudgetactual', \
                           desttable='curated.finance.GlBudgetActual', \
                           primary_key=['GLYear','GLMonth','GLCode']
                          )

    def unpivot_actual(self, dataobject: DataFrame, is_init=False) -> DataFrame:
        '''
            helper function to unpivot actual spending columns
        '''
        dataobject.createOrReplaceTempView('vGLMonthlyMovementInColumnsAllYears')
        filter_budget_cols_sql = """
            SELECT
                GLYear, GLCode, GLDescription, GLActiveFlag, StartYearBalance,
                GLPeriod1, GLPeriod2, GLPeriod3, GLPeriod4, GLPeriod5, GLPeriod6,
                GLPeriod7, GLPeriod8, GLPeriod9, GLPeriod10, GLPeriod11, GLPeriod12
            FROM
                vGLMonthlyMovementInColumnsAllYears
            WHERE
                GLActiveFlag=1
        """

        unpivot_expr = """
            STACK(12, 1, GLPeriod1, 2, GLPeriod2,
                            3, GLPeriod3, 4, GLPeriod4,
                            5, GLPeriod5, 6, GLPeriod6,
                            7, GLPeriod7, 8, GLPeriod8,
                            9, GLPeriod9, 10, GLPeriod10,
                            11, GLPeriod11, 12, GLPeriod12
                            ) as (GLMonth, ActualSpending)
        """

        cumtotal_expr = """
            SUM(ActualSpending)
            OVER (
                PARTITION BY GLYear, GLCode
                ORDER BY GLMonth
                ROWS BETWEEN
                    UNBOUNDED PRECEDING AND CURRENT ROW
            )
        """
        if is_init:
            whereExpr = (col("GLYear") == year(current_date())) | (col("GLYear") == year(current_date())-1)
        else:
            whereExpr = (col("GLYear") == year(current_date()))

        # unpivot GLPeriod1,..., GLPeriod12
        # add cumulative sum of the actual spending
        return self.api \
            .sql(filter_budget_cols_sql) \
            .where( whereExpr ) \
            .select('GLYear', 'GLCode', expr(unpivot_expr)) \
            .withColumn('CumActualSpending', expr(cumtotal_expr))


    def unpivot_budget(self, dataobject: DataFrame, is_init=False) -> DataFrame:
        '''
            helper function to unpivot the budget spending columns
        '''
        unpivot_expr = """
            STACK(12, 1, BudgetApprovedPeriod1, 2, BudgetApprovedPeriod2,
                            3, BudgetApprovedPeriod3, 4, BudgetApprovedPeriod4,
                            5, BudgetApprovedPeriod5, 6, BudgetApprovedPeriod6,
                            7, BudgetApprovedPeriod7, 8, BudgetApprovedPeriod8,
                            9, BudgetApprovedPeriod9, 10, BudgetApprovedPeriod10,
                            11, BudgetApprovedPeriod11, 12, BudgetApprovedPeriod12
                            ) as (GLMonth, BudgetSpending)
        """

        windowSpec = Window \
                        .partitionBy('GLYear', 'GLCode') \
                        .orderBy(asc('GLMonth')) \
                        .rowsBetween(Window.unboundedPreceding, Window.currentRow)

        budgetCumSum = sum(col('BudgetSpending')).over(windowSpec)

        if is_init:
            whereExpr = (col("GLYear") == year(current_date())) | (col("GLYear") == year(current_date())-1)
        else:
            whereExpr = (col("GLYear") == year(current_date()))


        return dataobject \
                .select('GLYear', 'GLCode', 'GLActiveFlag', \
                'BudgetApprovedPeriod1', 'BudgetApprovedPeriod2', 'BudgetApprovedPeriod3', \
                'BudgetApprovedPeriod4', 'BudgetApprovedPeriod5', 'BudgetApprovedPeriod6', \
                'BudgetApprovedPeriod7', 'BudgetApprovedPeriod8', 'BudgetApprovedPeriod9', \
                'BudgetApprovedPeriod10', 'BudgetApprovedPeriod11', 'BudgetApprovedPeriod12') \
                .where('GLActiveFlag=1') \
                .where( whereExpr ) \
                .select('GLYear', 'GLCode', expr(unpivot_expr), budgetCumSum.alias('CumBudgetSpending'))

    @pipeline.register(pipeline_name='glbudgetactual_raw', order=1)
    def store_glbudgetactual_rawdata(self, dataobject, is_init=False):
        '''
            Save table finance.vGLMonthlyMovementInColumnsAllYears to raw zone
            Upon initializing, it stores the data going back 5 years.
            Then, it adds/updates the data for the current year
        '''
#         db.set_trace()
        if is_init:
            whereExpr = ( col("GLYear") <= year(current_date()) ) \
                            & ( col("GLYear") >= year(current_date())-5 )
        else:
            whereExpr = ( col("GLYear") == year(current_date()) )
        return dataobject \
                .select('GLYear', 'GLCode', 'GLActiveFlag', \
                'GLDescription', 'StartYearBalance', \
                'BudgetApprovedPeriod1', 'BudgetApprovedPeriod2', 'BudgetApprovedPeriod3', \
                'BudgetApprovedPeriod4', 'BudgetApprovedPeriod5', 'BudgetApprovedPeriod6', \
                'BudgetApprovedPeriod7', 'BudgetApprovedPeriod8', 'BudgetApprovedPeriod9', \
                'BudgetApprovedPeriod10', 'BudgetApprovedPeriod11', 'BudgetApprovedPeriod12', \
                'GLPeriod1', 'GLPeriod2', 'GLPeriod3', 'GLPeriod4', 'GLPeriod5', 'GLPeriod6', \
                'GLPeriod7', 'GLPeriod8', 'GLPeriod9', 'GLPeriod10', 'GLPeriod11', 'GLPeriod12') \
                .where('GLActiveFlag=1') \
                .where( whereExpr )

    @pipeline.register(pipeline_name='glbudgetactual', order=1)
    def process_glbudgetactual(self, dataobject, dataobject_raw, is_init=False):
        '''
            Adds/updates the budget and actual spending per year, month and glcode
        '''
#         db.set_trace()
        d_actual = self.unpivot_actual(dataobject_raw, is_init)
        d_budget = self.unpivot_budget(dataobject_raw, is_init)

        return d_actual.join(d_budget, ['GLYear','GLMonth','GLCode'])



