# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/10_service_layer.handlers.ipynb (unless otherwise specified).


from __future__ import annotations


__all__ = ['__all__', 'run_etljob', 'EVENT_HANDLERS', 'COMMAND_HANDLERS']

# Cell
#export
#nbdev_comment from __future__ import annotations
from dataclasses import asdict
from typing import List, Dict, Callable, Type, TYPE_CHECKING, Union
from ..domain import commands, events, model
from ..adapters.repository import get_class
if TYPE_CHECKING:
    from . import unit_of_work

# Cell
__all__=['run_etljob']

# Cell
def run_etljob(
    cmd: commands.EtlJob, syn_uow: unit_of_work.AbstractUnitOfiWork
):
    with syn_uow:
        if not cmd.pipeline_names:
            pipeline_names = get_class(cmd.reference).get_pipeline_names()
        else:
            pipeline_names = cmd.pipeline_names

        if cmd.source_action == 'get':
            model_ori = getattr(syn_uow.repo, cmd.source_action)(reference=cmd.reference)
        else:
            model_ori = None

        for pname in pipeline_names:
            if cmd.source_action != 'get':
                model_ori = getattr(syn_uow.repo, cmd.source_action)(reference=cmd.reference, pipeline_name=pname)
            if cmd.pipeline_args:
                kwargs = cmd.pipeline_args.get(pname, None)
            else:
                kwargs = {}
            model = model_ori.run_pipeline(pipeline_name=pname, **kwargs)
            model.save(pipeline_name=pname)

# Cell
EVENT_HANDLERS = {

}  # type: Dict[Type[events.Event], List[Callable]]

COMMAND_HANDLERS = {
#     commands.EtlAssignment: etl_assignment,
    commands.EtlJob: run_etljob
}  # type: Dict[Type[Union[commands.Command, str]], Callable]
