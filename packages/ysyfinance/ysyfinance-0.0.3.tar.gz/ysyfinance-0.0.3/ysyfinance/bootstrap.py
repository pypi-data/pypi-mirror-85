# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/12_bootstrap.ipynb (unless otherwise specified).

__all__ = ['__all__', 'bootstrap', 'inject_dependencies']

# Cell
#export
import inspect
from typing import Callable
from .service_layer import handlers, messagebus, unit_of_work

# Cell
__all__=['bootstrap','inject_dependencies']

# Cell
def bootstrap(
    syn_uow: unit_of_work.AbstractUnitOfWork = unit_of_work.SparkUnitOfWork(),
    pd_uow: unit_of_work.AbstractUnitOfWork = unit_of_work.PandasUnitOfWork()
) -> messagebus.MessageBus:

    dependencies = {'syn_uow': syn_uow,'pd_uow': pd_uow}
    injected_event_handlers = {
        event_type: [
            inject_dependencies(handler, dependencies)
            for handler in event_handlers
        ]
        for event_type, event_handlers in handlers.EVENT_HANDLERS.items()
    }
    injected_command_handlers = {
        command_type: inject_dependencies(handler, dependencies)
        for command_type, handler in handlers.COMMAND_HANDLERS.items()
    }

    return messagebus.MessageBus(
        syn_uow=syn_uow,
        pd_uow=pd_uow,
        event_handlers=injected_event_handlers,
        command_handlers=injected_command_handlers,
    )


def inject_dependencies(handler, dependencies):
    params = inspect.signature(handler).parameters
    deps = {
        name: dependency
        for name, dependency in dependencies.items()
        if name in params
    }
    return lambda message: handler(message, **deps)
